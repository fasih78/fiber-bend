import mongoose, { mongo, Mongoose } from 'mongoose';
import { CurrencyModel } from '../currency/currency.model';
import { SalesContract, SalesContractModel } from './sales_contract.model';
import { SalesContractDtlModel } from './sales_contract_dtl.model';
import dayjs from 'dayjs';
import { Customer, CustomerModel } from '../customer/customer.model';
import { BrandModel } from '../brand/brand.model';
import { PaymentTermModel } from '../payment_term/payment_term.model';
import { SalesContractDtl } from './sales_contract_dtl.model';
import { ProductModel } from '../product/product.model';
import { CityModel } from '../city/city.model';
import { Invoice, InvoiceModel } from '../invoice/invoice.model';
import { InvoiceDtlModel } from '../invoice/invoice_dtl.model';
import { ShipViaModel } from '../shipvia/shipvia.model';

import {
  CreateSalesContractSchema,
  DashboardDetailsGroupSchema,
  PendingContractBalanceSchema,
  PendingContractSchema,
  SaleContractReportPrintSchema,
  SaleContractReportProductSchema,
  SaleContractReportSchema,
  Salecontractdrop_downSchema,
  tempSchema,
} from './sales_contract.schema';
//import { SalesContractDtl } from './sales_contract_dtl.model';
// import utc from 'dayjs/plugin/utc';
// dayjs.extend(utc);
import moment, { relativeTimeRounding } from 'moment';
import { cloneDeep, isEmpty, map, update } from 'lodash';
import { ShipmentModel } from '../shipment/shipment.model';
import { ShipmentDtlModel } from '../shipment/shipment_dtls.model';
import { EMPTY_PATH, array, number } from 'zod';
import { empty } from '@prisma/client/runtime';
import salesContractRoutes from './sales_contract.routes';
import { RoyalityAdmModel } from '../royality/royalityAdmDenim.model';
import { RoyalityModel } from '../royality/royality.model';
import { ProductionDtlModel } from '../production/production_dtl.model';
import { ProductionModel } from '../production/production.model';
import { State, StateModel } from '../state/state.model';
import { Country, CountryModel } from '../country/country.model';
import { PaymentModel } from '../payment/payment.model';
import { MachineModel } from '../machine/machine.model';
import countryRoutes from '../country/country.route';
import path from 'path';
import { pipeline } from 'stream';
import { invoiceReportfilterSalesContract } from '../invoice/invoice.service';
import { errorUtil } from 'zod/lib/helpers/errorUtil';

export const createSalesContract = async (input: CreateSalesContractSchema) => {
  const { customer } = input;
  const customerid = { _id: customer };
  const customers = await CustomerModel.findById(customerid);
  const filt = customers?.name;

  if (customer == '648d7c960cee8c1de3294415') {
    const {
      tran,
      po,
      contract,
      specialInstruction,
      customer,
      brand,
      paymentTerm,
      shipvia,
      salesContractDtl,
      poDate,
      contractDate,
      tc_no,
      vendorgarment,
      order_status,
      royality_approval,
    } = input;
    const LastUser = await SalesContractModel.findOne().sort({ _id: -1 });
    const Invoice_no = LastUser ? LastUser.tran + 1 : 1;

    const salesContract1 = await SalesContractModel.create({
      salesTaxInvoiceNo: Invoice_no,
      royality: false,
      tran,
      po,
      contract,
      specialInstruction,
      customer: new mongoose.Types.ObjectId(customer),
      brand: new mongoose.Types.ObjectId(brand),
      paymentTerm: new mongoose.Types.ObjectId(paymentTerm),
      shipvia: new mongoose.Types.ObjectId(shipvia),
      poDate,
      contractDate,
      tc_no,
      vendorgarment,
      shipment: false,
      invoice: false,
      order_status,
      royality_approval,
    });
    for (const sale of salesContractDtl) {
      const newSalesDtl = await SalesContractDtlModel.create({
        tran: tran,
        contractDate: contractDate,
        qty: sale.qty,
        rate: sale.rate,
        amount: +sale.qty * +sale.rate,
        uom: sale.uom,
        shipmentDate: sale.shipmentDate,
        customer: new mongoose.Types.ObjectId(customer),
        brand: new mongoose.Types.ObjectId(brand),
        product: new mongoose.Types.ObjectId(sale.product),
        currency: new mongoose.Types.ObjectId(sale.currency),
        salesContract: new mongoose.Types.ObjectId(salesContract1._id),
        exchangeRate: sale.exchangeRate,
        royality: false,
        shipment: false,
        invoice: false,
        order_status,
        royality_approval,
      });
    }
    const inhouse = await SalesContractModel.updateOne(
      { _id: salesContract1._id },
      {
        $set: {
          InHouse: true,
        },
      }
    );
    const inhouse1 = await SalesContractDtlModel.updateOne(
      { salesContract: salesContract1._id },
      {
        $set: {
          InHouse: true,
        },
      }
    );
    return salesContract1;
  } else {
    const {
      tran,
      po,
      contract,
      specialInstruction,
      customer,
      brand,
      paymentTerm,
      shipvia,
      salesContractDtl,
      poDate,
      contractDate,
      tc_no,
      vendorgarment,
      order_status,
      royality_approval,
    } = input;

    const salesContract = await SalesContractModel.create({
      tran,
      po,
      contract,
      specialInstruction,
      customer: new mongoose.Types.ObjectId(customer),
      brand: new mongoose.Types.ObjectId(brand),
      paymentTerm: new mongoose.Types.ObjectId(paymentTerm),
      shipvia: new mongoose.Types.ObjectId(shipvia),
      poDate,
      contractDate,
      tc_no,
      vendorgarment,
      invoice: false,
      shipment: false,
      royality_nonadm: false,
      order_status,
      royality_approval,
    });

    for (const sale of salesContractDtl) {
      const newSalesDtl = await SalesContractDtlModel.create({
        tran: tran,
        qty: sale.qty,
        contractDate: contractDate,
        rate: sale.rate,
        amount: +sale.qty * +sale.rate,
        uom: sale.uom,
        shipmentDate: sale.shipmentDate,
        customer: new mongoose.Types.ObjectId(customer),
        brand: new mongoose.Types.ObjectId(brand),
        product: new mongoose.Types.ObjectId(sale.product),
        currency: new mongoose.Types.ObjectId(sale.currency),
        salesContract: new mongoose.Types.ObjectId(salesContract._id),
        exchangeRate: sale.exchangeRate,
        shipment: false,
        royality_nonadm: false,
        invoice: false,
        order_status: sale.order_status,
        royality_approval,
      });
    }

    return salesContract;
  }
};
export const getNewSalesContractId = async () => {
  const salesContract = await SalesContractModel.findOne()
    .sort({ field: 'asc', _id: -1 })
    .limit(1);

  let newId: number = 1;
  if (salesContract != null) {
    newId = salesContract.tran + 1;
  }

  return newId;
};

export const findSalesContractswithPagination = async (
  input: SaleContractReportProductSchema
) => {
  const limit = input.perPage;
  const skipCount = (input.pageno - 1) * limit;
  const searchQuery = new RegExp(`^${input?.contract}`, 'i');
  
 
  const getSaleContractAggregation = (matchQuery: { contract: { $regex: RegExp; }; isDeleted: boolean; } | { isDeleted: boolean; contract?: undefined; }) => {
    return SalesContractModel.aggregate([
      {
        $match: matchQuery,
      },
      {
        $lookup: {
          from: 'salescontractdtls',
          localField: '_id',
          foreignField: 'salesContract',
          as: 'sales_dtl',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
          pipeline: [
            {
              $lookup: {
                from: 'countries',
                localField: 'country',
                foreignField: '_id',
                as: 'country',
              },
            },
            {
              $lookup: {
                from: 'cities',
                localField: 'city',
                foreignField: '_id',
                as: 'city',
              },
            },
            {
              $lookup: {
                from: 'states',
                localField: 'state',
                foreignField: '_id',
                as: 'state',
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'paymentterms',
          localField: 'paymentTerm',
          foreignField: '_id',
          as: 'paymentTerm',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $lookup: {
          from: 'shipvias',
          localField: 'shipvia',
          foreignField: '_id',
          as: 'shipvia',
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { tran: 1 } }, // Remove if sorting is not required
    ]);
  };
  

  const matchQuery = input.contract
    ? { contract: { $regex: searchQuery }, isDeleted: false }
    : { isDeleted: false };
  

  const [saleContractDetail, totalRecords] = await Promise.all([
    getSaleContractAggregation(matchQuery), 
    SalesContractModel.countDocuments(matchQuery), 
  ]);
  console.log(totalRecords)
  const result = {
    saleContractDetail: saleContractDetail,
    total_records: totalRecords,
  };
  
  return result;
};

export const findSalesContracts = async () => {
  const saleContractDetail = await SalesContractDtlModel.aggregate([
    { $match: { isDeleted: false } },
    {
      $group: {
        _id: '$salesContract',
        salesContract: { $first: '$salesContract' },
        qty: { $sum: '$qty' },
        rate: { $sum: '$rate' },
        amount: { $sum: '$amount' },
        shipmentDate: { $first: '$shipmentDate' },
      },
    },
  ]);
  await SalesContractDtlModel.populate(saleContractDetail, {
    path: 'salesContract',
    model: SalesContractModel,
    populate: [
      {
        path: 'shipvia',
        model: ShipViaModel,
      },
      {
        path: 'brand',
        model: BrandModel,
      },
      {
        path: 'customer',
        model: CustomerModel,
      },
    ],
  });

  return {
    saleContractDetail,
  };
};

export const findNotInvoicedSalesContracts = async () => {
  const saleContract = await SalesContractModel.find({
    invoice: false,
    order_status: 'confirmed',
    royality_approval: true,
    isDeleted: false,
    // shipment: true
  })
    .populate({
      path: 'brand',
      model: BrandModel,
    })
    .populate({
      path: 'customer',
      model: CustomerModel,
    })
    .populate({ path: 'paymentTerm', model: PaymentTermModel });
  console.log(saleContract.length);

  return saleContract;
};
export const findSaleContractAdmdenim = async () => {
  const saleContract = await SalesContractModel.aggregate([
    {
      $match: {
        royality: false,
        isDeleted: false,
      },
    },

    {
      $lookup: {
        from: 'shipmentdtls',
        localField: '_id',
        foreignField: 'salesContract',
        as: 'shipmentdtl',
        pipeline: [
          {
            $project: {
              royaltyRate: 1,
            },
          },
        ],
      },
    },
    {
      $unwind: {
        path: '$shipmentdtl',
        preserveNullAndEmptyArrays: true,
      },
    },

    {
      $lookup: {
        from: 'customers',
        localField: 'customer',
        foreignField: '_id',
        as: 'customer',
      },
    },
    {
      $project: {
        contract: 1,
        shipmentdtl: 1,
        po: 1,
        contractDate: 1,
        tc_no: 1,
        poDate: 1,
        salesTaxInvoiceNo: 1,
        customer: { $first: '$customer._id' },
      },
    },
  ]);

  return saleContract;
};

export const findSalesContractsDtls = async (id: string) => {
  return await SalesContractDtlModel.find({
    salesContract: new mongoose.Types.ObjectId(id),
  })
    .populate({ path: 'product', model: ProductModel })
    .populate({ path: 'currency', model: CurrencyModel })
    .populate({
      path: 'customer',
      model: CustomerModel,
      populate: [
        { path: 'country', model: CountryModel },
        { path: 'city', model: CityModel },
        { path: 'state', model: StateModel },
      ],
    })
    .populate({ path: 'brand', model: BrandModel })
    .populate({ path: 'salesContract', model: SalesContractModel });
};

export const deleteSalesContracts = async () => {
  await SalesContractDtlModel.deleteMany({});
  return await SalesContractModel.deleteMany({});
};


export const deleteSalesContractById = async (
  id: string,
  input: Salecontractdrop_downSchema
) => {
  try {
    const salecontract = await SalesContractModel.find({ _id: id });

    if (salecontract.length > 0) {
      const salecontract_customer = salecontract[0].InHouse;

      if (salecontract_customer) {
        const royalty = await RoyalityModel.findOne({
          salesContract: id,
          isDeleted: false,
        });
        if (royalty) {
          if (input.deleteRoyalty) {
            await deleteRoyaltyById(royalty._id); // Call the function to delete royalty

            return await deleteSalesContractAndDetails(id);
          } else {
            let message =
              'Unable to delete Sales Contract: A related royalty exists.';
            return message;
          }
        } else {
          return await deleteSalesContractAndDetails(id);
        }
      } else {
        return await deleteSalesContractAndDetails(id);
      }
    } else {
      return { message: 'Sales contract not found.' };
    }
  } catch (error) {
    console.error(error);
    return { message: 'An error occurred while deleting the sales contract.' };
  }
};

const deleteRoyaltyById = async (royaltyId: string) => {
  try {
    await RoyalityModel.findByIdAndUpdate(royaltyId, { isDeleted: true });
  } catch (error) {
    console.error(`Error deleting royalty with ID ${royaltyId}:`, error);
    throw new Error('Error deleting related royalty.');
  }
};

const deleteSalesContractAndDetails = async (id: string) => {
  try {
    const salesContractDtls = await SalesContractDtlModel.find({
      salesContract: id,
    });
    if (salesContractDtls.length > 0) {
      for (const scd of salesContractDtls) {
        scd.isDeleted = true;
        await scd.save();
      }
    }

    const updatedContract = await SalesContractModel.findByIdAndUpdate(id, {
      isDeleted: true,
    });
    return updatedContract;
  } catch (error) {
    console.error(
      `Error deleting sales contract and details for ID ${id}:`,
      error
    );
    throw new Error('Error deleting sales contract details.');
  }
};


export const updateSalesContractById = async (
  id: string,
  input: CreateSalesContractSchema
) => {
  const {
    tran,
    po,
    contract,
    specialInstruction,
    customer,
    brand,
    paymentTerm,
    salesContractDtl,
    shipvia,
    poDate,
    contractDate,
    tc_no,
    vendorgarment,
    order_status,
    royality_approval,
  } = input;

  const customers = await CustomerModel.findById(customer);
  const filt = customers?.name;
  const ship_qty = await ShipmentDtlModel.aggregate([
    { $match: { salesContract: new mongoose.Types.ObjectId(id) } },
    { $group: { _id: null, totalQty: { $sum: '$qty' } } },
  ]);
  const inv_qty = await InvoiceDtlModel.aggregate([
    { $match: { salesContract: new mongoose.Types.ObjectId(id) } },
    { $group: { _id: null, totalQty: { $sum: '$qty' } } },
  ]);

  const royality = await SalesContractModel.findOne({ _id: id });
  if (filt == 'ADM Denim') {
    const salesContract = await SalesContractModel.findByIdAndUpdate(id, {
      tran,
      po,
      contract,
      specialInstruction,
      customer: new mongoose.Types.ObjectId(customer),
      brand: new mongoose.Types.ObjectId(brand),
      paymentTerm: new mongoose.Types.ObjectId(paymentTerm),
      shipvia: new mongoose.Types.ObjectId(shipvia),
      poDate,
      contractDate,
      InHouse: true,
      royality: royality?.royality,
      invoice: salesContractDtl[0]?.qty == inv_qty[0]?.totalQty,
      tc_no,
      shipment: salesContractDtl[0]?.qty == ship_qty[0]?.totalQty,
      vendorgarment,
      order_status,
      royality_approval,
    });

    await SalesContractDtlModel.deleteMany({ salesContract: id });

    for (const sale of salesContractDtl) {
      const newSalesDtl = await SalesContractDtlModel.create({
        tran: tran,
        qty: sale.qty,
        rate: sale.rate,
        amount: +sale.qty * +sale.rate,
        uom: sale.uom,
        product: new mongoose.Types.ObjectId(sale.product),
        currency: new mongoose.Types.ObjectId(sale.currency),
        salesContract: new mongoose.Types.ObjectId(salesContract?._id),
        contractDate: contractDate,
        brand: new mongoose.Types.ObjectId(brand),
        customer: new mongoose.Types.ObjectId(customer),
        exchangeRate: sale.exchangeRate,
        royality: salesContract?.royality,
        shipment: salesContractDtl[0]?.qty == ship_qty[0]?.totalQty,
        InHouse: true,
        invoice: salesContractDtl[0]?.qty == inv_qty[0]?.totalQty,
        order_status: order_status,
        royality_approval: royality_approval,
      });
    }
    return { success: true };
  } else {
    const royality = await SalesContractModel.findOne({ _id: id });

    const ship_qty = await ShipmentDtlModel.aggregate([
      { $match: { salesContract: new mongoose.Types.ObjectId(id) } },
      { $group: { _id: null, totalQty: { $sum: '$qty' } } },
    ]);
    const inv_qty = await InvoiceDtlModel.aggregate([
      { $match: { salesContract: new mongoose.Types.ObjectId(id) } },
      { $group: { _id: null, totalQty: { $sum: '$qty' } } },
    ]);

    console.log(salesContractDtl[0]?.qty, ship_qty);
    const salesContract = await SalesContractModel.findByIdAndUpdate(id, {
      tran,
      po,
      contract,
      specialInstruction,
      customer: new mongoose.Types.ObjectId(customer),
      brand: new mongoose.Types.ObjectId(brand),
      paymentTerm: new mongoose.Types.ObjectId(paymentTerm),
      shipvia: new mongoose.Types.ObjectId(shipvia),
      poDate,
      contractDate,
      royality_nonadm: royality?.royality_nonadm,
      tc_no,
      vendorgarment,
      InHouse: false,
      invoice: salesContractDtl[0]?.qty == inv_qty[0]?.totalQty,
      shipment: salesContractDtl[0]?.qty == ship_qty[0]?.totalQty,
      order_status,
      royality_approval,
    });

    await SalesContractDtlModel.deleteMany({ salesContract: id });

    for (const sale of salesContractDtl) {
      const newSalesDtl = await SalesContractDtlModel.create({
        tran: tran,
        qty: sale.qty,
        rate: sale.rate,
        amount: +sale.qty * +sale.rate,
        uom: sale.uom,
        product: new mongoose.Types.ObjectId(sale.product),
        currency: new mongoose.Types.ObjectId(sale.currency),
        salesContract: new mongoose.Types.ObjectId(salesContract?._id),
        contractDate: contractDate,
        brand: new mongoose.Types.ObjectId(brand),
        customer: new mongoose.Types.ObjectId(customer),
        exchangeRate: sale.exchangeRate,
        invoice: salesContractDtl[0]?.qty == inv_qty[0]?.totalQty,
        shipment: salesContractDtl[0]?.qty == ship_qty[0]?.totalQty,
        royality_nonadm: salesContract?.royality_nonadm,
        order_status: order_status,
        InHouse: false,
        royality_approval: royality_approval,
      });
    }
    return { success: true };
  }
};

export const findSalesContractsWithInvoice = async (id: string) => {
  const invoices = await InvoiceModel.find({
    salesContract: id,
    isDeleted: false,
  });

  const invoicesDtls: any[] = [];
  for (let inv of invoices) {
    const dtl = await InvoiceDtlModel.find({ invoice: inv._id });
    if (dtl) {
      for (let d of dtl) {
        invoicesDtls.push(d);
      }
    }
  }

  let salesDtl = await SalesContractDtlModel.find({
    salesContract: new mongoose.Types.ObjectId(id),
  })
    .populate({ path: 'product', model: ProductModel })
    .populate({ path: 'currency', model: CurrencyModel });

  if (salesDtl && invoicesDtls.length > 0) {
    salesDtl.forEach((sale, index) => {
      invoicesDtls.forEach((inv) => {
        if (inv.product.toString() == sale.product._id.toString()) {
          salesDtl[index].qty -= inv.qty;
        }
      });
    });
  }

  const res = salesDtl.filter((s) => s.qty > 0);
  return res;
};

export const findSalesContractsWithMoreQty = async () => {
  const sales = await SalesContractModel.find({ isDeleted: false })
    .populate({
      path: 'customer',
      model: CustomerModel,
    })
    .populate({ path: 'brand', model: BrandModel })
    .populate({ path: 'paymentTerm', model: PaymentTermModel });

  const res: any[] = [];

  for (let s of sales) {
    const dtls = await findSalesContractsWithInvoice(s._id);
    if (dtls.length > 0) res.push(s);
    console.log(s.id);
  }
  return res;
};

//=============================================================//

export const findSalesContractDtlsByDate_old = async (
  input: SaleContractReportSchema
) => {
  if (
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0 &&
    input.customer_group == '' &&
    input.product_group == '' &&
    input.brand_group == '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    input.order_status == '' &&
    input.royality_approval == ''
  ) {
    console.log('no filter condition execute');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

  
    const [allRecordGroupBy, saleContractDetail, totalRecords] = await Promise.all([
   
      SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $group: {
            _id: null,
            rate: { $sum: '$rate' },
            amount: { $sum: '$amount' },
            qty: { $sum: '$qty' },
          },
        },
      ]),
    
   
      SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
  
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { contractDate: -1 } },
      ]),
  
    
     
      SalesContractDtlModel.countDocuments({
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
      }),
    ]);
  

    const totalQty = allRecordGroupBy.length > 0 ? allRecordGroupBy[0].qty : 0;
    const totalRate = allRecordGroupBy.length > 0 ? allRecordGroupBy[0].rate : 0;
    const totalAmount = allRecordGroupBy.length > 0 ? allRecordGroupBy[0].amount : 0;
 
    let result = {
      salescontract_dtl: saleContractDetail,
      total_records: totalRecords,
      paginated_record: saleContractDetail.length,
      totalQty: [totalQty],
      totalRate: [totalRate],
      totalAmount: [totalAmount],
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.order_status == '' &&
    input.royality_approval == '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    console.log('customer general');
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    
    const customerAggregationPipelineRecords: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' }, // Retrieve customer name
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const customerAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' }, // Retrieve customer name
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const customer = await SalesContractDtlModel.aggregate(
      customerAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      customerAggregationPipelineRecords
    );
    const totalSaleContractsSum = total_records.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = total_records.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = total_records.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );

    const result = {
      customer_groupby: customer,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;

   
  } else if (
    input.product_group !== '' &&
    input.order_status == '' &&
    input.royality_approval == '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('product general');

    const productAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const productAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    

    //   {
    //     $match: {
    //       contractDate: {
    //         $gte: new Date(input.fromDate),
    //         $lte: new Date(input.toDate)
    //       },
    //       isDeleted: false,
    //     }
    //   },

    //   {
    //     $lookup: {
    //       from: 'products',
    //       localField: 'product',
    //       foreignField: '_id',
    //       as: 'productInfo'
    //     }
    //   },
    //   {
    //     $group: {
    //       _id: '$product',
    //       productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
    //       totalContracts: { $sum: 1 },
    //       totalQty: { $sum: '$qty' },
    //       totalAmount: { $sum: '$amount' }
    //     }
    //   },
    //   {
    //     $match: {
    //       totalQty: { $gt: 0 },
    //       totalAmount: { $gt: 0 }
    //     }
    //   },
    //   {
    //     $project: {
    //       productName: 1,
    //       totalContracts: 1,
    //       totalQty: 1,
    //       totalAmount: 1
    //     }
    //   },
    //   { $sort: { totalQty: -1, totalAmount: -1 } },
    //   { $skip: skipCount },
    //   { $limit: limit },
    // ]);
    const product = await SalesContractDtlModel.aggregate(
      productAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      productAggregationPipelineRecord
    );
    const totalSalecontract = total_records.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = total_records.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = total_records.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: product,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSalecontract,
    };
    return result;

    // const limit = input.perPage;
    // const skipCount = (input.pageno - 1) * limit;
    // console.log('product general');

    // const total_records = await ProductModel.countDocuments();

    // const product = await ProductModel.aggregate([
    //   {
    //     $lookup: {
    //       from: 'salescontractdtls',
    //       localField: '_id',
    //       foreignField: 'product',
    //       as: 'sales_dtl',
    //       pipeline: [
    //         {
    //           $project: {
    //             qty: 1,
    //             amount: 1
    //           },
    //         },
    //       ],
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalQty: {
    //         $sum: {
    //           $map: {
    //             input: '$sales_dtl',
    //             as: 'item',
    //             in: '$$item.qty',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalAmount: {
    //         $sum: {
    //           $map: {
    //             input: '$sales_dtl',
    //             as: 'item',
    //             in: '$$item.amount',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $match: {
    //       totalQty: { $gt: 0 },
    //       totalAmount: { $gt: 0 }
    //     },
    //   },
    //   {
    //     $project: {
    //       name: 1,
    //       totalQty: 1,
    //       totalAmount: 1,
    //       total_sales: {
    //         $size: '$sales_dtl',
    //       },
    //     },
    //   },
    //   // {
    //   //   $project: {
    //   //     name: 1,
    //   //     totalQty: 1,
    //   //     totalAmount: 1,
    //   //     // sales_dtl: {
    //   //     //   $size: '$sales_dtl',
    //   //     // },
    //   //     // salesContract: {
    //   //     //   $first: '$sales_dtl.salesContract',
    //   //     // },
    //   //   },
    //   // },
    //   // {
    //   //   $lookup: {
    //   //     from: 'salescontracts',
    //   //     localField: 'salesContract',
    //   //     foreignField: '_id',
    //   //     as: 'salecontracts',
    //   //   },
    //   // },
    //   // {
    //   //   $project: {
    //   //     sales_dtl: 1,
    //   //     totalQty: 1,
    //   //     totalAmount: 1,
    //   //     name: 1,
    //   //     total_sales: {
    //   //       $size: '$sales_dtl',
    //   //     },
    //   //     // saleContracts: {
    //   //     //   $first: '$salecontracts.contract',
    //   //     // },

    //   //   },
    //   // },
    //   { $sort: { totalQty: -1, totalAmount: -1 } },
    //   { $skip: skipCount },
    //   { $limit: limit },
    // ]);
    // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
    // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
    // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
    // const result = {
    //   product_groupby: product,
    //   total_records: total_records,
    //   totalQtySum: totalQtySum,
    //   totalAmountSum: totalAmountSum,
    //   totalSaleContractsSum: totalSalecontract
    // };
    // return result;
  } else if (
    input.brand_group !== '' &&
    input.order_status == '' &&
    input.royality_approval == '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    Array.isArray(input.brand) &&
    input.brand.length == 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0
  ) {
    console.log('brand general!');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
   
    const brandAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0, // Exclude _id field
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];
    const brandAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0, // Exclude _id field
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const brandgroup = await SalesContractDtlModel.aggregate(
      brandAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      brandAggregationPipelineRecord
    );

    const totalSaleContractsSum = total_records.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = total_records.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = total_records.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: brandgroup,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
    // const limit = input.perPage;
    // const skipCount = (input.pageno - 1) * limit;
    // const total_records = await BrandModel.countDocuments();
    // const brandgroup = await BrandModel.aggregate([
    //   {
    //     $lookup: {
    //       from: 'salescontractdtls',
    //       localField: '_id',
    //       foreignField: 'brand',
    //       as: 'salecontract',
    //       pipeline: [
    //         {
    //           $project: {
    //             qty: 1,
    //             amount: 1
    //           },
    //         },
    //       ],
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalQty: {
    //         $sum: {
    //           $map: {
    //             input: '$salecontract',
    //             as: 'item',
    //             in: '$$item.qty',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalAmount: {
    //         $sum: {
    //           $map: {
    //             input: '$salecontract',
    //             as: 'item',
    //             in: '$$item.amount',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $match: {
    //       totalQty: { $gt: 0 },
    //       totalAmount: { $gt: 0 },
    //     },
    //   },
    //   {
    //     $project: {
    //       name: 1,
    //       totalQty: 1,
    //       totalAmount: 1,
    //       salecontract: {
    //         $size: '$salecontract',
    //       },
    //     },
    //   },

    //   { $sort: { totalQty: -1, totalAmount: -1 } },
    //   { $skip: skipCount },
    //   { $limit: limit },
    // ]);
    // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
    // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
    // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
    // const result = {
    //   brand_groupby: brandgroup,
    //   total_records: total_records,
    //   totalQtySum: totalQtySum,
    //   totalAmountSum: totalAmountSum,
    //   totalSaleContractsSum: totalSaleContractsSum
    // };
    // return result;
  } else if (
    input.order_status !== '' &&
    input.royality_approval == '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    input.customer_group == '' &&
    input.product_group == '' &&
    input.brand_group == '' &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('order_status filter');

    const order_status = input.order_status;

    const allrecordgroupby = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
        },
      },
      {
        $group: {
          _id: 'null',
          rate: {
            $sum: '$rate',
          },
          amount: {
            $sum: '$amount',
          },
          qty: {
            $sum: '$qty',
          },
        },
      },
    ]);

    const totalQty = allrecordgroupby.map((item: any) => item.qty);
    const totalRate = allrecordgroupby.map((item: any) => item.rate);
    const totalAmount = allrecordgroupby.map((item: any) => item.amount);
    let where: any = {
      contractDate: {
        $gte: new Date(input.fromDate),
        $lte: new Date(input.toDate),
      },
      isDeleted: false,
      order_status: order_status,
    };
    const salesContract = await SalesContractDtlModel.find(where);

    const saleContractDetail = await SalesContractDtlModel.aggregate([
      {
        $match: where,
      },
      {
        $lookup: {
          from: 'salescontracts',
          localField: 'salesContract',
          foreignField: '_id',
          as: 'salecontract_dtl',
          pipeline: [
            {
              $lookup: {
                from: 'paymentterms',
                localField: 'paymentTerm',
                foreignField: '_id',
                as: 'payment_term',
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'branddtl',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customers',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product_dtl',
        },
      },

      {
        $lookup: {
          from: 'currencies',
          localField: 'currency',
          foreignField: '_id',
          as: 'currency_dtl',
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ]);

    let result = {
      salescontract_dtl: saleContractDetail,
      total_records: salesContract ? salesContract.length : 0,
      paginated_record: saleContractDetail.length,
      totalQty: totalQty,
      totalRate: totalRate,
      totalAmount: totalAmount,
    };
    return result;
  } else if (
    input.royality_approval !== '' &&
    input.order_status == '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    input.customer_group == '' &&
    input.product_group == '' &&
    input.brand_group == '' &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('royality_approval filter');

    function stringToBoolean(str: string | undefined) {
      return str?.toLowerCase() === 'true';
    }

    const royality_approval = stringToBoolean(input.royality_approval);

    const allrecordgroupby = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
        },
      },
      {
        $group: {
          _id: 'null',
          rate: {
            $sum: '$rate',
          },
          amount: {
            $sum: '$amount',
          },
          qty: {
            $sum: '$qty',
          },
        },
      },
    ]);

    const totalQty = allrecordgroupby.map((item: any) => item.qty);
    const totalRate = allrecordgroupby.map((item: any) => item.rate);
    const totalAmount = allrecordgroupby.map((item: any) => item.amount);
    let where: any = {
      contractDate: {
        $gte: new Date(input.fromDate),
        $lte: new Date(input.toDate),
      },
      isDeleted: false,
      royality_approval: royality_approval,
    };
    const salesContract = await SalesContractDtlModel.find(where);
    const saleContractDetail = await SalesContractDtlModel.aggregate([
      {
        $match: where,
      },
      {
        $lookup: {
          from: 'salescontracts',
          localField: 'salesContract',
          foreignField: '_id',
          as: 'salecontract_dtl',
          pipeline: [
            {
              $lookup: {
                from: 'paymentterms',
                localField: 'paymentTerm',
                foreignField: '_id',
                as: 'payment_term',
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'branddtl',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customers',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product_dtl',
        },
      },

      {
        $lookup: {
          from: 'currencies',
          localField: 'currency',
          foreignField: '_id',
          as: 'currency_dtl',
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ]);

    let result = {
      salescontract_dtl: saleContractDetail,
      total_records: salesContract ? salesContract.length : 0,
      paginated_record: saleContractDetail.length,
      totalQty: totalQty,
      totalRate: totalRate,
      totalAmount: totalAmount,
    };
    return result;

    
  } else if (
    input.customer_group == '' &&
    input.product_group == '' &&
    input.brand_group == '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    (input.order_status !== '' ||
      input.royality_approval !== '' ||
      (Array.isArray(input.product) && input.product.length !== 0) ||
      (Array.isArray(input.customer) && input.customer.length !== 0) ||
      (Array.isArray(input.brand) && input.brand.length !== 0))
  ) {
    console.log(' general filters brand customer product ');
    let where: any = {};
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

    const customerArr = input.customer
      ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const productArr = input.product
      ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const brandArr = input.brand
      ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];

    where = {};
    let filter: any = {};
    let filter_records: any = {};

    if (
      customerArr.length > 0 &&
      brandArr.length > 0 &&
      productArr.length > 0
    ) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0 && brandArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
    } else if (customerArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
    } else if (brandArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0) {
      where = {
        customer: { $in: customerArr },
      };
      filter = {
        customer: { $in: customerArr },
      };
      filter_records = {
        customer: { $in: customerArr },
      };
    } else if (brandArr.length > 0) {
      (where = {
        brand: { $in: brandArr },
      }),
        (filter = {
          brand: { $in: brandArr },
        });
      filter_records = {
        brand: { $in: brandArr },
      };
    } else if (productArr.length > 0) {
      where = {
        product: { $in: productArr },
      };
      filter = {
        product: { $in: productArr },
      };
      filter_records = {
        product: { $in: productArr },
      };
    }
    if (input.royality_approval !== '') {
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      where.royality_approval = royality_approval;
      (filter_records.royality_approval = royality_approval),
        (filter.royality_approval = royality_approval);
    }

    if (input.order_status !== '') {
      const order_status = input.order_status;

      where.order_status = order_status;
      (filter_records.order_status = order_status),
        (filter.order_status = order_status);
    }

    const total_record = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: filter_records,
      },
    ]);

    const productgroupby = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: filter,
      },
      {
        $group: {
          _id: 'null',
          rate: {
            $sum: '$rate',
          },
          amount: {
            $sum: '$amount',
          },
          qty: {
            $sum: '$qty',
          },
        },
      },
    ]);

    const totalQty = productgroupby.map((item: any) => item.qty);
    const totalRate = productgroupby.map((item: any) => item.rate);
    const totalAmount = productgroupby.map((item: any) => item.amount);

    const saleContractDetail = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          // royality_approval:royality_approve_filter
        },
      },
      {
        $match: where,
      },

      {
        $lookup: {
          from: 'salescontracts',
          localField: 'salesContract',
          foreignField: '_id',
          as: 'salecontract_dtl',
          pipeline: [
            {
              $lookup: {
                from: 'paymentterms',
                localField: 'paymentTerm',
                foreignField: '_id',
                as: 'payment_term',
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'branddtl',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customers',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product_dtl',
        },
      },
      {
        $lookup: {
          from: 'currencies',
          localField: 'currency',
          foreignField: '_id',
          as: 'currency_dtl',
        },
      },

      { $skip: skipCount },
      { $limit: limit },
      { $sort: { contractDate: -1 } },
    ]);

    const result = {
      salescontract_dtl: saleContractDetail,
      total_record: total_record.length,
      paginated_record: saleContractDetail.length,
      totalAmount: totalAmount,
      totalQty: totalQty,
      totalRate: totalRate,
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.customer) &&
    input.customer.length !== 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    console.log('customer group customer ');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    const customerArr = input.customer
      ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const customer = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: {
          isDeleted: false,
          customer: { $in: customerArr },
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' }, // Retrieve customer name
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ]);

    const totalSaleContractsSum = customer.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );

    const totalQtySum = customer.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = customer.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );

    const result = {
      customer_groupby: customer,
      total_records: customer.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.product_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.product) &&
    input.product.length !== 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('product to product group');

    const total_records = await ProductModel.countDocuments();
    const productArr = input.product
      ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
 
    //   {
    //     $lookup: {
    //       from: 'salescontractdtls',
    //       localField: '_id',
    //       foreignField: 'product',
    //       as: 'sales_dtl',
    //       pipeline: [
    //         {
    //           $project: {
    //             qty: 1,
    //             amount: 1
    //           },
    //         },
    //       ],
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalQty: {
    //         $sum: {
    //           $map: {
    //             input: '$sales_dtl',
    //             as: 'item',
    //             in: '$$item.qty',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalAmount: {
    //         $sum: {
    //           $map: {
    //             input: '$sales_dtl',
    //             as: 'item',
    //             in: '$$item.amount',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $match: {
    //       totalQty: { $gt: 0 },
    //       totalAmount: { $gt: 0 }
    //     },
    //   },
    //   {
    //     $project: {
    //       name: 1,
    //       totalQty: 1,
    //       totalAmount: 1,
    //       total_sales: {
    //         $size: '$sales_dtl',
    //       },
    //     },
    //   },

    //   { $skip: skipCount },
    //   { $limit: limit },
    //   { $sort: { totalQty: 1 } },
    //   { $sort: { totalAmount: 1 } },
    // ]);
    const product = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },

      {
        $match: {
          isDeleted: false,
          product: { $in: productArr },
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ]);

    const totalSalecontract = product.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = product.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: product,
      total_records: total_records,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSalecontract,
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.brand) &&
    input.brand.length !== 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0
  ) {
    console.log('customer group brand');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    const brandArr = input.brand
      ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const customer = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: {
          isDeleted: false,
          brand: { $in: brandArr },
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          brandName: { $first: '$brand_details.name' }, // Retrieve customer name
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        },
      },
      {
        $project: {
          customerName: 1,
          brandName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ]);

    const totalSaleContractsSum = customer.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = customer.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = customer.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );

    const result = {
      customer_groupby: customer,
      total_records: customer.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.product_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.brand) &&
    input.brand.length !== 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('product to brand');

    const total_records = await BrandModel.countDocuments();
    const brandArr = input.brand
      ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    
    //   {
    //     $lookup: {
    //       from: 'salescontractdtls',
    //       localField: '_id',
    //       foreignField: 'product',
    //       as: 'sales_dtl',
    //       pipeline: [
    //         {
    //           $project: {
    //             qty: 1,
    //             amount: 1
    //           },
    //         },
    //       ],
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalQty: {
    //         $sum: {
    //           $map: {
    //             input: '$sales_dtl',
    //             as: 'item',
    //             in: '$$item.qty',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $addFields: {
    //       totalAmount: {
    //         $sum: {
    //           $map: {
    //             input: '$sales_dtl',
    //             as: 'item',
    //             in: '$$item.amount',
    //           },
    //         },
    //       },
    //     },
    //   },
    //   {
    //     $match: {
    //       totalQty: { $gt: 0 },
    //       totalAmount: { $gt: 0 }
    //     },
    //   },
    //   {
    //     $project: {
    //       name: 1,
    //       totalQty: 1,
    //       totalAmount: 1,
    //       total_sales: {
    //         $size: '$sales_dtl',
    //       },
    //     },
    //   },

    //   { $skip: skipCount },
    //   { $limit: limit },
    //   { $sort: { totalQty: 1 } },
    //   { $sort: { totalAmount: 1 } },
    // ]);
    const product = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },

      {
        $match: {
          // isDeleted: false,
          brand: { $in: brandArr },
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brandInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          brandName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ]);

    const totalSalecontract = product.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = product.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: product,
      total_records: total_records,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSalecontract,
    };
    return result;
  } else if (
    input.brand_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.brand) &&
    input.brand.length !== 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length !== 0
  ) {
    console.log('brandgroup brand');
    const brandArr = input.brand
      ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    const total_records = await BrandModel.countDocuments();
 
    const brandgroup = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },

          isDeleted: false,
          brand: { $in: brandArr },
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id', // Group by brand's _id
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 }, // Calculate the total number of contracts
          totalQty: { $sum: '$qty' }, // Calculate the total quantity
          totalAmount: { $sum: '$amount' }, // Calculate the total amount
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0, // Exclude _id field
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ]);

    const totalSaleContractsSum = brandgroup.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = brandgroup.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = brandgroup.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: brandgroup,
      total_records: total_records,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.brand_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.customer) &&
    input.customer.length !== 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    console.log('brand to customer');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

    const customerArr = input.customer
      ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];

    const brandgroup = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          customer: { $in: customerArr },
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
        },
      },

      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },

      {
        $group: {
          _id: '$brand._id',
          brandName: {
            $first: '$brand.name',
          },
          customerName: { $first: '$customer.name' },
          totalcontracts: {
            $sum: 1,
          },
          totalQty: {
            $sum: '$qty',
          },
          totalAmount: {
            $sum: '$amount',
          },
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ]);

    const totalSaleContractsSum = brandgroup.reduce(
      (sum, item) => sum + item.totalcontracts,
      0
    );
    const totalQtySum = brandgroup.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = brandgroup.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: brandgroup,
      total_records: brandgroup.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.product_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.customer) &&
    input.customer.length !== 0 &&
    Array.isArray(input.product) &&
    input.product.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    console.log('product group customer');
    const customerArr = input.customer
      ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    const productdtl = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,

          customer: { $in: customerArr },
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'products',
        },
      },

      {
        $group: {
          _id: '$products._id',
          productName: {
            $first: '$products.name',
          },
          customerName: {
            $first: '$customer.name',
          },
          totalcontracts: {
            $sum: 1,
          },
          totalQty: {
            $sum: '$qty',
          },
          totalAmount: {
            $sum: '$amount',
          },
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ]);

    const totalSaleContractsSum = productdtl.reduce(
      (sum, item) => sum + item.totalcontracts,
      0
    );
    const totalQtySum = productdtl.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = productdtl.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: productdtl,
      total_records: productdtl.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.product) &&
    input.product.length !== 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    console.log(' customer to product');
    const productArr = input.product
      ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

    const customerdtl = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,

          product: { $in: productArr },
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
        },
      },
      {
        $group: {
          _id: '$customer._id',
          CustomerName: {
            $first: '$customer.name',
          },
          productName: {
            $first: '$product.name',
          },
          totalcontracts: {
            $sum: 1,
          },
          totalQty: {
            $sum: '$qty',
          },
          totalAmount: {
            $sum: '$amount',
          },
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ]);
    const totalSaleContractsSum = customerdtl.reduce(
      (sum, item) => sum + item.totalcontracts,
      0
    );
    const totalQtySum = customerdtl.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = customerdtl.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      customer_groupby: customerdtl,
      total_records: customerdtl.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.brand_group !== '' &&
    input.royality_approval == '' &&
    input.order_status == '' &&
    Array.isArray(input.product) &&
    input.product.length !== 0 &&
    Array.isArray(input.customer) &&
    input.customer.length == 0 &&
    Array.isArray(input.brand) &&
    input.brand.length == 0
  ) {
    console.log(' brand to product');

    const productArr = input.product
      ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

    const branddtl = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          product: { $in: productArr },
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'products',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $group: {
          _id: '$brand._id',
          productname: {
            $first: '$products.name',
          },
          brandname: {
            $first: '$brand.name',
          },
          totalContracts: {
            $sum: 1,
          },
          totalQty: {
            $sum: '$qty',
          },
          totalAmount: {
            $sum: '$amount',
          },
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ]);
    const totalSaleContractsSum = branddtl.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = branddtl.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = branddtl.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: branddtl,
      total_records: branddtl.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    ((Array.isArray(input.product) && input.product.length !== 0) ||
      (Array.isArray(input.customer) && input.customer.length !== 0) ||
      (Array.isArray(input.brand) && input.brand.length !== 0))
  ) {
    console.log('customergroup with general filters brand customer product');
    let where: any = {};
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

    const customerArr = input.customer
      ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const productArr = input.product
      ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const brandArr = input.brand
      ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];

    where = {};
    let filter: any = {};
    let filter_records: any = {};

    if (
      customerArr.length > 0 &&
      brandArr.length > 0 &&
      productArr.length > 0
    ) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0 && brandArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
    } else if (customerArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
    } else if (brandArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0) {
      where = {
        customer: { $in: customerArr },
      };
      filter = {
        customer: { $in: customerArr },
      };
      filter_records = {
        customer: { $in: customerArr },
      };
    } else if (brandArr.length > 0) {
      (where = {
        brand: { $in: brandArr },
      }),
        (filter = {
          brand: { $in: brandArr },
        });
      filter_records = {
        brand: { $in: brandArr },
      };
    } else if (productArr.length > 0) {
      where = {
        product: { $in: productArr },
      };
      filter = {
        product: { $in: productArr },
      };
      filter_records = {
        product: { $in: productArr },
      };
    }
    if (input.royality_approval !== '') {
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      where.royality_approval = royality_approval;
      (filter_records.royality_approval = royality_approval),
        (filter.royality_approval = royality_approval);
    }

    if (input.order_status !== '') {
      const order_status = input.order_status;

      where.order_status = order_status;
      (filter_records.order_status = order_status),
        (filter.order_status = order_status);
    }
    const customerAggregationPipelineRecords: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: where,
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand_details',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          brandName: { $first: '$brand_details.name' },
          productName: { $first: '$product_details.name' }, // Retrieve customer name
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        },
      },
      {
        $project: {
          customerName: 1,
          brandName: 1,
          productName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];
    const customerAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: where,
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand_details',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          brandName: { $first: '$brand_details.name' },
          productName: { $first: '$product_details.name' }, // Retrieve customer name
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        },
      },
      {
        $project: {
          customerName: 1,
          brandName: 1,
          productName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const customer = await SalesContractDtlModel.aggregate(
      customerAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      customerAggregationPipelineRecords
    );
    const totalSaleContractsSum = customer.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = customer.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = customer.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );

    const result = {
      customer_groupby: customer,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.product_group !== '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    ((Array.isArray(input.product) && input.product.length !== 0) ||
      (Array.isArray(input.customer) && input.customer.length !== 0) ||
      (Array.isArray(input.brand) && input.brand.length !== 0))
  ) {
    console.log(' product group with filters brand customer product');
    let where: any = {};
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

    const customerArr = input.customer
      ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const productArr = input.product
      ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const brandArr = input.brand
      ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];

    where = {};
    let filter: any = {};
    let filter_records: any = {};

    if (
      customerArr.length > 0 &&
      brandArr.length > 0 &&
      productArr.length > 0
    ) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0 && brandArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
    } else if (customerArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
    } else if (brandArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0) {
      where = {
        customer: { $in: customerArr },
      };
      filter = {
        customer: { $in: customerArr },
      };
      filter_records = {
        customer: { $in: customerArr },
      };
    } else if (brandArr.length > 0) {
      (where = {
        brand: { $in: brandArr },
      }),
        (filter = {
          brand: { $in: brandArr },
        });
      filter_records = {
        brand: { $in: brandArr },
      };
    } else if (productArr.length > 0) {
      where = {
        product: { $in: productArr },
      };
      filter = {
        product: { $in: productArr },
      };
      filter_records = {
        product: { $in: productArr },
      };
    }
    if (input.royality_approval !== '') {
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      where.royality_approval = royality_approval;
      (filter_records.royality_approval = royality_approval),
        (filter.royality_approval = royality_approval);
    }

    if (input.order_status !== '') {
      const order_status = input.order_status;

      where.order_status = order_status;
      (filter_records.order_status = order_status),
        (filter.order_status = order_status);
    }
    const productAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      { $match: filter_records },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customerInfo',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brandInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
          customerName: { $first: { $arrayElemAt: ['$customerInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          customerName: 1,
          brandName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const productAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      { $match: filter_records },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customerInfo',
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brandInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
          customerName: { $first: { $arrayElemAt: ['$customerInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          customerName: 1,
          brandName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $skip: skipCount },
      { $limit: limit },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];
    const product = await SalesContractDtlModel.aggregate(
      productAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      productAggregationPipelineRecord
    );
    const totalSalecontract = product.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = product.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: product,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSalecontract,
    };
    return result;
  } else if (
    input.brand_group !== '' &&
    input.Adm == '' &&
    input.nonAdm == '' &&
    ((Array.isArray(input.product) && input.product.length !== 0) ||
      (Array.isArray(input.customer) && input.customer.length !== 0) ||
      (Array.isArray(input.brand) && input.brand.length !== 0))
  ) {
    console.log(' brand group with filters brand customer product');
    let where: any = {};
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;

    const customerArr = input.customer
      ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const productArr = input.product
      ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];
    const brandArr = input.brand
      ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
      : [];

    where = {};
    let filter: any = {};
    let filter_records: any = {};

    if (
      customerArr.length > 0 &&
      brandArr.length > 0 &&
      productArr.length > 0
    ) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0 && brandArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        },
      ];
    } else if (customerArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        customer: { $in: customerArr },
      };
      filter_records.$and = [
        {
          customer: { $in: customerArr },
          product: { $in: productArr },
        },
      ];
    } else if (brandArr.length > 0 && productArr.length > 0) {
      where.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
      filter = {
        product: { $in: productArr },
        brand: { $in: brandArr },
      };
      filter_records.$and = [
        {
          brand: { $in: brandArr },
          product: { $in: productArr },
        },
      ];
    } else if (customerArr.length > 0) {
      where = {
        customer: { $in: customerArr },
      };
      filter = {
        customer: { $in: customerArr },
      };
      filter_records = {
        customer: { $in: customerArr },
      };
    } else if (brandArr.length > 0) {
      (where = {
        brand: { $in: brandArr },
      }),
        (filter = {
          brand: { $in: brandArr },
        });
      filter_records = {
        brand: { $in: brandArr },
      };
    } else if (productArr.length > 0) {
      where = {
        product: { $in: productArr },
      };
      filter = {
        product: { $in: productArr },
      };
      filter_records = {
        product: { $in: productArr },
      };
    }
    if (input.royality_approval !== '') {
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      where.royality_approval = royality_approval;
      (filter_records.royality_approval = royality_approval),
        (filter.royality_approval = royality_approval);
    }

    if (input.order_status !== '') {
      const order_status = input.order_status;

      where.order_status = order_status;
      (filter_records.order_status = order_status),
        (filter.order_status = order_status);
    }
    const brandAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: where,
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          customerName: { $first: '$customer.name' },
          ProductName: { $first: '$product.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          customerName: 1,
          ProductName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const brandAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $match: where,
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product',
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          customerName: { $first: '$customer.name' },
          productName: { $first: '$product.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          customerName: 1,
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const brandgroup = await SalesContractDtlModel.aggregate(
      brandAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      brandAggregationPipelineRecord
    );

    const totalSaleContractsSum = brandgroup.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = brandgroup.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = brandgroup.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: brandgroup,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.product_group !== '' &&
    input.order_status !== '' &&
    input.royality_approval !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('product group  royality_approval && order_status');
    function stringToBoolean(str: string | undefined) {
      return str?.toLowerCase() === 'true';
    }

    const royality_approval = stringToBoolean(input.royality_approval);
    const order_status = input.order_status;

    const productAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
          royality_approval: royality_approval,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const productAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
          royality_approval: royality_approval,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];

    const product = await SalesContractDtlModel.aggregate(
      productAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      productAggregationPipelineRecord
    );
    const totalSalecontract = product.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = product.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: product,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSalecontract,
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.order_status !== '' &&
    input.royality_approval !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    console.log('customer group royality_approval && order_status');
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    function stringToBoolean(str: string | undefined) {
      return str?.toLowerCase() === 'true';
    }

    const royality_approval = stringToBoolean(input.royality_approval);
    const order_status = input.order_status;

    const customerAggregationPipelineRecords: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 },
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const customerAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 },
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const customer = await SalesContractDtlModel.aggregate(
      customerAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      customerAggregationPipelineRecords
    );
    const totalSaleContractsSum = customer.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = customer.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = customer.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );

    const result = {
      customer_groupby: customer,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.brand_group !== '' &&
    input.order_status !== '' &&
    input.royality_approval !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    console.log('brand group royality_approval && order_status');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    function stringToBoolean(str: string | undefined) {
      return str?.toLowerCase() === 'true';
    }

    const royality_approval = stringToBoolean(input.royality_approval);
    const order_status = input.order_status;
    const brandAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];
    const brandAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const brandgroup = await SalesContractDtlModel.aggregate(
      brandAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      brandAggregationPipelineRecord
    );

    const totalSaleContractsSum = brandgroup.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = brandgroup.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = brandgroup.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: brandgroup,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.product_group !== '' &&
    input.order_status !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('order_status product group');
    const order_status = input.order_status;
    const productAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const productAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];

    const product = await SalesContractDtlModel.aggregate(
      productAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      productAggregationPipelineRecord
    );
    const totalSalecontract = product.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = product.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: product,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSalecontract,
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.order_status !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    console.log('customer group order_status');
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    const order_status = input.order_status;
    const customerAggregationPipelineRecords: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 },
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const customerAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 },
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const customer = await SalesContractDtlModel.aggregate(
      customerAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      customerAggregationPipelineRecords
    );
    const totalSaleContractsSum = customer.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = customer.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = customer.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );

    const result = {
      customer_groupby: customer,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.brand_group !== '' &&
    input.order_status !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    console.log('brand group order_status');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    const order_status = input.order_status;
    const brandAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];
    const brandAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          order_status: order_status,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const brandgroup = await SalesContractDtlModel.aggregate(
      brandAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      brandAggregationPipelineRecord
    );

    const totalSaleContractsSum = brandgroup.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = brandgroup.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = brandgroup.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: brandgroup,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.product_group !== '' &&
    input.royality_approval !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    console.log('product group  royality_approval');
    function stringToBoolean(str: string | undefined) {
      return str?.toLowerCase() === 'true';
    }

    const royality_approval = stringToBoolean(input.royality_approval);

    const productAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const productAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
        },
      },

      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'productInfo',
        },
      },
      {
        $group: {
          _id: '$product',
          productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          productName: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];

    const product = await SalesContractDtlModel.aggregate(
      productAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      productAggregationPipelineRecord
    );
    const totalSalecontract = product.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = product.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      product_groupby: product,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSalecontract,
    };
    return result;
  } else if (
    input.customer_group !== '' &&
    input.royality_approval !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    console.log('customer group royality_approval');
    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    function stringToBoolean(str: string | undefined) {
      return str?.toLowerCase() === 'true';
    }

    const royality_approval = stringToBoolean(input.royality_approval);
    const customerAggregationPipelineRecords: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 },
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0, // Exclude _id field
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];

    const customerAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer_details',
        },
      },
      {
        $addFields: {
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $group: {
          _id: '$customer', // Group by customer ID
          customerName: { $first: '$customer_details.name' },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
          totalContracts: { $sum: 1 },
        },
      },
      {
        $project: {
          customerName: 1,
          totalQty: 1,
          totalAmount: 1,
          totalContracts: 1,
          _id: 0,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const customer = await SalesContractDtlModel.aggregate(
      customerAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      customerAggregationPipelineRecords
    );
    const totalSaleContractsSum = customer.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = customer.reduce((sum, item) => sum + item.totalQty, 0);
    const totalAmountSum = customer.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );

    const result = {
      customer_groupby: customer,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (
    input.brand_group !== '' &&
    input.royality_approval !== '' &&
    input.nonAdm == '' &&
    input.Adm == ''
  ) {
    console.log('brand group royality_approval');

    const limit = input.perPage;
    const skipCount = (input.pageno - 1) * limit;
    function stringToBoolean(str: string | undefined) {
      return str?.toLowerCase() === 'true';
    }

    const royality_approval = stringToBoolean(input.royality_approval);
    const brandAggregationPipelineRecord: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
    ];
    const brandAggregationPipeline: any = [
      {
        $match: {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
        },
      },
      {
        $unwind: '$brand',
      },
      {
        $group: {
          _id: '$brand._id',
          name: { $first: '$brand.name' },
          totalContracts: { $sum: 1 },
          totalQty: { $sum: '$qty' },
          totalAmount: { $sum: '$amount' },
        },
      },
      {
        $match: {
          totalQty: { $gt: 0 },
          totalAmount: { $gt: 0 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          totalContracts: 1,
          totalQty: 1,
          totalAmount: 1,
        },
      },
      { $sort: { totalQty: -1, totalAmount: -1 } },
      { $skip: skipCount },
      { $limit: limit },
    ];
    const brandgroup = await SalesContractDtlModel.aggregate(
      brandAggregationPipeline
    );
    const total_records = await SalesContractDtlModel.aggregate(
      brandAggregationPipelineRecord
    );

    const totalSaleContractsSum = brandgroup.reduce(
      (sum, item) => sum + item.totalContracts,
      0
    );
    const totalQtySum = brandgroup.reduce(
      (sum, item) => sum + item.totalQty,
      0
    );
    const totalAmountSum = brandgroup.reduce(
      (sum, item) => sum + item.totalAmount,
      0
    );
    const result = {
      brand_groupby: brandgroup,
      total_records: total_records.length,
      totalQtySum: totalQtySum,
      totalAmountSum: totalAmountSum,
      totalSaleContractsSum: totalSaleContractsSum,
    };
    return result;
  } else if (input.nonAdm !== '') {
    console.log('nonadm');
    if (
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.order_status == '' &&
      input.royality_approval == ''
    ) {
      console.log('no filter condition execute');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        InHouse: false,
      };
      const salesContract = await SalesContractDtlModel.find(where);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { contractDate: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer general');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = total_records.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = total_records.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product general');

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = total_records.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = total_records.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;

      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // console.log('product general');

      // const total_records = await ProductModel.countDocuments();

      // const product = await ProductModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'product',
      //       as: 'sales_dtl',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       total_sales: {
      //         $size: '$sales_dtl',
      //       },
      //     },
      //   },
      //   // {
      //   //   $project: {
      //   //     name: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     // sales_dtl: {
      //   //     //   $size: '$sales_dtl',
      //   //     // },
      //   //     // salesContract: {
      //   //     //   $first: '$sales_dtl.salesContract',
      //   //     // },
      //   //   },
      //   // },
      //   // {
      //   //   $lookup: {
      //   //     from: 'salescontracts',
      //   //     localField: 'salesContract',
      //   //     foreignField: '_id',
      //   //     as: 'salecontracts',
      //   //   },
      //   // },
      //   // {
      //   //   $project: {
      //   //     sales_dtl: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     name: 1,
      //   //     total_sales: {
      //   //       $size: '$sales_dtl',
      //   //     },
      //   //     // saleContracts: {
      //   //     //   $first: '$salecontracts.contract',
      //   //     // },

      //   //   },
      //   // },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
      // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
      // const result = {
      //   product_groupby: product,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSalecontract
      // };
      // return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('brand general!');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0, // Exclude _id field
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0, // Exclude _id field
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = total_records.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = total_records.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.order_status !== '' &&
      input.royality_approval == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('order_status filter');

      const order_status = input.order_status;
      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            order_status: order_status,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        InHouse: false,
        order_status: order_status,
      };
      const salesContract = await SalesContractDtlModel.find(where);
      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;
    } else if (
      input.royality_approval !== '' &&
      input.order_status == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('royality_approval filter');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        InHouse: false,
        royality_approval: royality_approval,
      };
      const salesContract = await SalesContractDtlModel.find(where);
      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;

    } else if (
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      (input.order_status !== '' ||
        input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' general filters brand customer product ');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }

      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: filter_records,
        },
      ]);

      const productgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: filter,
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = productgroupby.map((item: any) => item.qty);
      const totalRate = productgroupby.map((item: any) => item.rate);
      const totalAmount = productgroupby.map((item: any) => item.amount);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            // royality_approval:royality_approve_filter
          },
        },
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },

        { $skip: skipCount },
        { $limit: limit },
        { $sort: { contractDate: -1 } },
      ]);

      const result = {
        salescontract_dtl: saleContractDetail,
        total_record: total_record.length,
        paginated_record: saleContractDetail.length,
        totalAmount: totalAmount,
        totalQty: totalQty,
        totalRate: totalRate,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group customer ');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customer = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );

      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: customer.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product to product group');

      const total_records = await ProductModel.countDocuments();
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const product = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },

        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('customer group brand');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customer = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: customer.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product to brand');

      const total_records = await BrandModel.countDocuments();
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const product = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },

        {
          $match: {
            // isDeleted: false,
            brand: { $in: brandArr },
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0
    ) {
      console.log('brandgroup brand');
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const total_records = await BrandModel.countDocuments();

      
      const brandgroup = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },

            isDeleted: false,
            InHouse: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id', // Group by brand's _id
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 }, // Calculate the total number of contracts
            totalQty: { $sum: '$qty' }, // Calculate the total quantity
            totalAmount: { $sum: '$amount' }, // Calculate the total amount
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0, // Exclude _id field
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandgroup = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },

        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },

        {
          $group: {
            _id: '$brand._id',
            brandName: {
              $first: '$brand.name',
            },
            customerName: { $first: '$customer.name' },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: brandgroup.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product group customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productdtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'products',
          },
        },

        {
          $group: {
            _id: '$products._id',
            productName: {
              $first: '$products.name',
            },
            customerName: {
              $first: '$customer.name',
            },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = productdtl.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = productdtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = productdtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: productdtl,
        total_records: productdtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to customer');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customerdtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $group: {
            _id: '$customer._id',
            CustomerName: {
              $first: '$customer.name',
            },
            productName: {
              $first: '$product.name',
            },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSaleContractsSum = customerdtl.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = customerdtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customerdtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        customer_groupby: customerdtl,
        total_records: customerdtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to brand');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const branddtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'products',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $group: {
            _id: '$brand._id',
            productname: {
              $first: '$products.name',
            },
            brandname: {
              $first: '$brand.name',
            },
            totalContracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSaleContractsSum = branddtl.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = branddtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = branddtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: branddtl,
        total_records: branddtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('group with general filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' product group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        { $match: filter_records },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customerInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            customerName: {
              $first: { $arrayElemAt: ['$customerInfo.name', 0] },
            },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        { $match: filter_records },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customerInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            customerName: {
              $first: { $arrayElemAt: ['$customerInfo.name', 0] },
            },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' brand group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            customerName: { $first: '$customer.name' },
            productName: { $first: '$product.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            customerName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            customerName: { $first: '$customer.name' },
            productName: { $first: '$product.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            customerName: 1,
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== ''
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product group  royality_approval && order_status');
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== ''
    ) {
      console.log('customer group royality_approval && order_status');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== ''
    ) {
      console.log('brand group royality_approval && order_status');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.product_group !== '' && input.order_status !== '') {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('order_status product group');
      const order_status = input.order_status;
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            order_status: order_status,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            order_status: order_status,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (input.customer_group !== '' && input.order_status !== '') {
      console.log('customer group order_status');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const order_status = input.order_status;
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.brand_group !== '' && input.order_status !== '') {
      console.log('brand group order_status');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const order_status = input.order_status;
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.product_group !== '' && input.royality_approval !== '') {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product group  royality_approval');
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (input.customer_group !== '' && input.royality_approval !== '') {
      console.log('customer group royality_approval huh');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.brand_group !== '' && input.royality_approval !== '') {
      console.log('brand group royality_approval');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    }
  } else if (input.Adm !== '') {
    console.log('adm');
    if (
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.order_status == '' &&
      input.royality_approval == ''
    ) {
      console.log('no filter condition execute');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        InHouse: true,
      };
      const salesContract = await SalesContractDtlModel.find(where);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { contractDate: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer general');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = total_records.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = total_records.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product general');

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = total_records.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = total_records.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;

      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // console.log('product general');

      // const total_records = await ProductModel.countDocuments();

      // const product = await ProductModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'product',
      //       as: 'sales_dtl',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       total_sales: {
      //         $size: '$sales_dtl',
      //       },
      //     },
      //   },
      //   // {
      //   //   $project: {
      //   //     name: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     // sales_dtl: {
      //   //     //   $size: '$sales_dtl',
      //   //     // },
      //   //     // salesContract: {
      //   //     //   $first: '$sales_dtl.salesContract',
      //   //     // },
      //   //   },
      //   // },
      //   // {
      //   //   $lookup: {
      //   //     from: 'salescontracts',
      //   //     localField: 'salesContract',
      //   //     foreignField: '_id',
      //   //     as: 'salecontracts',
      //   //   },
      //   // },
      //   // {
      //   //   $project: {
      //   //     sales_dtl: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     name: 1,
      //   //     total_sales: {
      //   //       $size: '$sales_dtl',
      //   //     },
      //   //     // saleContracts: {
      //   //     //   $first: '$salecontracts.contract',
      //   //     // },

      //   //   },
      //   // },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
      // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
      // const result = {
      //   product_groupby: product,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSalecontract
      // };
      // return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('brand general!');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0, // Exclude _id field
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0, // Exclude _id field
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = total_records.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = total_records.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.order_status !== '' &&
      input.royality_approval == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('order_status filter');

      const order_status = input.order_status;
      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            order_status: order_status,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        InHouse: true,
        order_status: order_status,
      };
      const salesContract = await SalesContractDtlModel.find(where);
      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;
    } else if (
      input.royality_approval !== '' &&
      input.order_status == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('royality_approval filter ');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        InHouse: true,
        royality_approval: royality_approval,
      };
      const salesContract = await SalesContractDtlModel.find(where);
      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;
    } else if (
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      (input.order_status !== '' ||
        input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' general filters brand customer product ');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }

      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: filter_records,
        },
      ]);

      const productgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: filter,
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = productgroupby.map((item: any) => item.qty);
      const totalRate = productgroupby.map((item: any) => item.rate);
      const totalAmount = productgroupby.map((item: any) => item.amount);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            // royality_approval:royality_approve_filter
          },
        },
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },

        { $skip: skipCount },
        { $limit: limit },
        { $sort: { contractDate: -1 } },
      ]);

      const result = {
        salescontract_dtl: saleContractDetail,
        total_record: total_record.length,
        paginated_record: saleContractDetail.length,
        totalAmount: totalAmount,
        totalQty: totalQty,
        totalRate: totalRate,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group customer ');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customer = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );

      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: customer.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product to product group');

      const total_records = await ProductModel.countDocuments();
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const product = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },

        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('customer group brand');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customer = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: customer.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product to brand');

      const total_records = await BrandModel.countDocuments();
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const product = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },

        {
          $match: {
            // isDeleted: false,
            brand: { $in: brandArr },
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0
    ) {
      console.log('brandgroup brand');
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const total_records = await BrandModel.countDocuments();

      const brandgroup = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },

            isDeleted: false,
            InHouse: true,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id', // Group by brand's _id
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 }, // Calculate the total number of contracts
            totalQty: { $sum: '$qty' }, // Calculate the total quantity
            totalAmount: { $sum: '$amount' }, // Calculate the total amount
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0, // Exclude _id field
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandgroup = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },

        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },

        {
          $group: {
            _id: '$brand._id',
            brandName: {
              $first: '$brand.name',
            },
            customerName: { $first: '$customer.name' },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: brandgroup.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product group customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productdtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'products',
          },
        },

        {
          $group: {
            _id: '$products._id',
            productName: {
              $first: '$products.name',
            },
            customerName: {
              $first: '$customer.name',
            },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = productdtl.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = productdtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = productdtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: productdtl,
        total_records: productdtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to customer');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customerdtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $group: {
            _id: '$customer._id',
            CustomerName: {
              $first: '$customer.name',
            },
            productName: {
              $first: '$product.name',
            },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSaleContractsSum = customerdtl.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = customerdtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customerdtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        customer_groupby: customerdtl,
        total_records: customerdtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to brand');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const branddtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'products',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $group: {
            _id: '$brand._id',
            productname: {
              $first: '$products.name',
            },
            brandname: {
              $first: '$brand.name',
            },
            totalContracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSaleContractsSum = branddtl.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = branddtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = branddtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: branddtl,
        total_records: branddtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('group with general filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' product group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        { $match: filter_records },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customerInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            customerName: {
              $first: { $arrayElemAt: ['$customerInfo.name', 0] },
            },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        { $match: filter_records },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customerInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            customerName: {
              $first: { $arrayElemAt: ['$customerInfo.name', 0] },
            },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' brand group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            customerName: { $first: '$customer.name' },
            productName: { $first: '$product.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            customerName: 1,
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            customerName: { $first: '$customer.name' },
            productName: { $first: '$product.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            customerName: 1,
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== ''
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product group  royality_approval && order_status');
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== ''
    ) {
      console.log('customer group royality_approval && order_status');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== ''
    ) {
      console.log('brand group royality_approval && order_status');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.product_group !== '' && input.order_status !== '') {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('order_status product group');
      const order_status = input.order_status;
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            order_status: order_status,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            order_status: order_status,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (input.customer_group !== '' && input.order_status !== '') {
      console.log('customer group order_status');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const order_status = input.order_status;
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.brand_group !== '' && input.order_status !== '') {
      console.log('brand group order_status');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const order_status = input.order_status;
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.product_group !== '' && input.royality_approval !== '') {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product group  royality_approval');
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (input.customer_group !== '' && input.royality_approval !== '') {
      console.log('customer group royality_approval');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.brand_group !== '' && input.royality_approval !== '') {
      console.log('brand group royality_approval');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            InHouse: true,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
        { $skip: skipCount },
        { $limit: limit },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    }
  }
};


export const findSalesContractDtlsByDate = async (input: SaleContractReportSchema )=> {
const {
      brand,
      customer,
      product,
      fromDate,
      toDate,
      pageno = 1,
      perPage = 10,
      order_status,
      royality_approval,
      isDeleted,
      Adm,
      nonAdm,
      brand_group,
      customer_group,
      product_group,
    } = input;

    // pagination contants
    const limit = perPage;
    const skipCount = (pageno - 1) * limit;

 //  Group condition setter
    const groupId: any = {};
    const shouldGroup = product_group || brand_group || customer_group;

     if (product_group) groupId.product = '$product';
    if (brand_group) groupId.brand = '$brand';
    if (customer_group) groupId.customer = '$customer';

    
    const matchStage : any = { isDeleted: false};
    if (fromDate && toDate) {
      matchStage.contractDate = {
        $gte: new Date(fromDate),
        $lte: new Date(toDate),
      };
    }


  if (Array.isArray(product) && product.length > 0) {
    matchStage.product = {
    $in: product.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(brand) && brand.length > 0) {
    matchStage.brand ={
    $in: brand.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(customer) && customer.length > 0) {
    matchStage.customer = {
    $in: customer.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Adm) matchStage['InHouse'] = true;
if (nonAdm) matchStage['InHouse'] = false;
     
  const scMatchStage: any = {};
   if (royality_approval == 'true')
        scMatchStage['royality_approval'] = true;
      if (royality_approval == 'false')
        scMatchStage['royality_approval'] = false;

      // const scMatchStage2: any = { isDeleted: false };
      if (order_status == 'confirmed')
        scMatchStage['order_status'] = 'confirmed';
      if (order_status == 'forecast')
        scMatchStage['order_status'] = 'forecast';

      if (isDeleted && isDeleted.toString().toLowerCase() === "true") {

  matchStage.isDeleted = true;
}

  const basePipeline:any[] = [
  {
   $match: matchStage
  },
  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContract",
      pipeline: [
        {
          $lookup: {
            from: "paymentterms",
            localField: "paymentTerm",
            foreignField: "_id",
            as: "paymentTerm"
          }
        }
      ]
    }
  },
  {
    $unwind: {
      path: "$salesContract",
      preserveNullAndEmptyArrays: false
    }
  },
      {
      $match: scMatchStage,
        },
  {
    $unwind: {
      path: "$salesContract.paymentTerm",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
        from: "currencies",
        localField: "currency",
        foreignField: "_id",
        as: "currency"
    }
  },
  {
    $unwind: {
      path: "$currency",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $project: {
        contract: "$salesContract.contract",
        po: "$salesContract.po",
        poDate: "$salesContract.poDate",
        contractDate: "$contractDate",
        customer: "$customers.name",
        product: "$products.name",
        brand: "$brands.name",
        currency: "$currency.name",
        rate: "$rate",
        qty: "$qty",
        amount: "$amount",
        uom: "$uom",
        paymentTerm:
          "$salesContract.paymentTerm.name",
        orderStatus: "$order_status"
    }
  },
  {
    $sort: { contractDate: -1 }
  }
 
]

  const basePipelineSummary:any[] = [
  {
   $match: matchStage
  },
  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContract",
      pipeline: [
        {
          $lookup: {
            from: "paymentterms",
            localField: "paymentTerm",
            foreignField: "_id",
            as: "paymentTerm"
          }
        }
      ]
    }
  },
  {
    $unwind: {
      path: "$salesContract",
      preserveNullAndEmptyArrays: false
    }
  },
      {
      $match: scMatchStage,
        },
  {
    $unwind: {
      path: "$salesContract.paymentTerm",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currency"
    }
  },
  {
    $unwind: {
      path: "$currency",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $project: {
      contract: "$salesContract.contract",
      po: "$salesContract.po",
      poDate: "$salesContract.poDate",
      contractDate: "$contractDate",
      customer: "$customers.name",
      product: "$products.name",
      brand: "$brands.name",
      currency: "$currency.name",
      rate: "$rate",
      qty: "$qty",
      amount: "$amount",
      uom: "$uom",
      paymentTerm:
        "$salesContract.paymentTerm.name",
      orderStatus: "$order_status"
    }
  },
  {
    $sort: { contractDate: -1 }
  }
 
]
const sortStage = { $sort: { totalSalescontractQty: -1 } };

const groupStage = {
  $group: {
  _id: groupId,
  product: { $first: '$product' }, 
  brand: { $first: '$brand' }, 
  customer: { $first: '$customer' },
  totalSalescontract: { $sum: 1 },
  totalSalescontractQty:{$sum:"$qty"},
   totalSalescontractAmount:{$sum:"$amount"},
   totalSalescontractRate:{$sum:"$rate"}
  
}
}
const groupStageSummary = {
   $group: {
  _id: '',
  // product: { $first: '$product' }, 
  // brand: { $first: '$brand' }, 
  // customer: { $first: '$customer' },
  totalSalescontract: { $sum: 1 },
  totalSalescontractQty:{$sum:"$qty"},
   totalSalescontractAmount:{$sum:"$amount"},
   totalSalescontractRate:{$sum:"$rate"}
  
}
}

 // If grouping is not required, we can skip the group stage
      const dataPipeline = shouldGroup
        ? [...basePipeline, groupStage, sortStage, { $skip: skipCount }, { $limit: limit }]
        : [...basePipeline, { $skip: skipCount }, { $limit: limit }]

      // Count pipeline for total records
      const countPipeline = shouldGroup
        ? [...basePipeline, groupStage, { $count: 'totalRecords' }]
        : [...basePipeline, { $count: 'totalRecords' }];


const summaryPipeline = shouldGroup
        ? [...basePipelineSummary, groupStageSummary]
        : [
          ...basePipelineSummary,
          {
            $group: {
              _id: null,
              totalSalescontractQty: {
                $sum: "$qty"
              },
              totalSalescontractAmount: {
                $sum: "$amount"
              },
              totalSalescontract:{
                $sum:1
              },
              totalSalescontractRate: {
                $sum: "$rate"
              },
            
            },
          },
        ];
  // Executing the pipelines in parallel
      const [salesdtl, totalResult, summaryResult] = await Promise.all([
        SalesContractDtlModel.aggregate(dataPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(countPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(summaryPipeline, { allowDiskUse: true }),
      ]);

 const totalRecords = totalResult?.[0]?.totalRecords || 0;
      const summary = summaryResult?.[0] || {
        totalSalescontractQty: 0, 
        totalSalescontractAmount: 0,
        totalSalescontract: 0,
        totalSalescontractRate: 0,
      };
      return {
        salesdtl,
        summary,
        pagination: {
          page: pageno,
          perPage,
          totalRecords,
          totalPages: Math.ceil(totalRecords / perPage),
        },
      };

  }

//---------------------------------------------------------//

export const findSalesContractDtlsByDatePrint_old = async (
  input: SaleContractReportPrintSchema
) => {
  try {
    if (
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      input.order_status == ''
    ) {
      console.log('no filter condition execute  print ');

      const [allRecordGroupBy, saleContractDetail, totalRecords] =
        await Promise.all([
          SalesContractDtlModel.aggregate([
            {
              $match: {
                contractDate: {
                  $gte: new Date(input.fromDate),
                  $lte: new Date(input.toDate),
                },
                isDeleted: false,
              },
            },
            {
              $group: {
                _id: null,
                rate: { $sum: '$rate' },
                amount: { $sum: '$amount' },
                qty: { $sum: '$qty' },
              },
            },
          ]),

          SalesContractDtlModel.aggregate([
            {
              $match: {
                contractDate: {
                  $gte: new Date(input.fromDate),
                  $lte: new Date(input.toDate),
                },
                isDeleted: false,
              },
            },
            {
              $lookup: {
                from: 'salescontracts',
                localField: 'salesContract',
                foreignField: '_id',
                as: 'salecontract_dtl',
                pipeline: [
                  {
                    $lookup: {
                      from: 'paymentterms',
                      localField: 'paymentTerm',
                      foreignField: '_id',
                      as: 'payment_term',
                    },
                  },
                ],
              },
            },
            {
              $lookup: {
                from: 'brands',
                localField: 'brand',
                foreignField: '_id',
                as: 'branddtl',
              },
            },
            {
              $lookup: {
                from: 'customers',
                localField: 'customer',
                foreignField: '_id',
                as: 'customers',
              },
            },
            {
              $lookup: {
                from: 'products',
                localField: 'product',
                foreignField: '_id',
                as: 'product_dtl',
              },
            },
            {
              $lookup: {
                from: 'currencies',
                localField: 'currency',
                foreignField: '_id',
                as: 'currency_dtl',
              },
            },
            {
              $unwind: {
                path: '$salecontract_dtl',
                preserveNullAndEmptyArrays: true,
              },
            },
            {
              $unwind: {
                path: '$salecontract_dtl.payment_term',
                preserveNullAndEmptyArrays: true,
              },
            },
            {
              $unwind: {
                path: '$branddtl',
                preserveNullAndEmptyArrays: true,
              },
            },
            {
              $unwind: {
                path: '$customers',
                preserveNullAndEmptyArrays: true,
              },
            },
            {
              $unwind: {
                path: '$product_dtl',
                preserveNullAndEmptyArrays: true,
              },
            },
            {
              $unwind: {
                path: '$currency_dtl',
                preserveNullAndEmptyArrays: true,
              },
            },
            {
              $project: {
                contractDate: 1,
                qty: 1,
                rate: 1,
                amount: 1,
                order_status: 1,
                uom: 1,
                tran: '$salecontract_dtl.tran',
                contract: '$salecontract_dtl.contract',
                po: '$salecontract_dtl.po',
                poDate: '$salecontract_dtl.poDate',
                customer: '$customers.name',
                product: '$product_dtl.name',
                brand: '$branddtl.name',
                currency: '$currency_dtl.name',
                paymentTerm: '$salecontract_dtl.payment_term.name',
              },
            },
            { $sort: { contractDate: -1 } },
          ]),

          // Get total records for pagination
          SalesContractDtlModel.countDocuments({
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          }),
        ]);

      // Extract totals from the aggregation result
      const totalQty = allRecordGroupBy[0]?.qty || 0;
      const totalRate = allRecordGroupBy[0]?.rate || 0;
      const totalAmount = allRecordGroupBy[0]?.amount || 0;

  
      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: totalRecords,
        paginated_record: saleContractDetail.length,
        totalQty: [totalQty],
        totalRate: [totalRate],
        totalAmount: [totalAmount],
      };

      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group general');

      const total_records = await CustomerModel.countDocuments();

      const customer = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product general');

      const total_records = await ProductModel.countDocuments();

      const product = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('brand general!');
      const total_records = await BrandModel.countDocuments();

      const brandgroup = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.order_status !== '' &&
      input.royality_approval == '' &&
      input.nonAdm == '' &&
      input.Adm == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('order_status filter');

      const order_status = input.order_status;
      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        order_status: order_status,
      };
      const salesContract = await SalesContractDtlModel.find(where);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;

      // else{
      //   const allrecordgroupby = await SalesContractDtlModel.aggregate([
      //     {
      //       $match: {
      //         contractDate: {
      //           $gte: new Date(input.fromDate),
      //           $lte: new Date(input.toDate),
      //         },
      //         isDeleted: false,
      //         order_status: 'forecast'

      //       },
      //     },
      //     {
      //       $group: {
      //         _id: 'null',
      //         rate: {
      //           $sum: '$rate',
      //         },
      //         amount: {
      //           $sum: '$amount',
      //         },
      //         qty: {
      //           $sum: '$qty',
      //         },
      //       },
      //     },
      //   ]);

      //   const totalQty = allrecordgroupby.map((item: any) => item.qty);
      //   const totalRate = allrecordgroupby.map((item: any) => item.rate);
      //   const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      //   let where: any = {
      //     contractDate: {
      //       $gte: new Date(input.fromDate),
      //       $lte: new Date(input.toDate),
      //     },
      //     isDeleted: false,
      //       order_status: 'forecast'

      //   };
      //   const salesContract = await SalesContractDtlModel.find(where);
      //   const saleContractDetail = await SalesContractDtlModel.aggregate([
      //     {
      //       $match: where,
      //     },
      //     {
      //       $lookup: {
      //         from: 'salescontracts',
      //         localField: 'salesContract',
      //         foreignField: '_id',
      //         as: 'salecontract_dtl',
      //         pipeline: [
      //           {
      //             $lookup: {
      //               from: 'paymentterms',
      //               localField: 'paymentTerm',
      //               foreignField: '_id',
      //               as: 'payment_term',
      //             },
      //           },
      //         ],
      //       },
      //     },
      //     {
      //       $lookup: {
      //         from: 'brands',
      //         localField: 'brand',
      //         foreignField: '_id',
      //         as: 'branddtl',
      //       },
      //     },
      //     {
      //       $lookup: {
      //         from: 'customers',
      //         localField: 'customer',
      //         foreignField: '_id',
      //         as: 'customers',
      //       },
      //     },
      //     {
      //       $lookup: {
      //         from: 'products',
      //         localField: 'product',
      //         foreignField: '_id',
      //         as: 'product_dtl',
      //       },
      //     },

      //     {
      //       $lookup: {
      //         from: 'currencies',
      //         localField: 'currency',
      //         foreignField: '_id',
      //         as: 'currency_dtl',
      //       },
      //     },
      //     { $skip: skipCount },
      //     { $limit: limit },
      //     { $sort: { totalQty: -1, totalAmount: -1 } },
      //   ]);

      //   let result = {
      //     salescontract_dtl: saleContractDetail,
      //     total_records: salesContract ? salesContract.length : 0,
      //     paginated_record: saleContractDetail.length,
      //     totalQty: totalQty,
      //     totalRate: totalRate,
      //     totalAmount: totalAmount,
      //   };
      //   return result;
      // }
    } else if (
      input.royality_approval !== '' &&
      input.order_status == '' &&
      input.nonAdm == '' &&
      input.Adm == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('royality_approval filter');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      const allrecordgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            royality_approval: royality_approval,
          },
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        royality_approval: royality_approval,
      };
      const salesContract = await SalesContractDtlModel.find(where);
      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },

        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: salesContract ? salesContract.length : 0,
        paginated_record: saleContractDetail.length,
        totalQty: totalQty,
        totalRate: totalRate,
        totalAmount: totalAmount,
      };
      return result;

      // else{
      //   const allrecordgroupby = await SalesContractDtlModel.aggregate([
      //     {
      //       $match: {
      //         contractDate: {
      //           $gte: new Date(input.fromDate),
      //           $lte: new Date(input.toDate),
      //         },
      //         isDeleted: false,
      //         order_status: 'forecast'

      //       },
      //     },
      //     {
      //       $group: {
      //         _id: 'null',
      //         rate: {
      //           $sum: '$rate',
      //         },
      //         amount: {
      //           $sum: '$amount',
      //         },
      //         qty: {
      //           $sum: '$qty',
      //         },
      //       },
      //     },
      //   ]);

      //   const totalQty = allrecordgroupby.map((item: any) => item.qty);
      //   const totalRate = allrecordgroupby.map((item: any) => item.rate);
      //   const totalAmount = allrecordgroupby.map((item: any) => item.amount);
      //   let where: any = {
      //     contractDate: {
      //       $gte: new Date(input.fromDate),
      //       $lte: new Date(input.toDate),
      //     },
      //     isDeleted: false,
      //       order_status: 'forecast'

      //   };
      //   const salesContract = await SalesContractDtlModel.find(where);
      //   const saleContractDetail = await SalesContractDtlModel.aggregate([
      //     {
      //       $match: where,
      //     },
      //     {
      //       $lookup: {
      //         from: 'salescontracts',
      //         localField: 'salesContract',
      //         foreignField: '_id',
      //         as: 'salecontract_dtl',
      //         pipeline: [
      //           {
      //             $lookup: {
      //               from: 'paymentterms',
      //               localField: 'paymentTerm',
      //               foreignField: '_id',
      //               as: 'payment_term',
      //             },
      //           },
      //         ],
      //       },
      //     },
      //     {
      //       $lookup: {
      //         from: 'brands',
      //         localField: 'brand',
      //         foreignField: '_id',
      //         as: 'branddtl',
      //       },
      //     },
      //     {
      //       $lookup: {
      //         from: 'customers',
      //         localField: 'customer',
      //         foreignField: '_id',
      //         as: 'customers',
      //       },
      //     },
      //     {
      //       $lookup: {
      //         from: 'products',
      //         localField: 'product',
      //         foreignField: '_id',
      //         as: 'product_dtl',
      //       },
      //     },

      //     {
      //       $lookup: {
      //         from: 'currencies',
      //         localField: 'currency',
      //         foreignField: '_id',
      //         as: 'currency_dtl',
      //       },
      //     },
      //     { $skip: skipCount },
      //     { $limit: limit },
      //     { $sort: { totalQty: -1, totalAmount: -1 } },
      //   ]);

      //   let result = {
      //     salescontract_dtl: saleContractDetail,
      //     total_records: salesContract ? salesContract.length : 0,
      //     paginated_record: saleContractDetail.length,
      //     totalQty: totalQty,
      //     totalRate: totalRate,
      //     totalAmount: totalAmount,
      //   };
      //   return result;
      // }
    } else if (
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.order_status !== '' ||
        input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('general filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }

      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: filter_records,
        },
      ]);

      const productgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: filter,
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);
      console.log(productgroupby, 'records');
      const totalQty = productgroupby.map((item: any) => item.qty);
      const totalRate = productgroupby.map((item: any) => item.rate);
      const totalAmount = productgroupby.map((item: any) => item.amount);

      // console.log("totalamount" , totalAmount)
      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },

        { $sort: { contractDate: -1 } },
      ]);

      const result = {
        salescontract_dtl: saleContractDetail,
        total_record: total_record.length,
        paginated_record: saleContractDetail.length,
        totalAmount: totalAmount,
        totalQty: totalQty,
        totalRate: totalRate,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group customer ');

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customer = await SalesContractDtlModel.aggregate([
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );

      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: customer.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('productgroup product');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const total_records = await ProductModel.countDocuments();

      const product = await ProductModel.aggregate([
        {
          $match: {
            _id: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'salescontractdtls',
            localField: '_id',
            foreignField: 'product',
            as: 'sales_dtl',
            pipeline: [
              {
                $project: {
                  qty: 1,
                  amount: 1,
                },
              },
            ],
          },
        },
        {
          $addFields: {
            totalQty: {
              $sum: {
                $map: {
                  input: '$sales_dtl',
                  as: 'item',
                  in: '$$item.qty',
                },
              },
            },
          },
        },
        {
          $addFields: {
            totalAmount: {
              $sum: {
                $map: {
                  input: '$sales_dtl',
                  as: 'item',
                  in: '$$item.amount',
                },
              },
            },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            name: 1,
            totalQty: 1,
            totalAmount: 1,
            total_sales: {
              $size: '$sales_dtl',
            },
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.total_sales,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('customer group brand ');

      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customer = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: customer.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('brandgroup brand');
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const total_records = await BrandModel.countDocuments();
      const brandgroup = await BrandModel.aggregate([
        {
          $match: {
            _id: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'salescontractdtls',
            localField: '_id',
            foreignField: 'brand',
            as: 'salecontract',
            pipeline: [
              {
                $project: {
                  qty: 1,
                  amount: 1,
                },
              },
            ],
          },
        },
        {
          $addFields: {
            totalQty: {
              $sum: {
                $map: {
                  input: '$salecontract',
                  as: 'item',
                  in: '$$item.qty',
                },
              },
            },
          },
        },
        {
          $addFields: {
            totalAmount: {
              $sum: {
                $map: {
                  input: '$salecontract',
                  as: 'item',
                  in: '$$item.amount',
                },
              },
            },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            name: 1,
            totalQty: 1,
            totalAmount: 1,
            salecontract: {
              $size: '$salecontract',
            },
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.salecontract,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandgroup = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },

        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },

        {
          $group: {
            _id: '$brand._id',
            brandName: {
              $first: '$brand.name',
            },
            customerName: { $first: '$customer.name' },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: brandgroup.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product group customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productdtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,

            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'products',
          },
        },

        {
          $group: {
            _id: '$products._id',
            productName: {
              $first: '$products.name',
            },
            customerName: {
              $first: '$customer.name',
            },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSaleContractsSum = productdtl.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = productdtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = productdtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: productdtl,
        total_records: productdtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('product to brand');

      const total_records = await BrandModel.countDocuments();
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'product',
      //       as: 'sales_dtl',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       total_sales: {
      //         $size: '$sales_dtl',
      //       },
      //     },
      //   },

      //   { $skip: skipCount },
      //   { $limit: limit },
      //   { $sort: { totalQty: 1 } },
      //   { $sort: { totalAmount: 1 } },
      // ]);
      const product = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },

        {
          $match: {
            // isDeleted: false,
            brand: { $in: brandArr },
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to customer print');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customerdtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,

            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $group: {
            _id: '$customer._id',
            CustomerName: {
              $first: '$customer.name',
            },
            productName: {
              $first: '$product.name',
            },
            totalcontracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);
      const totalSaleContractsSum = customerdtl.reduce(
        (sum, item) => sum + item.totalcontracts,
        0
      );
      const totalQtySum = customerdtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customerdtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        customer_groupby: customerdtl,
        total_records: customerdtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to brand');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const branddtl = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'products',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $group: {
            _id: '$brand._id',
            productname: {
              $first: '$products.name',
            },
            brandname: {
              $first: '$brand.name',
            },
            totalContracts: {
              $sum: 1,
            },
            totalQty: {
              $sum: '$qty',
            },
            totalAmount: {
              $sum: '$amount',
            },
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ]);

      const totalSaleContractsSum = branddtl.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = branddtl.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = branddtl.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: branddtl,
        total_records: branddtl.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' product group with filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        { $match: filter_records },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customerInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            customerName: {
              $first: { $arrayElemAt: ['$customerInfo.name', 0] },
            },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        { $match: filter_records },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customerInfo',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brandInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
            customerName: {
              $first: { $arrayElemAt: ['$customerInfo.name', 0] },
            },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },

        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' brand group with filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            customerName: { $first: '$customer.name' },
            productName: { $first: '$product.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            customerName: 1,
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            customerName: { $first: '$customer.name' },
            productName: { $first: '$product.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            customerName: 1,
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      ((Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('group with general filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Retrieve customer name
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('product group  royality_approval && order_status');
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('customer group royality_approval && order_status');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status !== '' &&
      input.royality_approval !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('brand group royality_approval && order_status');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const order_status = input.order_status;
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('order_status product group');
      const order_status = input.order_status;
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('customer group order_status');

      const order_status = input.order_status;
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('brand group order_status');

      const order_status = input.order_status;
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            order_status: order_status,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('product group  royality_approval');
      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            royality_approval: royality_approval,
          },
        },

        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'productInfo',
          },
        },
        {
          $group: {
            _id: '$product',
            productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            productName: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = product.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      const totalAmountSum = product.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSalecontract,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('customer group royality_approval');

      function stringToBoolean(str: any | undefined) {
        return str.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0, // Exclude _id field
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $addFields: {
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $group: {
            _id: '$customer', // Group by customer ID
            customerName: { $first: '$customer_details.name' },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $project: {
            customerName: 1,
            totalQty: 1,
            totalAmount: 1,
            totalContracts: 1,
            _id: 0,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = customer.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = customer.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = customer.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval !== '' &&
      input.nonAdm == '' &&
      input.Adm == ''
    ) {
      console.log('brand group royality_approval');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            royality_approval: royality_approval,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand',
          },
        },
        {
          $unwind: '$brand',
        },
        {
          $group: {
            _id: '$brand._id',
            name: { $first: '$brand.name' },
            totalContracts: { $sum: 1 },
            totalQty: { $sum: '$qty' },
            totalAmount: { $sum: '$amount' },
          },
        },
        {
          $match: {
            totalQty: { $gt: 0 },
            totalAmount: { $gt: 0 },
          },
        },
        {
          $project: {
            _id: 0,
            name: 1,
            totalContracts: 1,
            totalQty: 1,
            totalAmount: 1,
          },
        },
        { $sort: { totalQty: -1, totalAmount: -1 } },
      ];
      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const totalQtySum = brandgroup.reduce(
        (sum, item) => sum + item.totalQty,
        0
      );
      const totalAmountSum = brandgroup.reduce(
        (sum, item) => sum + item.totalAmount,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalQtySum: totalQtySum,
        totalAmountSum: totalAmountSum,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (input.nonAdm !== '') {
      console.log('nonadm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.order_status == '' &&
        input.royality_approval == ''
      ) {
        console.log('no filter condition execute');

        const allrecordgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: false,
        };
        const salesContract = await SalesContractDtlModel.find(where);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },

          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },

          { $sort: { contractDate: -1 } },
        ]);

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: salesContract ? salesContract.length : 0,
          paginated_record: saleContractDetail.length,
          totalQty: totalQty,
          totalRate: totalRate,
          totalAmount: totalAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general');

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer',
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer',
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = total_records.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = total_records.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product general');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = total_records.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = total_records.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0, // Exclude _id field
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0, // Exclude _id field
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = total_records.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = total_records.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.order_status !== '' &&
        input.royality_approval == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('order_status filter');

        const order_status = input.order_status;
        const allrecordgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              order_status: order_status,
            },
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);
        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: false,
          order_status: order_status,
        };
        const salesContract = await SalesContractDtlModel.find(where);
        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },

          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: salesContract ? salesContract.length : 0,
          paginated_record: saleContractDetail.length,
          totalQty: totalQty,
          totalRate: totalRate,
          totalAmount: totalAmount,
        };
        return result;
      } else if (
        input.royality_approval !== '' &&
        input.order_status == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('royality_approval filter');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        const allrecordgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);
        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: false,
          royality_approval: royality_approval,
        };
        const salesContract = await SalesContractDtlModel.find(where);
        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },

          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },

          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: salesContract ? salesContract.length : 0,
          paginated_record: saleContractDetail.length,
          totalQty: totalQty,
          totalRate: totalRate,
          totalAmount: totalAmount,
        };
        return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.order_status !== '' ||
          input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' general filters brand customer product ');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }

        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }

        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: filter_records,
          },
        ]);

        const productgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: filter,
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = productgroupby.map((item: any) => item.qty);
        const totalRate = productgroupby.map((item: any) => item.rate);
        const totalAmount = productgroupby.map((item: any) => item.amount);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              // royality_approval:royality_approve_filter
            },
          },
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },

          { $sort: { contractDate: -1 } },
        ]);

        const result = {
          salescontract_dtl: saleContractDetail,
          total_record: total_record.length,
          paginated_record: saleContractDetail.length,
          totalAmount: totalAmount,
          totalQty: totalQty,
          totalRate: totalRate,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customer = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );

        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: customer.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to product group');

        const total_records = await ProductModel.countDocuments();
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const product = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },

          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('customer group brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customer = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              brandName: { $first: '$brand_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: customer.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('product to brand');

        const total_records = await BrandModel.countDocuments();
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const product = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },

          {
            $match: {
              // isDeleted: false,
              brand: { $in: brandArr },
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brandInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const total_records = await BrandModel.countDocuments();

        const brandgroup = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },

              isDeleted: false,
              InHouse: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id', // Group by brand's _id
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 }, // Calculate the total number of contracts
              totalQty: { $sum: '$qty' }, // Calculate the total quantity
              totalAmount: { $sum: '$amount' }, // Calculate the total amount
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0, // Exclude _id field
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandgroup = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },

          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },

          {
            $group: {
              _id: '$brand._id',
              brandName: {
                $first: '$brand.name',
              },
              customerName: { $first: '$customer.name' },
              totalcontracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalcontracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: brandgroup.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product group customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productdtl = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'products',
            },
          },

          {
            $group: {
              _id: '$products._id',
              productName: {
                $first: '$products.name',
              },
              customerName: {
                $first: '$customer.name',
              },
              totalcontracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = productdtl.reduce(
          (sum, item) => sum + item.totalcontracts,
          0
        );
        const totalQtySum = productdtl.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = productdtl.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: productdtl,
          total_records: productdtl.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to customer');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customerdtl = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $group: {
              _id: '$customer._id',
              CustomerName: {
                $first: '$customer.name',
              },
              productName: {
                $first: '$product.name',
              },
              totalcontracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);
        const totalSaleContractsSum = customerdtl.reduce(
          (sum, item) => sum + item.totalcontracts,
          0
        );
        const totalQtySum = customerdtl.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customerdtl.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          customer_groupby: customerdtl,
          total_records: customerdtl.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to brand');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const branddtl = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'products',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $group: {
              _id: '$brand._id',
              productname: {
                $first: '$products.name',
              },
              brandname: {
                $first: '$brand.name',
              },
              totalContracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);
        const totalSaleContractsSum = branddtl.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = branddtl.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = branddtl.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: branddtl,
          total_records: branddtl.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        ((Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('group with general filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        ((Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          { $match: filter_records },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customerInfo',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brandInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
              customerName: {
                $first: { $arrayElemAt: ['$customerInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          { $match: filter_records },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customerInfo',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brandInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
              customerName: {
                $first: { $arrayElemAt: ['$customerInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },

          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.Adm == '' &&
        input.nonAdm == '' &&
        ((Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              customerName: { $first: '$customer.name' },
              productName: { $first: '$product.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              customerName: 1,
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              customerName: { $first: '$customer.name' },
              productName: { $first: '$product.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              customerName: 1,
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('product group  royality_approval && order_status');
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const order_status = input.order_status;

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.order_status !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('customer group royality_approval && order_status');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const order_status = input.order_status;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('brand group royality_approval && order_status');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const order_status = input.order_status;
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.product_group !== '' && input.order_status !== '') {
        console.log('order_status product group');
        const order_status = input.order_status;
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              order_status: order_status,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              order_status: order_status,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (input.customer_group !== '' && input.order_status !== '') {
        console.log('customer group order_status');

        const order_status = input.order_status;
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.brand_group !== '' && input.order_status !== '') {
        console.log('brand group order_status');

        const order_status = input.order_status;
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.product_group !== '' && input.royality_approval !== '') {
        console.log('product group  royality_approval');
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('customer group royality_approval');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.brand_group !== '' && input.royality_approval !== '') {
        console.log('brand group royality_approval');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      }
    } else if (input.Adm !== '') {
      console.log('adm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.order_status == '' &&
        input.royality_approval == ''
      ) {
        console.log('no filter condition execute');

        const allrecordgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
        };
        const salesContract = await SalesContractDtlModel.find(where);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },

          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },
          { $sort: { contractDate: -1 } },
        ]);

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: salesContract ? salesContract.length : 0,
          paginated_record: saleContractDetail.length,
          totalQty: totalQty,
          totalRate: totalRate,
          totalAmount: totalAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general');

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = total_records.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = total_records.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product general');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = total_records.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = total_records.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0, // Exclude _id field
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0, // Exclude _id field
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = total_records.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = total_records.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.order_status !== '' &&
        input.royality_approval == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('order_status filter');

        const order_status = input.order_status;
        const allrecordgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              order_status: order_status,
            },
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);
        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
          order_status: order_status,
        };
        const salesContract = await SalesContractDtlModel.find(where);
        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },

          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },

          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: salesContract ? salesContract.length : 0,
          paginated_record: saleContractDetail.length,
          totalQty: totalQty,
          totalRate: totalRate,
          totalAmount: totalAmount,
        };
        return result;
      } else if (
        input.royality_approval !== '' &&
        input.order_status == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('royality_approval filter ');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        const allrecordgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);
        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
          royality_approval: royality_approval,
        };
        const salesContract = await SalesContractDtlModel.find(where);
        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },

          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: salesContract ? salesContract.length : 0,
          paginated_record: saleContractDetail.length,
          totalQty: totalQty,
          totalRate: totalRate,
          totalAmount: totalAmount,
        };
        return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.order_status !== '' ||
          input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' general filters brand customer product ');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }

        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }

        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: filter_records,
          },
        ]);

        const productgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: filter,
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = productgroupby.map((item: any) => item.qty);
        const totalRate = productgroupby.map((item: any) => item.rate);
        const totalAmount = productgroupby.map((item: any) => item.amount);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              // royality_approval:royality_approve_filter
            },
          },
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },

          { $sort: { contractDate: -1 } },
        ]);

        const result = {
          salescontract_dtl: saleContractDetail,
          total_record: total_record.length,
          paginated_record: saleContractDetail.length,
          totalAmount: totalAmount,
          totalQty: totalQty,
          totalRate: totalRate,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customer = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );

        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: customer.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to product group');

        const total_records = await ProductModel.countDocuments();
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const product = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },

          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('customer group brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customer = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              brandName: { $first: '$brand_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: customer.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('product to brand');

        const total_records = await BrandModel.countDocuments();
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const product = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },

          {
            $match: {
              // isDeleted: false,
              brand: { $in: brandArr },
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brandInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const total_records = await BrandModel.countDocuments();

        const brandgroup = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },

              isDeleted: false,
              InHouse: true,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id', // Group by brand's _id
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 }, // Calculate the total number of contracts
              totalQty: { $sum: '$qty' }, // Calculate the total quantity
              totalAmount: { $sum: '$amount' }, // Calculate the total amount
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0, // Exclude _id field
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandgroup = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },

          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },

          {
            $group: {
              _id: '$brand._id',
              brandName: {
                $first: '$brand.name',
              },
              customerName: { $first: '$customer.name' },
              totalcontracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalcontracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: brandgroup.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product group customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productdtl = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'products',
            },
          },

          {
            $group: {
              _id: '$products._id',
              productName: {
                $first: '$products.name',
              },
              customerName: {
                $first: '$customer.name',
              },
              totalcontracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);

        const totalSaleContractsSum = productdtl.reduce(
          (sum, item) => sum + item.totalcontracts,
          0
        );
        const totalQtySum = productdtl.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = productdtl.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: productdtl,
          total_records: productdtl.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to customer');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customerdtl = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $group: {
              _id: '$customer._id',
              CustomerName: {
                $first: '$customer.name',
              },
              productName: {
                $first: '$product.name',
              },
              totalcontracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);
        const totalSaleContractsSum = customerdtl.reduce(
          (sum, item) => sum + item.totalcontracts,
          0
        );
        const totalQtySum = customerdtl.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customerdtl.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          customer_groupby: customerdtl,
          total_records: customerdtl.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to brand');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const branddtl = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'products',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $group: {
              _id: '$brand._id',
              productname: {
                $first: '$products.name',
              },
              brandname: {
                $first: '$brand.name',
              },
              totalContracts: {
                $sum: 1,
              },
              totalQty: {
                $sum: '$qty',
              },
              totalAmount: {
                $sum: '$amount',
              },
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ]);
        const totalSaleContractsSum = branddtl.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = branddtl.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = branddtl.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: branddtl,
          total_records: branddtl.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        ((Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('group with general filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Retrieve customer name
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        ((Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          { $match: filter_records },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customerInfo',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brandInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
              customerName: {
                $first: { $arrayElemAt: ['$customerInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },

          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          { $match: filter_records },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customerInfo',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brandInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              brandName: { $first: { $arrayElemAt: ['$brandInfo.name', 0] } },
              customerName: {
                $first: { $arrayElemAt: ['$customerInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },

          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        ((Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              customerName: { $first: '$customer.name' },
              productName: { $first: '$product.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              customerName: 1,
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              customerName: { $first: '$customer.name' },
              productName: { $first: '$product.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              customerName: 1,
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('product group  royality_approval && order_status');
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const order_status = input.order_status;

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.order_status !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('customer group royality_approval && order_status');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const order_status = input.order_status;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('brand group royality_approval && order_status');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const order_status = input.order_status;
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              order_status: order_status,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.product_group !== '' && input.order_status !== '') {
        console.log('order_status product group');
        const order_status = input.order_status;
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              order_status: order_status,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              order_status: order_status,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (input.customer_group !== '' && input.order_status !== '') {
        console.log('customer group order_status');

        const order_status = input.order_status;
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.brand_group !== '' && input.order_status !== '') {
        console.log('brand group order_status');

        const order_status = input.order_status;
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              order_status: order_status,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.product_group !== '' && input.royality_approval !== '') {
        console.log('product group  royality_approval');
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },

          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'productInfo',
            },
          },
          {
            $group: {
              _id: '$product',
              productName: {
                $first: { $arrayElemAt: ['$productInfo.name', 0] },
              },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              productName: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = product.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = product.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = product.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSalecontract,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval !== ''
      ) {
        console.log('customer group royality_approval grgr');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0, // Exclude _id field
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $addFields: {
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $group: {
              _id: '$customer', // Group by customer ID
              customerName: { $first: '$customer_details.name' },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $project: {
              customerName: 1,
              totalQty: 1,
              totalAmount: 1,
              totalContracts: 1,
              _id: 0,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = customer.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = customer.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = customer.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (input.brand_group !== '' && input.royality_approval !== '') {
        console.log('brand group royality_approval');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              royality_approval: royality_approval,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand',
            },
          },
          {
            $unwind: '$brand',
          },
          {
            $group: {
              _id: '$brand._id',
              name: { $first: '$brand.name' },
              totalContracts: { $sum: 1 },
              totalQty: { $sum: '$qty' },
              totalAmount: { $sum: '$amount' },
            },
          },
          {
            $match: {
              totalQty: { $gt: 0 },
              totalAmount: { $gt: 0 },
            },
          },
          {
            $project: {
              _id: 0,
              name: 1,
              totalContracts: 1,
              totalQty: 1,
              totalAmount: 1,
            },
          },
          { $sort: { totalQty: -1, totalAmount: -1 } },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const totalQtySum = brandgroup.reduce(
          (sum, item) => sum + item.totalQty,
          0
        );
        const totalAmountSum = brandgroup.reduce(
          (sum, item) => sum + item.totalAmount,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalQtySum: totalQtySum,
          totalAmountSum: totalAmountSum,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      }
    }
  } catch (err) {
    console.log({ err });
  }
};


export const findSalesContractDtlsByDatePrint= async (input: SaleContractReportPrintSchema )=> {
const {
      brand,
      customer,
      product,
      fromDate,
      toDate,
      // pageno = 1,
      // perPage = 10,
      order_status,
      royality_approval,
      isDeleted,
      Adm,
      nonAdm,
      brand_group,
      customer_group,
      product_group,
    } = input;

    // pagination contants
    // const limit = perPage;
    // const skipCount = (pageno - 1) * limit;

 //  Group condition setter
    const groupId: any = {};
    const shouldGroup = product_group || brand_group || customer_group;

     if (product_group) groupId.product = '$product';
    if (brand_group) groupId.brand = '$brand';
    if (customer_group) groupId.customer = '$customer';

const matchStage: any = { isDeleted: false };

    if (fromDate && toDate) {
      matchStage.contractDate = {
        $gte: new Date(fromDate),
        $lte: new Date(toDate),
      };
    }


  if (Array.isArray(product) && product.length > 0) {
    matchStage.product = {
    $in: product.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(brand) && brand.length > 0) {
    matchStage.brand = {
    $in: brand.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(customer) && customer.length > 0) {
    matchStage.customer ={
    $in: customer.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Adm) matchStage['InHouse'] = true;
if (nonAdm) matchStage['InHouse'] = false;
     
  const scMatchStage: any = {};
   if (royality_approval == 'true')
        scMatchStage['royality_approval'] = true;
      if (royality_approval == 'false')
        scMatchStage['royality_approval'] = false;

      // const scMatchStage2: any = { isDeleted: false };
      if (order_status == 'confirmed')
        scMatchStage['order_status'] = 'confirmed';
      if (order_status == 'forecast')
        scMatchStage['order_status'] = 'forecast';

if (isDeleted && isDeleted.toString().toLowerCase() === "true") {
  matchStage.isDeleted = true;
}


  const basePipeline:any[] = [
  {
   $match: matchStage
  },
  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContract",
      pipeline: [
        {
          $lookup: {
            from: "paymentterms",
            localField: "paymentTerm",
            foreignField: "_id",
            as: "paymentTerm"
          }
        }
      ]
    }
  },
  {
    $unwind: {
      path: "$salesContract",
      preserveNullAndEmptyArrays: false
    }
  },
      {
      $match: scMatchStage,
        },
  {
    $unwind: {
      path: "$salesContract.paymentTerm",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currency"
    }
  },
  {
    $unwind: {
      path: "$currency",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $project: {
      _id: 0,
      tran:"$tran",
      contract: "$salesContract.contract",
      po: "$salesContract.po",
      poDate: "$salesContract.poDate",
      contractDate: "$contractDate",
      customer: "$customers.name",
      product: "$products.name",
      brand: "$brands.name",
      currency: "$currency.name",
      rate: "$rate",
      qty: "$qty",
      amount: "$amount",
      uom: "$uom",
      paymentTerm:
        "$salesContract.paymentTerm.name",
      orderStatus: "$order_status"
    }
  },
  {
    $sort: { contractDate:-1 }
  }
 
]

  const basePipelineSummary:any[] = [
  {
   $match: matchStage
  },
  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContract",
      pipeline: [
        {
          $lookup: {
            from: "paymentterms",
            localField: "paymentTerm",
            foreignField: "_id",
            as: "paymentTerm"
          }
        }
      ]
    }
  },
  {
    $unwind: {
      path: "$salesContract",
      preserveNullAndEmptyArrays: false
    }
  },
      {
      $match: scMatchStage,
        },
  {
    $unwind: {
      path: "$salesContract.paymentTerm",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currency"
    }
  },
  {
    $unwind: {
      path: "$currency",
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $project: {
       _id: 0,
      contract: "$salesContract.contract",
      po: "$salesContract.po",
      poDate: "$salesContract.poDate",
      contractDate: "$contractDate",
      customer: "$customers.name",
      product: "$products.name",
      brand: "$brands.name",
      currency: "$currency.name",
      rate: "$rate",
      qty: "$qty",
      amount: "$amount",
      uom: "$uom",
      paymentTerm:"$salesContract.paymentTerm.name",
      orderStatus: "$order_status"
    }
  },
  {
    $sort: { contractDate:-1 }
  }
 
]
const sortStage = { $sort: { totalSalescontractQty: -1 } };

const groupStage = {
  $group: {
  _id: groupId,
  product: { $first: '$product' }, 
  brand: { $first: '$brand' }, 
  customer: { $first: '$customer' },
  totalSalescontract: { $sum: 1 },
  totalSalescontractQty:{$sum:"$qty"},
   totalSalescontractAmount:{$sum:"$amount"},
   totalSalescontractRate:{$sum:"$rate"}
  
}
}
const groupStageSummary = {
   $group: {
  _id: '',
  // product: { $first: '$product' }, 
  // brand: { $first: '$brand' }, 
  // customer: { $first: '$customer' },
  totalSalescontract: { $sum: 1 },
  totalSalescontractQty:{$sum:"$qty"},
   totalSalescontractAmount:{$sum:"$amount"},
   totalSalescontractRate:{$sum:"$rate"}
  
}
}

 // If grouping is not required, we can skip the group stage
      const dataPipeline = shouldGroup
        ? [...basePipeline, groupStage, sortStage]
        : [...basePipeline]

      // Count pipeline for total records
      // const countPipeline = shouldGroup
      //   ? [...basePipeline, groupStage, { $count: 'totalRecords' }]
      //   : [...basePipeline, { $count: 'totalRecords' }];


const summaryPipeline = shouldGroup
        ? [...basePipelineSummary, groupStageSummary]
        : [
          ...basePipelineSummary,
          {
            $group: {
              _id: null,
              totalSalescontractQty: {
                $sum: "$qty"
              },
              totalSalescontractAmount: {
                $sum: "$amount"
              },
              totalSalescontract:{
                $sum:1
              },
              totalSalescontractRate: {
                $sum: "$rate"
              },
            
            },
          },
        ];
  // Executing the pipelines in parallel
      const [salesdtl, summaryResult] = await Promise.all([
        SalesContractDtlModel.aggregate(dataPipeline, { allowDiskUse: true }),
        // SalesContractDtlModel.aggregate(countPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(summaryPipeline, { allowDiskUse: true }),
      ]);

//  const totalRecords = totalResult?.[0]?.totalRecords || 0;
      const summary = summaryResult?.[0] || {
        totalSalescontractQty: 0, 
        totalSalescontractAmount: 0,
        totalSalescontract: 0,
        totalSalescontractRate: 0,
      };
      return {
        salesdtl,
        summary,
        // pagination: {
        //   page: pageno,
        //   perPage,
        //   totalRecords,
        //   totalPages: Math.ceil(totalRecords / perPage),
        // },
      };

  }


export const findIsDeletedSalesContractByDate = async (
  input: SaleContractReportSchema
) => {
  let where: any = {
    date: {
      $gte: moment(input.fromDate).format('YYYY-MM-DD'),
      $lte: moment(input.toDate).format('YYYY-MM-DD'),
    },
    isDeleted: true,
  };

  // if (input?.customer !== '') {
  //   where.customer = input.customer;
  // }

  console.log({ where });

  const saleContract = await SalesContractModel.find(where)

    .populate({
      path: 'brand',
      model: BrandModel,
    })
    .populate({
      path: 'customer',
      model: CustomerModel,
    });

  const IsDeletedDetail = await SalesContractDtlModel.find({
    isDeleted: true,
  })

    .populate({
      path: 'product',
      model: ProductModel,
    })
    .populate({
      path: 'currency',
      model: CurrencyModel,
    })
    .populate({
      path: 'salesContract',
      model: SalesContractModel,
      populate: [
        { path: 'customer', model: CustomerModel },
        { path: 'brand', model: BrandModel },
      ],
    });

  return IsDeletedDetail;
};
export const findNotShipmentSalesContract = async () => {
  const saleContract = await SalesContractModel.find({
    shipment: false,
    isDeleted: false,
    royality_approval: true,
  });

  const saleContractDetail = await SalesContractDtlModel.aggregate([
    {
      $match: {
        $and: [
          { isDeleted: false },
          { shipment: false },
          { order_status: 'confirmed' },
        ],
      },
    },
    {
      $group: {
        _id: '$salesContract',
        salesContract: { $first: '$salesContract' },
        qty: { $sum: '$qty' },
        rate: { $sum: '$rate' },
        amount: { $sum: '$amount' },
        shipmentDate: { $first: '$shipmentDate' },
      },
    },
  ]);
  await SalesContractDtlModel.populate(saleContractDetail, {
    path: 'salesContract',
    model: SalesContractModel,

    populate: [
      {
        path: 'brand',
        model: BrandModel,
      },
      {
        path: 'customer',
        model: CustomerModel,
      },
      {
        path: 'paymentTerm',
        model: PaymentTermModel,
      },
    ],
  });

  return saleContractDetail;
};

export const updateInvoice_Noadmdenim = async () => {
  // const invoice = await InvoiceModel.find({ isDeleted: false });

  // let updatedCount = 0;
  // let skippedCount = 0;
  
  // for (let i = 0; i < invoice.length; i++) {
  //   const inv = invoice[i];
  
  //   const roy = await RoyalityModel.updateOne(
  //     { isDeleted: false, invoice: inv._id },
  //     {
  //       $set: {
  //         salesTaxInvoiceNo: inv.salesTaxInvoiceNo
  //       }
  //     }
  //   );
  
  //   if (roy.matchedCount > 0) {
  //     console.log(`Updated royalty for invoice ID: ${inv._id}`);
  //     updatedCount++;
  //   } else {
  //     console.log(`No royalty record found for invoice ID: ${inv._id}`);
  //     skippedCount++;
  //   }
  // }
  
  // console.log(`Total updated: ${updatedCount}`);
  // console.log(`Total skipped (no match): ${skippedCount}`);
  

  // First, find the sales contracts that match the criteria
  // const saleContracts = await SalesContractDtlModel.find({
  //   InHouse: false,
  //   isDeleted: false,
  //   shipment:true,
  // });
  // const shipments = await Promise.all(
  //   saleContracts.map(sale =>
  //     ShipmentDtlModel.findOne({
  //       salesContract: sale.salesContract,
  //       isDeleted: false,
  //     })
  //   )
  // );
  // for (let i = 0; i < saleContracts.length; i++) {
  //   const sale = saleContracts[i];
  //   const shipment = shipments[i];
  //   const saleRate = sale.rate || 0;
  //   const saleAmount = sale.amount || 0;
  //   const shipmentRate = shipment?.rate || 0;
  //   const shipmentAmount = shipment?.amount || 0;
  //   if (saleRate === shipmentRate && saleAmount === shipmentAmount) {
  //     console.log(`Match: SaleContract ID: ${sale.salesContract}`);
  //     console.log(`  Rate: ${saleRate}, Amount: ${saleAmount}`);
  //   } else {
  //     console.log(`Not Match: SaleContract ID: ${sale.salesContract}`);
  //     console.log(`  Sale - Rate: ${saleRate}, Amount: ${saleAmount}`);
  //     console.log(`  Shipment - Rate: ${shipmentRate}, Amount: ${shipmentAmount}`);
  //   }
  // }
  // const duplicates = await RoyalityModel.aggregate([
  //   {
  //     $match:{
  //       InHouse:true,
  //       isDeleted:false
  //     }
  //   },
  //   {
  //     $group: {
  //       _id: "$salesContract",
  //       count: { $sum: 1 }
  //     }
  //   },
  //   {
  //     $match: { count: { $gte: 1 }}
  //   }
  // ]);
  // duplicates.forEach(duplicate => {
  //   if (duplicate.count > 1) {
  //     console.log(`Duplicate salesContract found: ${duplicate._id}, Count: ${duplicate.count}`);
  //   }
  // });
  // try {
  //   const salesdtl = await SalesContractDtlModel.find({ isDeleted: false, InHouse: true, royality: true });
  //   for (const sales of salesdtl) {
  //     const invoices = await InvoiceModel.find({
  //       salesContract: sales.salesContract,
  //       isDeleted: false,
  //       adm_invoice: true,
  //     });
  //     const payments = await PaymentModel.find({
  //       salesContract: sales.salesContract,
  //       isDeleted: false,
  //       adm_payment: true,
  //     });
  //     if (invoices.length > 0 && payments.length > 0) {
  //       const invoice = invoices[0];
  //       const payment = payments[0];
  //       const royalityUpdate = await RoyalityModel.updateOne(
  //         { salesContract: sales.salesContract, InHouse: true, isDeleted: false },
  //         {
  //           $set: {
  //             invoice: invoice._id,
  //             payment: payment._id,
  //             paymentDate: moment(payment.paymentRecieveDate).format('YYYY-MM-DD'),
  //             salesTaxInvoiceNo: invoice.salesTaxInvoiceNo,
  //           },
  //         }
  //       );
  //       console.log(`Royalty updated for sales contract ${sales.salesContract}: ${royalityUpdate.acknowledged}`);
  //     } else {
  //       console.log(`No matching invoice or payment found for sales contract ${sales.salesContract}`);
  //     }
  //   }
  // } catch (error) {
  //   console.error('An error occurred while updating invoices:', error);
  //   }
};

export const Salecontract_drop_down = async (
  input: Salecontractdrop_downSchema
) => {
  const limit = input?.limit;
  const searchQuery = new RegExp(`^${input?.contract}`, 'i');

  if (input.record == true) {
    const salecontract = await SalesContractModel.aggregate([
      {
        $match: {
          isDeleted: false,
        },
      },
      {
        $project: {
          contract: 1,
        },
      },
    ]).exec();

    return salecontract;
  } else if (input.contract !== '') {
    try {
      const salecontract = await SalesContractModel.aggregate([
        {
          $match: {
            contract: { $regex: searchQuery },
            isDeleted: false,
          },
        },
        {
          $project: {
            contract: 1,
          },
        },
        { $limit: limit },
      ]).exec();

      return salecontract;
    } catch (error) {
      return error;
    }
  } else {
    const salecontract = await SalesContractModel.aggregate([
      {
        $match: {
          isDeleted: false,
        },
      },
      {
        $project: {
          contract: 1,
        },
      },
      { $limit: limit },
    ]).exec();

    return salecontract;
  }
};
export const findNotShipmentSalesContract_new = async (
  input: Salecontractdrop_downSchema
) => {
  const limit = input?.limit;
  const searchQuery = new RegExp(`^${input?.contract}`, 'i');
  if (input.contract !== '') {
    const salecontract = await SalesContractModel.aggregate([
      {
        $match: {
          contract: { $regex: searchQuery },
          isDeleted: false,
          royality: false,
          shipment: false,
        },
      },
      {
        $lookup: {
          from: 'salescontractdtls',
          localField: '_id',
          foreignField: 'salesContract',
          as: 'salesContractsDetails',
          pipeline: [
            {
              $project: {
                qty: 1,
                rate: 1,
                amount: 1,
                product: 1,
                currency: 1,
                uom: 1,
                shipmentDate: {
                  $first: '$shipmentDate',
                },
              },
            },
          ],
        },
      },
      {
        $project: {
          contract: 1,
          po: 1,
          customer: 1,
          brand: 1,
          paymentTerm: 1,
          product: {
            $first: '$salesContractsDetails.product',
          },
          uom: {
            $first: '$salesContractsDetails.uom',
          },
          currency: {
            $first: '$salesContractsDetails.currency',
          },
          qty: {
            $first: '$salesContractsDetails.qty',
          },
          rate: {
            $first: '$salesContractsDetails.rate',
          },
          amount: {
            $first: '$salesContractsDetails.amount',
          },
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
          pipeline: [
            {
              $project: {
                name: 1,
                address1: 1,
                address2: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'paymentterms',
          localField: 'paymentTerm',
          foreignField: '_id',
          as: 'paymentTerm',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'currencies',
          localField: 'currency',
          foreignField: '_id',
          as: 'currency',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $project: {
          contract: 1,
          po: 1,
          qty: 1,
          amount: 1,
          uom: 1,
          rate: 1,
          customer: {
            $arrayElemAt: [{ $ifNull: ['$customer', []] }, 0],
          },
          brand: {
            $arrayElemAt: [{ $ifNull: ['$brand', []] }, 0],
          },
          paymentTerm: {
            $arrayElemAt: [{ $ifNull: ['$paymentTerm', []] }, 0],
          },
          product: {
            $arrayElemAt: [{ $ifNull: ['$product', []] }, 0],
          },

          currency: {
            $arrayElemAt: [{ $ifNull: ['$currency', []] }, 0],
          },
        },
      },
      { $limit: limit },
    ]).exec();

    return salecontract;
  } else if (input.contract == '' && input.record == false) {
    const salecontract = await SalesContractModel.aggregate([
      {
        $match: {
          isDeleted: false,
          royality: false,
          shipment: false,
        },
      },

      {
        $lookup: {
          from: 'salescontractdtls',
          localField: '_id',
          foreignField: 'salesContract',
          as: 'salesContractsDetails',
          pipeline: [
            {
              $project: {
                qty: 1,
                rate: 1,
                amount: 1,
                product: 1,
                currency: 1,
                uom: 1,
                shipmentDate: {
                  $first: '$shipmentDate',
                },
              },
            },
          ],
        },
      },
      {
        $project: {
          contract: 1,
          po: 1,
          customer: 1,
          brand: 1,
          paymentTerm: 1,
          product: {
            $first: '$salesContractsDetails.product',
          },
          uom: {
            $first: '$salesContractsDetails.uom',
          },
          currency: {
            $first: '$salesContractsDetails.currency',
          },
          qty: {
            $first: '$salesContractsDetails.qty',
          },
          rate: {
            $first: '$salesContractsDetails.rate',
          },
          amount: {
            $first: '$salesContractsDetails.amount',
          },
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
          pipeline: [
            {
              $project: {
                name: 1,
                address1: 1,
                address2: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'paymentterms',
          localField: 'paymentTerm',
          foreignField: '_id',
          as: 'paymentTerm',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'currencies',
          localField: 'currency',
          foreignField: '_id',
          as: 'currency',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $project: {
          contract: 1,
          po: 1,
          qty: 1,
          amount: 1,
          uom: 1,
          rate: 1,
          customer: {
            $arrayElemAt: [{ $ifNull: ['$customer', []] }, 0],
          },
          brand: {
            $arrayElemAt: [{ $ifNull: ['$brand', []] }, 0],
          },
          paymentTerm: {
            $arrayElemAt: [{ $ifNull: ['$paymentTerm', []] }, 0],
          },
          product: {
            $arrayElemAt: [{ $ifNull: ['$product', []] }, 0],
          },

          currency: {
            $arrayElemAt: [{ $ifNull: ['$currency', []] }, 0],
          },
        },
      },
      { $limit: limit },
    ]).exec();

    return salecontract;
  } else if (input.record == true) {
    const salecontract = await SalesContractModel.aggregate([
      {
        $match: {
          isDeleted: false,
          royality: false,
          shipment: false,
        },
      },

      {
        $lookup: {
          from: 'salescontractdtls',
          localField: '_id',
          foreignField: 'salesContract',
          as: 'salesContractsDetails',
          pipeline: [
            {
              $project: {
                qty: 1,
                rate: 1,
                amount: 1,
                product: 1,
                currency: 1,
                uom: 1,
                shipmentDate: {
                  $first: '$shipmentDate',
                },
              },
            },
          ],
        },
      },
      {
        $project: {
          contract: 1,
          po: 1,
          customer: 1,
          brand: 1,
          paymentTerm: 1,
          product: {
            $first: '$salesContractsDetails.product',
          },
          uom: {
            $first: '$salesContractsDetails.uom',
          },
          currency: {
            $first: '$salesContractsDetails.currency',
          },
          qty: {
            $first: '$salesContractsDetails.qty',
          },
          rate: {
            $first: '$salesContractsDetails.rate',
          },
          amount: {
            $first: '$salesContractsDetails.amount',
          },
        },
      },
      {
        $lookup: {
          from: 'customers',
          localField: 'customer',
          foreignField: '_id',
          as: 'customer',
          pipeline: [
            {
              $project: {
                name: 1,
                address1: 1,
                address2: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'brands',
          localField: 'brand',
          foreignField: '_id',
          as: 'brand',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'paymentterms',
          localField: 'paymentTerm',
          foreignField: '_id',
          as: 'paymentTerm',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'products',
          localField: 'product',
          foreignField: '_id',
          as: 'product',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $lookup: {
          from: 'currencies',
          localField: 'currency',
          foreignField: '_id',
          as: 'currency',
          pipeline: [
            {
              $project: {
                name: 1,
              },
            },
          ],
        },
      },
      {
        $project: {
          contract: 1,
          po: 1,
          qty: 1,
          amount: 1,
          uom: 1,
          rate: 1,
          customer: {
            $arrayElemAt: [{ $ifNull: ['$customer', []] }, 0],
          },
          brand: {
            $arrayElemAt: [{ $ifNull: ['$brand', []] }, 0],
          },
          paymentTerm: {
            $arrayElemAt: [{ $ifNull: ['$paymentTerm', []] }, 0],
          },
          product: {
            $arrayElemAt: [{ $ifNull: ['$product', []] }, 0],
          },

          currency: {
            $arrayElemAt: [{ $ifNull: ['$currency', []] }, 0],
          },
        },
      },
    ]).exec();

    return salecontract;
  }
};

export const Dashboard_details_groups = async (
  input: DashboardDetailsGroupSchema
) => {
  if (input.AdmDenim == '') {
    const Salecontractdtl = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: moment(input.fromDate).toDate(),
            $lte: moment(input.toDate).toDate(),
          },
          isDeleted: false,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          amount: {
            $sum: '$amount',
          },
        },
      },
    ]);

    const invdtl = await InvoiceDtlModel.aggregate([
      {
        $match: {
          date: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: { $sum: '$qty' },
          amount: { $sum: '$amount' },
          salesTaxAmount: { $sum: '$salesTaxAmount' },
        },
      },
    ]);
    const shipdtl = await ShipmentDtlModel.aggregate([
      {
        $match: {
          gpDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: { $sum: '$qty' },
          amount: { $sum: '$amount' },
        },
      },
    ]);

    const royalitydtl = await RoyalityModel.aggregate([
      {
        $match: {
          saletaxinvoicedate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $lookup: {
          from: 'salescontractdtls',
          localField: 'salesContract',
          foreignField: 'salesContract',
          as: 'sales_dtl',
        },
      },
      {
        $project: {
          qty: {
            $first: '$sales_dtl.qty',
          },
          amount: {
            $first: '$sales_dtl.amount',
          },
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          amount: {
            $sum: '$amount',
          },
        },
      },
    ]);

    const royality_amount = await RoyalityModel.aggregate([
      {
        $match: {
          saletaxinvoicedate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $group: {
          _id: 'null',
          RoyalityAmount: { $sum: '$amount' },
        },
      },
    ]);

    royalitydtl.push(...royality_amount);
    const production_dtl = await ProductionDtlModel.aggregate([
      {
        $match: {
          date: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },

          isDeleted: false,
        },
      },

      {
        $project: {
          bales: 1,
          qty: 1,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          bales: {
            $sum: {
              $toInt: '$bales',
            },
          },
        },
      },
    ]);

    const Prodtl_Stock = await ProductionDtlModel.aggregate([
      {
        $match: {
          isDeleted: false,
        },
      },

      {
        $project: {
          bales: 1,
          qty: 1,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          bales: {
            $sum: {
              $toInt: '$bales',
            },
          },
        },
      },
    ]);

    const salecontractdtl_stock = await SalesContractDtlModel.aggregate([
      {
        $match: {
          isDeleted: false,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          amount: {
            $sum: '$amount',
          },
        },
      },
    ]);
    const salecontractdtl_ss = salecontractdtl_stock.map((item) => item.qty);
    const prodtl = Prodtl_Stock.map((item) => item.qty);
    const productionSum = prodtl
      ? prodtl.reduce((acc, qty) => acc + qty, 0)
      : 0;
    const salecontractSum = salecontractdtl_ss
      ? salecontractdtl_ss.reduce((acc, qty) => acc + qty, 0)
      : 0;
    const stock_cal = productionSum - salecontractSum;

    const result = {
      SaleContractdtl: Salecontractdtl,
      invdtl: invdtl,
      shipdtl: shipdtl,
      royalitydtl: royalitydtl,
      production_dtl: production_dtl,
      stock: stock_cal,
    };
    return result;
  } else if (input.AdmDenim == 'non_admdenim') {
    console.log('non adm');
    const SalecontractdtlNonAdm = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: moment(input.fromDate).toDate(),
            $lte: moment(input.toDate).toDate(),
          },
          InHouse: false,
          isDeleted: false,
        },
      },

      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          amount: {
            $sum: '$amount',
          },
        },
      },
    ]);

    const production_dtl = await ProductionDtlModel.aggregate([
      {
        $match: {
          date: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },

          isDeleted: false,
        },
      },

      {
        $project: {
          bales: 1,
          qty: 1,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          bales: {
            $sum: {
              $toInt: '$bales',
            },
          },
        },
      },
    ]);
    const invdtl = await InvoiceDtlModel.aggregate([
      {
        $match: {
          date: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: { $sum: '$qty' },
          amount: { $sum: '$amount' },
          salesTaxAmount: { $sum: '$salesTaxAmount' },
        },
      },
    ]);
    const shipdtl = await ShipmentDtlModel.aggregate([
      {
        $match: {
          gpDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: { $sum: '$qty' },
          amount: { $sum: '$amount' },
        },
      },
    ]);

    const royalitydtl = await RoyalityModel.aggregate([
      {
        $match: {
          isDeleted: false,
          InHouse: false,
        },
      },
      {
        $lookup: {
          from: 'salescontractdtls',
          localField: 'salesContract',
          foreignField: 'salesContract',
          as: 'sales_dtl',
        },
      },
      {
        $project: {
          qty: {
            $first: '$sales_dtl.qty',
          },
          amount: {
            $first: '$sales_dtl.amount',
          },
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          amount: {
            $sum: '$amount',
          },
          totalrecords: {
            $sum: 1,
          },
        },
      },
    ]);

    const royality_amount = await RoyalityModel.aggregate([
      {
        $match: {
          saletaxinvoicedate: {
            $gte: new Date(
              moment(input.fromDate).startOf('date').format('YYYY-MM-DD')
            ),
            $lte: new Date(
              moment(input.toDate).endOf('date').format('YYYY-MM-DD')
            ),
          },
          isDeleted: false,
          InHouse: false,
        },
      },
      {
        $group: {
          _id: 'null',
          RoyalityAmount: { $sum: '$amount' },
          totalrecords: {
            $sum: 1,
          },
        },
      },
    ]);
    console.log(royality_amount, 'amount dash');
    royalitydtl.push(...royality_amount);
    const result = {
      SaleContractdtl: SalecontractdtlNonAdm,
      invdtl: invdtl,
      shipdtl: shipdtl,
      royalitydtl: royalitydtl,
      production_dtl: production_dtl,
    };
    return result;
  } else if (input.AdmDenim == 'adm_denim') {
    const SalecontractdtlAdmDenim = await SalesContractDtlModel.aggregate([
      {
        $match: {
          contractDate: {
            $gte: moment(input.fromDate).toDate(),
            $lte: moment(input.toDate).toDate(),
          },
          InHouse: true,
          isDeleted: false,
        },
      },

      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          amount: {
            $sum: '$amount',
          },
        },
      },
    ]);
    const production_dtl = await ProductionDtlModel.aggregate([
      {
        $match: {
          date: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },

          isDeleted: false,
        },
      },

      {
        $project: {
          bales: 1,
          qty: 1,
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          bales: {
            $sum: {
              $toInt: '$bales',
            },
          },
        },
      },
    ]);
    const royalitydtl = await RoyalityModel.aggregate([
      {
        $match: {
          saletaxinvoicedate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
        },
      },
      {
        $lookup: {
          from: 'salescontractdtls',
          localField: 'salesContract',
          foreignField: 'salesContract',
          as: 'sales_dtl',
        },
      },
      {
        $project: {
          qty: {
            $first: '$sales_dtl.qty',
          },
          amount: {
            $first: '$sales_dtl.amount',
          },
        },
      },
      {
        $group: {
          _id: 'null',
          qty: {
            $sum: '$qty',
          },
          amount: {
            $sum: '$amount',
          },
        },
      },
    ]);
    const royality_amount = await RoyalityModel.aggregate([
      {
        $match: {
          saletaxinvoicedate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
        },
      },
      {
        $group: {
          _id: 'null',
          RoyalityAmount: { $sum: '$amount' },
        },
      },
    ]);
    royalitydtl.push(...royality_amount);
    const result = {
      SaleContractdtl: SalecontractdtlAdmDenim,
      royalitydtl: royalitydtl,

      production_dtl: production_dtl,
    };
    return result;
  }
};

export const pending_contract_dtl_old = async (input: SaleContractReportSchema) => {
  try {
    if (
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      input.order_status == ''
    ) {
      console.log('no filter condition execute ');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        shipment: false,
        // InHouse: false,
        // invoice:false
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],

          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
  { $match: where },

  // Lookup related data
  {
    $lookup: {
      from: 'customers',
      localField: 'customer',
      foreignField: '_id',
      as: 'customer_details',
    },
  },
  {
    $lookup: {
      from: 'products',
      localField: 'product',
      foreignField: '_id',
      as: 'product_dtl',
    },
  },
  {
    $lookup: {
      from: 'brands',
      localField: 'brand',
      foreignField: '_id',
      as: 'branddtl',
    },
  },
  {
    $lookup: {
      from: 'salescontracts',
      localField: 'salesContract',
      foreignField: '_id',
      as: 'salesContractData',
    },
  },
  {
    $unwind: { path: '$customer_details', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$product_dtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$branddtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$salesContractData', preserveNullAndEmptyArrays: true },
  },

  // Fixed shipment lookup using grouping inside pipeline
  {
    $lookup: {
      from: 'shipmentdtls',
      let: { salesContractId: '$salesContract' },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ['$salesContract', '$$salesContractId'] },
                { $eq: ['$isDeleted', false] },
              ],
            },
          },
        },
        {
          $group: {
            _id: null,
            shipmentTotalQty: { $sum: '$qty' },
            shipmentTotalAmount: { $sum: '$amount' },
          },
        },
      ],
      as: 'shipmentSummary',
    },
  },

  // Add shipment totals safely
  {
    $addFields: {
      shipmentTotalQty: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalQty', 0] }, 0],
      },
      shipmentTotalAmount: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalAmount', 0] }, 0],
      },
    },
  },

  // Lookup currency and payment terms
  {
    $lookup: {
      from: 'currencies',
      localField: 'currency',
      foreignField: '_id',
      as: 'currencyData',
    },
  },
  {
    $lookup: {
      from: 'paymentterms',
      localField: 'salesContractData.paymentTerm',
      foreignField: '_id',
      as: 'paymentTermData',
    },
  },

  // Project required fields
  {
    $project: {
      salesContractId: '$salesContract',
      contract: '$salesContractData.contract',
      po: '$salesContractData.po',
      podate: '$salesContractData.poDate',
      Contractdate: '$salesContractData.contractDate',
      customer: '$customer_details.name',
      product: '$product_dtl.name',
      brand: '$branddtl.name',
      currency: { $arrayElemAt: ['$currencyData.name', 0] },
      payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
      uom: '$uom',
      totalQty: '$qty',
      totalAmount: '$amount',
      shipmentTotalQty: 1,
      shipmentTotalAmount: 1,
    },
  },

  // Group by all unique fields
  {
    $group: {
      _id: {
        contract: '$contract',
        po: '$po',
        podate: '$podate',
        Contractdate: '$Contractdate',
        customer: '$customer',
        product: '$product',
        brand: '$brand',
        currency: '$currency',
        payment_term: '$payment_term',
        uom: '$uom',
        salesContractId: '$salesContractId',
      },
      totalSalesQty: { $sum: '$totalQty' },
      totalSalesAmount: { $sum: '$totalAmount' },
      totalShipmentQty: { $sum: '$shipmentTotalQty' },
      totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
    },
  },

  // Final projection with remaining calculation
  {
    $project: {
      _id: 0,
      contract: '$_id.contract',
      po: '$_id.po',
      podate: '$_id.podate',
      Contractdate: '$_id.Contractdate',
      customer: '$_id.customer',
      product: '$_id.product',
      brand: '$_id.brand',
      currency: '$_id.currency',
      payment_term: '$_id.payment_term',
      uom: '$_id.uom',
      salesContractId: '$_id.salesContractId',
      totalSalesQty: 1,
      totalShipmentQty: 1,
      totalSalesAmount: 1,
      totalShipmentAmount: 1,
      remainingQty: {
        $subtract: ['$totalSalesQty', '$totalShipmentQty'],
      },
      remainingAmount: {
        $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
      },
    },
  },

  // Filter to show only records with remaining quantity
  {
    $match: {
      remainingQty: { $gt: 0 },
    },
  },

  // Pagination
  { $skip: skipCount },
  { $limit: limit },

  // Sorting
  {
    $sort: {
      Contractdate: -1,
    },
  },
]);


      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );


      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer general ');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      // const customer = await SalesContractDtlModel.aggregate([
      //   {
      //     $match: {
      //       contractDate: {
      //         $gte: new Date(input.fromDate),
      //         $lte: new Date(input.toDate)
      //       },
      //       isDeleted: false,
      //     }
      //   },
      //   {
      //     $lookup: {
      //       from: 'customers',
      //       localField: 'customer',
      //       foreignField: '_id',
      //       as: 'customer_details'
      //     }
      //   },
      //   {
      //     $addFields: {
      //       totalQty: { $sum: '$qty' },
      //       totalAmount: { $sum: '$amount' }
      //     }
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     }
      //   },
      //   {
      //     $group: {
      //       _id: '$customer', // Group by customer ID
      //       customerName: { $first: '$customer_details.name' }, // Retrieve customer name
      //       totalQty: { $sum: '$qty' },
      //       totalAmount: { $sum: '$amount' },
      //       totalContracts: { $sum: 1 } // Count the number of contracts for each customer
      //     }
      //   },
      //   {
      //     $project: {
      //       customerName: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       totalContracts: 1,
      //       _id: 0 // Exclude _id field
      //     }
      //   },

      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.royality_approval !== '' &&
      input.order_status == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand)
    ) {
      console.log('royality approval ');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        royality_approval: royality_approval,
        shipment: false,
        // InHouse: false,
        // invoice:false
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: { $arrayElemAt: ['$currencyData.name', 0] },
            payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
            uom: '$uom',
            totalQty: '$qty',
            totalAmount: '$amount',
            shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
            shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            totalSalesQty: { $sum: '$totalQty' },
            totalSalesAmount: { $sum: '$totalAmount' },
            totalShipmentQty: { $sum: '$shipmentTotalQty' },
            totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: {
            Contractdate: -1,
          },
        },
      ]);

      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.order_status !== '' &&
      input.royality_approval == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('order_status filter ');

      const order_status = input.order_status;

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        shipment: false,
        order_status: order_status,
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: { $arrayElemAt: ['$currencyData.name', 0] },
            payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
            uom: '$uom',
            totalQty: '$qty',
            totalAmount: '$amount',
            shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
            shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            totalSalesQty: { $sum: '$totalQty' },
            totalSalesAmount: { $sum: '$totalAmount' },
            totalShipmentQty: { $sum: '$shipmentTotalQty' },
            totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: {
            Contractdate: -1,
          },
        },
      ]);

      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product general ');

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;

      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // console.log('product general');

      // const total_records = await ProductModel.countDocuments();

      // const product = await ProductModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'product',
      //       as: 'sales_dtl',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       total_sales: {
      //         $size: '$sales_dtl',
      //       },
      //     },
      //   },
      //   // {
      //   //   $project: {
      //   //     name: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     // sales_dtl: {
      //   //     //   $size: '$sales_dtl',
      //   //     // },
      //   //     // salesContract: {
      //   //     //   $first: '$sales_dtl.salesContract',
      //   //     // },
      //   //   },
      //   // },
      //   // {
      //   //   $lookup: {
      //   //     from: 'salescontracts',
      //   //     localField: 'salesContract',
      //   //     foreignField: '_id',
      //   //     as: 'salecontracts',
      //   //   },
      //   // },
      //   // {
      //   //   $project: {
      //   //     sales_dtl: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     name: 1,
      //   //     total_sales: {
      //   //       $size: '$sales_dtl',
      //   //     },
      //   //     // saleContracts: {
      //   //     //   $first: '$salecontracts.contract',
      //   //     // },

      //   //   },
      //   // },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
      // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
      // const result = {
      //   product_groupby: product,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSalecontract
      // };
      // return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('brand general!');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $limit: limit },
        { $skip: skipCount },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // const total_records = await BrandModel.countDocuments();
      // const brandgroup = await BrandModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'brand',
      //       as: 'salecontract',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 },
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       salecontract: {
      //         $size: '$salecontract',
      //       },
      //     },
      //   },

      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
      // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
      // const result = {
      //   brand_groupby: brandgroup,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSaleContractsSum
      // };
      // return result;
    } else if (
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('general filters brand customer product ');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
      ]);

      const productgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },
        {
          $match: filter,
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = productgroupby.map((item: any) => item.qty);
      const totalRate = productgroupby.map((item: any) => item.rate);
      const totalAmount = productgroupby.map((item: any) => item.amount);

      const saleContractDetail1 = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        { $sort: { tran: 1 } },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },

        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: { $arrayElemAt: ['$currencyData.name', 0] },
            payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
            uom: '$uom',
            totalQty: '$qty',
            totalAmount: '$amount',
            shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
            shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            totalSalesQty: { $sum: '$totalQty' },
            totalSalesAmount: { $sum: '$totalAmount' },
            totalShipmentQty: { $sum: '$shipmentTotalQty' },
            totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: {
            Contractdate: -1,
          },
        },
      ]);
      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group customer ');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      // const customer = await SalesContractDtlModel.aggregate([
      //   {
      //     $match: {
      //       contractDate: {
      //         $gte: new Date(input.fromDate),
      //         $lte: new Date(input.toDate),
      //       },
      //       isDeleted: false,
      //       invoice: false,
      //     },
      //   },
      //   {
      //     $match: {
      //       isDeleted: false,
      //       customer: { $in: customerArr },
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'customers',
      //       localField: 'customer',
      //       foreignField: '_id',
      //       as: 'customer_details',
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: { $sum: '$qty' },
      //       totalAmount: { $sum: '$amount' },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 },
      //     },
      //   },
      //   {
      //     $group: {
      //       _id: '$customer', // Group by customer ID
      //       customerName: { $first: '$customer_details.name' }, // Retrieve customer name
      //       totalQty: { $sum: '$qty' },
      //       totalAmount: { $sum: '$amount' },
      //       totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
      //     },
      //   },
      //   {
      //     $project: {
      //       customerName: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       totalContracts: 1,
      //       _id: 0, // Exclude _id field
      //     },
      //   },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);

      // const totalSaleContractsSum = customer.reduce(
      //   (sum, item) => sum + item.totalContracts,
      //   0
      // );

      // const totalQtySum = customer.reduce(
      //   (sum, item) => sum + item.totalQty,
      //   0
      // );
      // const totalAmountSum = customer.reduce(
      //   (sum, item) => sum + item.totalAmount,
      //   0
      // );

      // const result = {
      //   customer_groupby: customer,
      //   total_records: customer.length,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSaleContractsSum,
      // };
      // return result;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to  product group');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      // const total_records = await ProductModel.countDocuments();

      // const product = await SalesContractDtlModel.aggregate([
      //   {
      //     $match: {
      //       contractDate: {
      //         $gte: new Date(input.fromDate),
      //         $lte: new Date(input.toDate),
      //       },
      //       isDeleted: false,
      //       invoice: false,
      //     },
      //   },

      //   {
      //     $match: {
      //       isDeleted: false,
      //       product: { $in: productArr },
      //     },
      //   },

      //   {
      //     $lookup: {
      //       from: 'products',
      //       localField: 'product',
      //       foreignField: '_id',
      //       as: 'productInfo',
      //     },
      //   },
      //   {
      //     $group: {
      //       _id: '$product',
      //       productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
      //       totalContracts: { $sum: 1 },
      //       totalQty: { $sum: '$qty' },
      //       totalAmount: { $sum: '$amount' },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 },
      //     },
      //   },
      //   {
      //     $project: {
      //       productName: 1,
      //       totalContracts: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //     },
      //   },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);

      // const totalSalecontract = product.reduce(
      //   (sum, item) => sum + item.totalContracts,
      //   0
      // );
      // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = product.reduce(
      //   (sum, item) => sum + item.totalAmount,
      //   0
      // );
      // const result = {
      //   product_groupby: product,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSalecontract,
      // };
      // return result;
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('brandgroup brand');
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $limit: limit },
        { $skip: skipCount },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            customerName: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $limit: limit },
        { $skip: skipCount },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('productgroup to customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group to product');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0
    ) {
      console.log('customer to brand');

      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            brandName: {
              $first: '$brandName',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brandgroup to product');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $limit: limit },
        { $skip: skipCount },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('productgroup brand');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },

        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            brandName: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            brandName: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.brand_group == '' &&
      input.product_group == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('customergroup with general filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' product group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },

        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },

        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' brand group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            ProductName: {
              $first: '$productName',
            },
            CustomerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            CustomerName: 1,
            ProductName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            ProductName: {
              $first: '$productName',
            },
            CustomerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            CustomerName: 1,
            ProductName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (input.nonAdm !== '') {
      console.log('nonadm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == '' &&
        input.order_status == ''
      ) {
        console.log('no filter condition execute ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: false,
          shipment: false,
          // InHouse: false,
          // invoice:false
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],

            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              salesContractId: '$salesContract',
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                salesContractId: '$salesContractId',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 1,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              salesContractId: '$_id.salesContractId',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        input.order_status == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;


        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.royality_approval !== '' &&
        input.order_status == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality approval ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          InHouse: false,
          shipment: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.order_status !== '' &&
        input.royality_approval == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('order_status filter ');

        const order_status = input.order_status;

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          shipment: false,
          InHouse: false,
          order_status: order_status,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product general');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;

        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // console.log('product general');

        // const total_records = await ProductModel.countDocuments();

        // const product = await ProductModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'product',
        //       as: 'sales_dtl',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       total_sales: {
        //         $size: '$sales_dtl',
        //       },
        //     },
        //   },
        //   // {
        //   //   $project: {
        //   //     name: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     // sales_dtl: {
        //   //     //   $size: '$sales_dtl',
        //   //     // },
        //   //     // salesContract: {
        //   //     //   $first: '$sales_dtl.salesContract',
        //   //     // },
        //   //   },
        //   // },
        //   // {
        //   //   $lookup: {
        //   //     from: 'salescontracts',
        //   //     localField: 'salesContract',
        //   //     foreignField: '_id',
        //   //     as: 'salecontracts',
        //   //   },
        //   // },
        //   // {
        //   //   $project: {
        //   //     sales_dtl: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     name: 1,
        //   //     total_sales: {
        //   //       $size: '$sales_dtl',
        //   //     },
        //   //     // saleContracts: {
        //   //     //   $first: '$salecontracts.contract',
        //   //     // },

        //   //   },
        //   // },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract
        // };
        // return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product ');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }

        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const productgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: filter,
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = productgroupby.map((item: any) => item.qty);
        const totalRate = productgroupby.map((item: any) => item.rate);
        const totalAmount = productgroupby.map((item: any) => item.amount);

        // console.log("totalamount" , totalAmount)
        const saleContractDetail1 = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          { $sort: { tran: 1 } },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);
        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate),
        //       },
        //       isDeleted: false,
        //       invoice: false,
        //     },
        //   },
        //   {
        //     $match: {
        //       isDeleted: false,
        //       customer: { $in: customerArr },
        //     },
        //   },
        //   {
        //     $lookup: {
        //       from: 'customers',
        //       localField: 'customer',
        //       foreignField: '_id',
        //       as: 'customer_details',
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $group: {
        //       _id: '$customer', // Group by customer ID
        //       customerName: { $first: '$customer_details.name' }, // Retrieve customer name
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' },
        //       totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        //     },
        //   },
        //   {
        //     $project: {
        //       customerName: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       totalContracts: 1,
        //       _id: 0, // Exclude _id field
        //     },
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);

        // const totalSaleContractsSum = customer.reduce(
        //   (sum, item) => sum + item.totalContracts,
        //   0
        // );

        // const totalQtySum = customer.reduce(
        //   (sum, item) => sum + item.totalQty,
        //   0
        // );
        // const totalAmountSum = customer.reduce(
        //   (sum, item) => sum + item.totalAmount,
        //   0
        // );

        // const result = {
        //   customer_groupby: customer,
        //   total_records: customer.length,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum,
        // };
        // return result;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to  product group');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        // const product = await SalesContractDtlModel.aggregate([
        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate),
        //       },
        //       isDeleted: false,
        //       invoice: false,
        //     },
        //   },

        //   {
        //     $match: {
        //       isDeleted: false,
        //       product: { $in: productArr },
        //     },
        //   },

        //   {
        //     $lookup: {
        //       from: 'products',
        //       localField: 'product',
        //       foreignField: '_id',
        //       as: 'productInfo',
        //     },
        //   },
        //   {
        //     $group: {
        //       _id: '$product',
        //       productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
        //       totalContracts: { $sum: 1 },
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       productName: 1,
        //       totalContracts: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //     },
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);

        // const totalSalecontract = product.reduce(
        //   (sum, item) => sum + item.totalContracts,
        //   0
        // );
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce(
        //   (sum, item) => sum + item.totalAmount,
        //   0
        // );
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract,
        // };
        // return result;
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              customerName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('productgroup to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group to product');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer to brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brandgroup to product');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('productgroup brand');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },

          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.brand_group == '' &&
        input.product_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }

        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    } else if (input.Adm !== '') {
      console.log('adm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == '' &&
        input.order_status == ''
      ) {
        console.log('no filter condition execute ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
          shipment: false,
          // InHouse: false,
          // invoice:false
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],

            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              salesContractId: '$salesContract',
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                salesContractId: '$salesContractId',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 1,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              salesContractId: '$_id.salesContractId',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;


        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.royality_approval !== '' &&
        input.order_status == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality approval ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          InHouse: false,
          shipment: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.order_status !== '' &&
        input.royality_approval == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('order_status filter ');

        const order_status = input.order_status;

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          shipment: false,
          InHouse: true,
          order_status: order_status,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product general');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;

        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // console.log('product general');

        // const total_records = await ProductModel.countDocuments();

        // const product = await ProductModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'product',
        //       as: 'sales_dtl',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       total_sales: {
        //         $size: '$sales_dtl',
        //       },
        //     },
        //   },
        //   // {
        //   //   $project: {
        //   //     name: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     // sales_dtl: {
        //   //     //   $size: '$sales_dtl',
        //   //     // },
        //   //     // salesContract: {
        //   //     //   $first: '$sales_dtl.salesContract',
        //   //     // },
        //   //   },
        //   // },
        //   // {
        //   //   $lookup: {
        //   //     from: 'salescontracts',
        //   //     localField: 'salesContract',
        //   //     foreignField: '_id',
        //   //     as: 'salecontracts',
        //   //   },
        //   // },
        //   // {
        //   //   $project: {
        //   //     sales_dtl: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     name: 1,
        //   //     total_sales: {
        //   //       $size: '$sales_dtl',
        //   //     },
        //   //     // saleContracts: {
        //   //     //   $first: '$salecontracts.contract',
        //   //     // },

        //   //   },
        //   // },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract
        // };
        // return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product ');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: true,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const productgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: true,
            },
          },
          {
            $match: filter,
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = productgroupby.map((item: any) => item.qty);
        const totalRate = productgroupby.map((item: any) => item.rate);
        const totalAmount = productgroupby.map((item: any) => item.amount);

        // console.log("totalamount" , totalAmount)
        const saleContractDetail1 = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          { $sort: { tran: 1 } },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: true,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);
        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate),
        //       },
        //       isDeleted: false,
        //       invoice: false,
        //     },
        //   },
        //   {
        //     $match: {
        //       isDeleted: false,
        //       customer: { $in: customerArr },
        //     },
        //   },
        //   {
        //     $lookup: {
        //       from: 'customers',
        //       localField: 'customer',
        //       foreignField: '_id',
        //       as: 'customer_details',
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $group: {
        //       _id: '$customer', // Group by customer ID
        //       customerName: { $first: '$customer_details.name' }, // Retrieve customer name
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' },
        //       totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
        //     },
        //   },
        //   {
        //     $project: {
        //       customerName: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       totalContracts: 1,
        //       _id: 0, // Exclude _id field
        //     },
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);

        // const totalSaleContractsSum = customer.reduce(
        //   (sum, item) => sum + item.totalContracts,
        //   0
        // );

        // const totalQtySum = customer.reduce(
        //   (sum, item) => sum + item.totalQty,
        //   0
        // );
        // const totalAmountSum = customer.reduce(
        //   (sum, item) => sum + item.totalAmount,
        //   0
        // );

        // const result = {
        //   customer_groupby: customer,
        //   total_records: customer.length,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum,
        // };
        // return result;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to  product group');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        // const product = await SalesContractDtlModel.aggregate([
        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate),
        //       },
        //       isDeleted: false,
        //       invoice: false,
        //     },
        //   },

        //   {
        //     $match: {
        //       isDeleted: false,
        //       product: { $in: productArr },
        //     },
        //   },

        //   {
        //     $lookup: {
        //       from: 'products',
        //       localField: 'product',
        //       foreignField: '_id',
        //       as: 'productInfo',
        //     },
        //   },
        //   {
        //     $group: {
        //       _id: '$product',
        //       productName: { $first: { $arrayElemAt: ['$productInfo.name', 0] } },
        //       totalContracts: { $sum: 1 },
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       productName: 1,
        //       totalContracts: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //     },
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);

        // const totalSalecontract = product.reduce(
        //   (sum, item) => sum + item.totalContracts,
        //   0
        // );
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce(
        //   (sum, item) => sum + item.totalAmount,
        //   0
        // );
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract,
        // };
        // return result;
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              customerName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('productgroup to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group to product');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer to brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brandgroup to product');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $limit: limit },
          { $skip: skipCount },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('productgroup brand');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },

          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.brand_group == '' &&
        input.product_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    }
  } catch (err) {
    console.log({ err });
  }
};
export const pending_contract_dtl = async (input: SaleContractReportSchema )=> {
const {
      brand,
      customer,
      product,
      fromDate,
      toDate,
      pageno = 1,
      perPage = 10,
      order_status,
      royality_approval,
      Adm,
      nonAdm,
      isDeleted,
      brand_group,
      customer_group,
      product_group,
    } = input;


    const limit = perPage;
    const skipCount = (pageno - 1) * limit;


    const groupId: any = {};
    const shouldGroup = product_group || brand_group || customer_group;

     if (product_group) groupId.product = '$product';
    if (brand_group) groupId.brand = '$brand';
    if (customer_group) groupId.customer = '$customer';

const matchStage: any = { isDeleted: false, shipment: false };

    if (fromDate && toDate) {
      matchStage.contractDate = {
        $gte: new Date(fromDate),
        $lte: new Date(toDate),
      };
    }


  if (Array.isArray(product) && product.length > 0) {
    matchStage.product = {
    $in: product.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(brand) && brand.length > 0) {
    matchStage.brand = {
    $in: brand.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(customer) && customer.length > 0) {
    matchStage.customer ={
    $in: customer.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Adm) matchStage['InHouse'] = true;
if (nonAdm) matchStage['InHouse'] = false;
     
  const scMatchStage: any = {};
   if (royality_approval == 'true')
        scMatchStage['royality_approval'] = true;
      if (royality_approval == 'false')
        scMatchStage['royality_approval'] = false;

      // const scMatchStage2: any = { isDeleted: false };
      if (order_status == 'confirmed')
        scMatchStage['order_status'] = 'confirmed';
      if (order_status == 'forecast')
        scMatchStage['order_status'] = 'forecast';
if (isDeleted && isDeleted.toString().toLowerCase() === "true") {
  matchStage.isDeleted = true;
}

const basePipeline: any[] = [
  { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },
  

  // --- Shipment Summary: Group shipment qty/amount by contract ---
  {
    $lookup: {
      from: "shipmentdtls",
      let: { salesContractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$salesContractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            totalQty: { $sum: "$qty" },
            totalAmount: { $sum: "$amount" }
          }
        }
      ],
      as: "shipmentSummary"
    }
  },

  // --- Add Shipment Totals (Safely Extracted) ---
  {
    $addFields: {
      shipQty: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalQty", 0] }, 0] },
      shipAmount: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalAmount", 0] }, 0] }
    }
  },

  // --- Joins for Reference Data ---
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  { $unwind: { path: "$customers", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  { $unwind: { path: "$products", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  { $unwind: { path: "$brands", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
        from: "salescontracts",
        localField: "salesContract",
        foreignField: "_id",
        as: "salesContracts"
    }
  },
  { $unwind: { path: "$salesContracts", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  { $unwind: { path: "$currencies", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  { $unwind: { path: "$paymentTerms", preserveNullAndEmptyArrays: false } },

  // --- Prepare for Final Grouping ---
  {
    $project: {
      contract: "$salesContracts.contract",
      po: "$salesContracts.po",
      poDate: "$salesContracts.poDate",
      contractDate: "$contractDate",
      customers: "$customers.name",
      brands: "$brands.name",
      products: "$products.name",
      currency: "$currencies.name",
      paymentTerm: "$paymentTerms.name",
      uom: "$uom",
      salesQty: "$qty",
      salesAmount: "$amount",
      shipQty: 1,
      shipAmount: 1
    }
  },

  // --- Group by Unique Sales Contract Detail ---
  {
    $group: {
      _id: {
        contract: "$contract",
        po: "$po",
        poDate: "$poDate",
        contractDate: "$contractDate",
        customers: "$customers",
        products: "$products",
        brands: "$brands",
        currency: "$currency",
        paymentTerm: "$paymentTerm",
        uom: "$uom"
      },
      totalSalesQty: { $sum: "$salesQty" },
      totalSalesAmount: { $sum: "$salesAmount" },
      totalShipmentQty: { $sum: "$shipQty" },
      totalShipmentAmount: { $sum: "$shipAmount" }
    }
  },


  {
    $project: {
      _id:0,
      contract: "$_id.contract",
      po: "$_id.po",
      poDate: "$_id.poDate",
      contractDate: "$_id.contractDate",
      customer: "$_id.customers",
      product: "$_id.products",
      brand: "$_id.brands",
      currency: "$_id.currency",
      payment_term: "$_id.paymentTerm",
      uom: "$_id.uom",
      totalSalesQty: 1,
      totalSalesAmount: 1,
      totalShipmentQty: 1,
      totalShipmentAmount: 1,
      remainingQty: { $subtract: ["$totalSalesQty", "$totalShipmentQty"] },
      remainingAmount: { $subtract: ["$totalSalesAmount", "$totalShipmentAmount"] }
    }
  },

  // --- Sort Latest First ---
  { $sort: { contractDate: -1 } }
];



const basePipelineSummary: any[] = [
   { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },

  // --- Shipment Summary: Group shipment qty/amount by contract ---
  {
    $lookup: {
      from: "shipmentdtls",
      let: { salesContractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$salesContractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            totalQty: { $sum: "$qty" },
            totalAmount: { $sum: "$amount" }
          }
        }
      ],
      as: "shipmentSummary"
    }
  },

  // --- Add Shipment Totals (Safely Extracted) ---
  {
    $addFields: {
      shipQty: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalQty", 0] }, 0] },
      shipAmount: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalAmount", 0] }, 0] }
    }
  },

  // --- Joins for Reference Data ---
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  { $unwind: { path: "$customers", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  { $unwind: { path: "$products", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  { $unwind: { path: "$brands", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContracts"
    }
  },
  { $unwind: { path: "$salesContracts", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  { $unwind: { path: "$currencies", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  { $unwind: { path: "$paymentTerms", preserveNullAndEmptyArrays: false } },

  // --- Prepare for Final Grouping ---
  {
    $project: {
      contract: "$salesContracts.contract",
      po: "$salesContracts.po",
      poDate: "$salesContracts.poDate",
      contractDate: "$contractDate",
      customers: "$customers.name",
      brands: "$brands.name",
      products: "$products.name",
      currency: "$currencies.name",
      paymentTerm: "$paymentTerms.name",
      uom: "$uom",
      salesQty: "$qty",
      salesAmount: "$amount",
      shipQty: 1,
      shipAmount: 1
    }
  },

  // --- Group by Unique Sales Contract Detail ---
  {
    $group: {
      _id: {
        contract: "$contract",
        po: "$po",
        poDate: "$poDate",
        contractDate: "$contractDate",
        customers: "$customers",
        products: "$products",
        brands: "$brands",
        currency: "$currency",
        paymentTerm: "$paymentTerm",
        uom: "$uom"
      },
      totalSalesQty: { $sum: "$salesQty" },
      totalSalesAmount: { $sum: "$salesAmount" },
      totalShipmentQty: { $sum: "$shipQty" },
      totalShipmentAmount: { $sum: "$shipAmount" }
    }
  },

  // --- Final Shape + Remaining Calculation ---
  {
    $project: {
      _id:0,
      contract: "$_id.contract",
      po: "$_id.po",
      poDate: "$_id.poDate",
      contractDate: "$_id.contractDate",
      customer: "$_id.customers",
      product: "$_id.products",
      brand: "$_id.brands",
      currency: "$_id.currency",
      payment_term: "$_id.paymentTerm",
      uom: "$_id.uom",
      totalSalesQty: 1,
      totalSalesAmount: 1,
      totalShipmentQty: 1,
      totalShipmentAmount: 1,
      remainingQty: { $subtract: ["$totalSalesQty", "$totalShipmentQty"] },
      remainingAmount: { $subtract: ["$totalSalesAmount", "$totalShipmentAmount"] }
    }
  },

  // --- Sort Latest First ---
  { $sort: { contractDate: -1 } }
];

const sortStage = { $sort: { totalSalescontractQty: -1 } };

const groupStage = {
  $group: {
  _id: groupId,
  product: { $first: '$product' }, 
  brand: { $first: '$brand' }, 
  customer: { $first: '$customer' },
  totalSalescontract: { $sum: 1 },
  totalSalescontractQty:{$sum:"$totalSalesQty"},
  totalSalescontractAmount:{$sum:"$totalSalesAmount"},
  totalShipmentQty:{$sum:"$totalShipmentQty"},
  totalShipmentAmount:{$sum:"$totalShipmentAmount"}, 
  totalRemainingQty: {$sum: "$remainingQty"},
  totalRemainingAmount: {$sum: "$remainingAmount"},
}
}
const groupStageSummary = {
   $group: {
  _id: '',
  // product: { $first: '$product' }, 
  // brand: { $first: '$brand' }, 
  // customer: { $first: '$customer' },
  totalSalescontract: { $sum: 1 },
  totalSalescontractQty:{$sum:"$totalSalesQty"},
  totalSalescontractAmount:{$sum:"$totalSalesAmount"},
  totalShipmentQty:{$sum:"$totalShipmentQty"},
  totalShipmentAmount:{$sum:"$totalShipmentAmount"}, 
  totalRemainingQty: {$sum: "$remainingQty"},
  totalRemainingAmount: {$sum: "$remainingAmount"},
  
}
}

 // If grouping is not required, we can skip the group stage
      const dataPipeline = shouldGroup
        ? [...basePipeline, groupStage, sortStage, { $skip: skipCount }, { $limit: limit }]
        : [...basePipeline, { $skip: skipCount }, { $limit: limit }]

      // Count pipeline for total records
      const countPipeline = shouldGroup
        ? [...basePipeline, groupStage, { $count: 'totalRecords' }]
        : [...basePipeline, { $count: 'totalRecords' }];


const summaryPipeline = shouldGroup
        ? [...basePipelineSummary, groupStageSummary]
        : [
          ...basePipelineSummary,
          {
            $group: {
              _id: null,
              totalSalescontractQty: {
                $sum: "$totalSalesQty"
              },
              totalSalescontractAmount: {
                $sum: "$totalSalesAmount"
              },
                totalShipmentQty:{$sum:"$totalShipmentQty"},
              totalShipmentAmount:{$sum:"$totalShipmentAmount"},
              totalRemainingQty: {$sum: "$remainingQty"},
              totalRemainingAmount: {$sum: "$remainingAmount"},
              totalSalescontract:{
                $sum:1
              },
            
            
            },
          },
        ];
  // Executing the pipelines in parallel
      const [salesdtl, totalResult, summaryResult] = await Promise.all([
        SalesContractDtlModel.aggregate(dataPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(countPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(summaryPipeline, { allowDiskUse: true }),
      ]);

 const totalRecords = totalResult?.[0]?.totalRecords || 0;
      const summary = summaryResult?.[0] || {
        totalSalescontractQty: 0, 
        totalSalescontractAmount: 0,
        totalSalescontract: 0,
        totalShipmentQty:0,
        totalShipmentAmount: 0,
        totalRemainingQty: 0,
        totalRemainingAmount: 0,

        
      };
      return {
        salesdtl,
        summary,
        pagination: {
          page: pageno,
          perPage,
          totalRecords,
          totalPages: Math.ceil(totalRecords / perPage),
        },
      };

  }



export const pending_contract_dtlPrint_old = async (
  input: SaleContractReportPrintSchema
) => {
  try {
    if (
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      input.order_status == ''
    ) {
      console.log('no filter condition execute ');

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        shipment: false,
        // InHouse: false,
        // invoice:false
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        {
          $sort: {
            Contractdate: -1,
          },
        },
      ]);




        const saleContractDetail = await SalesContractDtlModel.aggregate([
  { $match: where },

  // Lookup related data
  {
    $lookup: {
      from: 'customers',
      localField: 'customer',
      foreignField: '_id',
      as: 'customer_details',
    },
  },
  {
    $lookup: {
      from: 'products',
      localField: 'product',
      foreignField: '_id',
      as: 'product_dtl',
    },
  },
  {
    $lookup: {
      from: 'brands',
      localField: 'brand',
      foreignField: '_id',
      as: 'branddtl',
    },
  },
  {
    $lookup: {
      from: 'salescontracts',
      localField: 'salesContract',
      foreignField: '_id',
      as: 'salesContractData',
    },
  },
  {
    $unwind: { path: '$customer_details', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$product_dtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$branddtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$salesContractData', preserveNullAndEmptyArrays: true },
  },

  // Fixed shipment lookup using grouping inside pipeline
  {
    $lookup: {
      from: 'shipmentdtls',
      let: { salesContractId: '$salesContract' },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ['$salesContract', '$$salesContractId'] },
                { $eq: ['$isDeleted', false] },
              ],
            },
          },
        },
        {
          $group: {
            _id: null,
            shipmentTotalQty: { $sum: '$qty' },
            shipmentTotalAmount: { $sum: '$amount' },
          },
        },
      ],
      as: 'shipmentSummary',
    },
  },

  // Add shipment totals safely
  {
    $addFields: {
      shipmentTotalQty: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalQty', 0] }, 0],
      },
      shipmentTotalAmount: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalAmount', 0] }, 0],
      },
    },
  },

  // Lookup currency and payment terms
  {
    $lookup: {
      from: 'currencies',
      localField: 'currency',
      foreignField: '_id',
      as: 'currencyData',
    },
  },
  {
    $lookup: {
      from: 'paymentterms',
      localField: 'salesContractData.paymentTerm',
      foreignField: '_id',
      as: 'paymentTermData',
    },
  },

  // Project required fields
  {
    $project: {
      salesContractId: '$salesContract',
      contract: '$salesContractData.contract',
      po: '$salesContractData.po',
      podate: '$salesContractData.poDate',
      Contractdate: '$salesContractData.contractDate',
      customer: '$customer_details.name',
      product: '$product_dtl.name',
      brand: '$branddtl.name',
      currency: { $arrayElemAt: ['$currencyData.name', 0] },
      payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
      uom: '$uom',
      totalQty: '$qty',
      totalAmount: '$amount',
      shipmentTotalQty: 1,
      shipmentTotalAmount: 1,
    },
  },

  // Group by all unique fields
  {
    $group: {
      _id: {
        contract: '$contract',
        po: '$po',
        podate: '$podate',
        Contractdate: '$Contractdate',
        customer: '$customer',
        product: '$product',
        brand: '$brand',
        currency: '$currency',
        payment_term: '$payment_term',
        uom: '$uom',
        salesContractId: '$salesContractId',
      },
      totalSalesQty: { $sum: '$totalQty' },
      totalSalesAmount: { $sum: '$totalAmount' },
      totalShipmentQty: { $sum: '$shipmentTotalQty' },
      totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
    },
  },

  // Final projection with remaining calculation
  {
    $project: {
      _id: 0,
      contract: '$_id.contract',
      po: '$_id.po',
      podate: '$_id.podate',
      Contractdate: '$_id.Contractdate',
      customer: '$_id.customer',
      product: '$_id.product',
      brand: '$_id.brand',
      currency: '$_id.currency',
      payment_term: '$_id.payment_term',
      uom: '$_id.uom',
      salesContractId: '$_id.salesContractId',
      totalSalesQty: 1,
      totalShipmentQty: 1,
      totalSalesAmount: 1,
      totalShipmentAmount: 1,
      remainingQty: {
        $subtract: ['$totalSalesQty', '$totalShipmentQty'],
      },
      remainingAmount: {
        $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
      },
    },
  },

  // Filter to show only records with remaining quantity
  {
    $match: {
      remainingQty: { $gt: 0 },
    },
  },

  // Sorting
  {
    $sort: {
      Contractdate: -1,
    },
  },
]);

      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer general');

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.royality_approval !== '' &&
      input.order_status == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand)
    ) {
      console.log('royality approval ');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        royality_approval: royality_approval,
        shipment: false,
        // InHouse: false,
        // invoice:false
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: { $arrayElemAt: ['$currencyData.name', 0] },
            payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
            uom: '$uom',
            totalQty: '$qty',
            totalAmount: '$amount',
            shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
            shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            totalSalesQty: { $sum: '$totalQty' },
            totalSalesAmount: { $sum: '$totalAmount' },
            totalShipmentQty: { $sum: '$shipmentTotalQty' },
            totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ]);

      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.order_status !== '' &&
      input.royality_approval == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('order_status filter ');

      const order_status = input.order_status;

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        shipment: false,
        order_status: order_status,
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false
                }
              }
            ]
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: { $arrayElemAt: ['$currencyData.name', 0] },
            payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
            uom: '$uom',
            totalQty: '$qty',
            totalAmount: '$amount',
            shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
            shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            totalSalesQty: { $sum: '$totalQty' },
            totalSalesAmount: { $sum: '$totalAmount' },
            totalShipmentQty: { $sum: '$shipmentTotalQty' },
            totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: {
            Contractdate: -1,
          },
        },
      ]);

      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product general');

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;

      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // console.log('product general');

      // const total_records = await ProductModel.countDocuments();

      // const product = await ProductModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'product',
      //       as: 'sales_dtl',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       total_sales: {
      //         $size: '$sales_dtl',
      //       },
      //     },
      //   },
      //   // {
      //   //   $project: {
      //   //     name: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     // sales_dtl: {
      //   //     //   $size: '$sales_dtl',
      //   //     // },
      //   //     // salesContract: {
      //   //     //   $first: '$sales_dtl.salesContract',
      //   //     // },
      //   //   },
      //   // },
      //   // {
      //   //   $lookup: {
      //   //     from: 'salescontracts',
      //   //     localField: 'salesContract',
      //   //     foreignField: '_id',
      //   //     as: 'salecontracts',
      //   //   },
      //   // },
      //   // {
      //   //   $project: {
      //   //     sales_dtl: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     name: 1,
      //   //     total_sales: {
      //   //       $size: '$sales_dtl',
      //   //     },
      //   //     // saleContracts: {
      //   //     //   $first: '$salecontracts.contract',
      //   //     // },

      //   //   },
      //   // },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
      // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
      // const result = {
      //   product_groupby: product,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSalecontract
      // };
      // return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      input.order_status == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('brand general!');

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // const total_records = await BrandModel.countDocuments();
      // const brandgroup = await BrandModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'brand',
      //       as: 'salecontract',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 },
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       salecontract: {
      //         $size: '$salecontract',
      //       },
      //     },
      //   },

      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
      // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
      // const result = {
      //   brand_groupby: brandgroup,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSaleContractsSum
      // };
      // return result;
    } else if (
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('general filters brand customer product ');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            order_status: '$salesContractData.order_status',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $first: '$currencyData.name',
            },
            payment_term: {
              $first: '$paymentTermData.name',
            },
            uom: '$uom',
            totalQty: {
              $sum: '$qty',
            },
            total_amount: {
              $sum: '$amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
              order_status: '$order_status',
            },
            totalSalesQty: {
              $sum: '$totalQty',
            },
            totalSalesAmount: {
              $sum: '$total_amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            order_status: '$_id.order_status',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentAmount: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
      ]);

      const productgroupby = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },
        {
          $match: filter,
        },
        {
          $group: {
            _id: 'null',
            rate: {
              $sum: '$rate',
            },
            amount: {
              $sum: '$amount',
            },
            qty: {
              $sum: '$qty',
            },
          },
        },
      ]);

      const totalQty = productgroupby.map((item: any) => item.qty);
      const totalRate = productgroupby.map((item: any) => item.rate);
      const totalAmount = productgroupby.map((item: any) => item.amount);

      // console.log("totalamount" , totalAmount)
      const saleContractDetail1 = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salecontract_dtl',
            pipeline: [
              {
                $lookup: {
                  from: 'paymentterms',
                  localField: 'paymentTerm',
                  foreignField: '_id',
                  as: 'payment_term',
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customers',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currency_dtl',
          },
        },
        { $sort: { tran: 1 } },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: false,
          },
        },

        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: { $arrayElemAt: ['$currencyData.name', 0] },
            payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
            uom: '$uom',
            totalQty: '$qty',
            totalAmount: '$amount',
            shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
            shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            totalSalesQty: { $sum: '$totalQty' },
            totalSalesAmount: { $sum: '$totalAmount' },
            totalShipmentQty: { $sum: '$shipmentTotalQty' },
            totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        {
          $sort: {
            Contractdate: -1,
          },
        },
      ]);
      const totalSalesQty = total_record.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const totalSalesAmount = total_record.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        totalSalesQty: totalSalesQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        totalSalesAmount: totalSalesAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group customer ');

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      //   {
      //     $match: {
      //       contractDate: {
      //         $gte: new Date(input.fromDate),
      //         $lte: new Date(input.toDate),
      //       },
      //       isDeleted: false,
      //       invoice: false,
      //     },
      //   },
      //   {
      //     $match: {
      //       isDeleted: false,
      //       customer: { $in: customerArr },
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'customers',
      //       localField: 'customer',
      //       foreignField: '_id',
      //       as: 'customer_details',
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: { $sum: '$qty' },
      //       totalAmount: { $sum: '$amount' },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 },
      //     },
      //   },
      //   {
      //     $group: {
      //       _id: '$customer', // Group by customer ID
      //       customerName: { $first: '$customer_details.name' }, // Retrieve customer name
      //       totalQty: { $sum: '$qty' },
      //       totalAmount: { $sum: '$amount' },
      //       totalContracts: { $sum: 1 }, // Count the number of contracts for each customer
      //     },
      //   },
      //   {
      //     $project: {
      //       customerName: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       totalContracts: 1,
      //       _id: 0, // Exclude _id field
      //     },
      //   },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);

      // const totalSaleContractsSum = customer.reduce(
      //   (sum, item) => sum + item.totalContracts,
      //   0
      // );

      // const totalQtySum = customer.reduce(
      //   (sum, item) => sum + item.totalQty,
      //   0
      // );
      // const totalAmountSum = customer.reduce(
      //   (sum, item) => sum + item.totalAmount,
      //   0
      // );

      // const result = {
      //   customer_groupby: customer,
      //   total_records: customer.length,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSaleContractsSum,
      // };
      // return result;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to  product group');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('brandgroup brand');
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            totalSalesQty: 1,
            customerName: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('productgroup to customer');
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group to product');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0
    ) {
      console.log('customer to brand');

      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            brandName: {
              $first: '$brandName',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brandgroup to product');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.order_status == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('productgroup brand');

      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },

        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            brandName: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            totalSalesQty: 1,
            brandName: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.brand_group == '' &&
      input.product_group == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('customergroup with general filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },

        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            productName: {
              $first: '$productName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            productName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' product group with filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },

        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$product_details',
            preserveNullAndEmptyArrays: true,
          },
        },

        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: {
              $first: '$product_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: {
              $first: '$productName',
            },
            brandName: {
              $first: '$brandName',
            },
            customerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        input.order_status !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' brand group with filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      if (input.order_status !== '') {
        const order_status = input.order_status;

        where.order_status = order_status;
        (filter_records.order_status = order_status),
          (filter.order_status = order_status);
      }
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            ProductName: {
              $first: '$productName',
            },
            CustomerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            CustomerName: 1,
            ProductName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            BrandName: {
              $first: '$brand_details.name',
            },
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            totalSalesQty: {
              $sum: '$qty',
            },
            totalSalesAmount: {
              $sum: '$amount',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            BrandName: {
              $first: '$BrandName',
            },
            ProductName: {
              $first: '$productName',
            },
            CustomerName: {
              $first: '$customerName',
            },
            totalSalesQty: {
              $first: '$totalSalesQty',
            },
            totalSalesAmount: {
              $first: '$totalSalesAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            BrandName: 1,
            CustomerName: 1,
            ProductName: 1,
            totalSalesQty: 1,
            totalShipmentQty: 1,
            totalSalesAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalSalesQty', '$totalShipmentQty'],
            },
            remainingAmount: {
              $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        {
          $sort: {
            remainingQty: -1,
          },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalSalesAmount = total_records.reduce(
        (sum, item) => sum + item.totalSalesAmount,
        0
      );
      const totalSalesQty = total_records.reduce(
        (sum, item) => sum + item.totalSalesQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalSalesAmount: totalSalesAmount,
        totalSalesQty: totalSalesQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (input.nonAdm !== '') {
      console.log('nonadm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == '' &&
        input.order_status == ''
      ) {
        console.log('no filter condition execute ');

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: false,
          shipment: false,
          // InHouse: false,
          // invoice:false
        };
          const total_record = await SalesContractDtlModel.aggregate([
  { $match: where },

  // Lookup related data
  {
    $lookup: {
      from: 'customers',
      localField: 'customer',
      foreignField: '_id',
      as: 'customer_details',
    },
  },
  {
    $lookup: {
      from: 'products',
      localField: 'product',
      foreignField: '_id',
      as: 'product_dtl',
    },
  },
  {
    $lookup: {
      from: 'brands',
      localField: 'brand',
      foreignField: '_id',
      as: 'branddtl',
    },
  },
  {
    $lookup: {
      from: 'salescontracts',
      localField: 'salesContract',
      foreignField: '_id',
      as: 'salesContractData',
    },
  },
  {
    $unwind: { path: '$customer_details', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$product_dtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$branddtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$salesContractData', preserveNullAndEmptyArrays: true },
  },

  // Fixed shipment lookup using grouping inside pipeline
  {
    $lookup: {
      from: 'shipmentdtls',
      let: { salesContractId: '$salesContract' },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ['$salesContract', '$$salesContractId'] },
                { $eq: ['$isDeleted', false] },
              ],
            },
          },
        },
        {
          $group: {
            _id: null,
            shipmentTotalQty: { $sum: '$qty' },
            shipmentTotalAmount: { $sum: '$amount' },
          },
        },
      ],
      as: 'shipmentSummary',
    },
  },

  // Add shipment totals safely
  {
    $addFields: {
      shipmentTotalQty: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalQty', 0] }, 0],
      },
      shipmentTotalAmount: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalAmount', 0] }, 0],
      },
    },
  },

  // Lookup currency and payment terms
  {
    $lookup: {
      from: 'currencies',
      localField: 'currency',
      foreignField: '_id',
      as: 'currencyData',
    },
  },
  {
    $lookup: {
      from: 'paymentterms',
      localField: 'salesContractData.paymentTerm',
      foreignField: '_id',
      as: 'paymentTermData',
    },
  },

  // Project required fields
  {
    $project: {
      salesContractId: '$salesContract',
      contract: '$salesContractData.contract',
      po: '$salesContractData.po',
      podate: '$salesContractData.poDate',
      Contractdate: '$salesContractData.contractDate',
      customer: '$customer_details.name',
      product: '$product_dtl.name',
      brand: '$branddtl.name',
      currency: { $arrayElemAt: ['$currencyData.name', 0] },
      payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
      uom: '$uom',
      totalQty: '$qty',
      totalAmount: '$amount',
      shipmentTotalQty: 1,
      shipmentTotalAmount: 1,
    },
  },

  // Group by all unique fields
  {
    $group: {
      _id: {
        contract: '$contract',
        po: '$po',
        podate: '$podate',
        Contractdate: '$Contractdate',
        customer: '$customer',
        product: '$product',
        brand: '$brand',
        currency: '$currency',
        payment_term: '$payment_term',
        uom: '$uom',
        salesContractId: '$salesContractId',
      },
      totalSalesQty: { $sum: '$totalQty' },
      totalSalesAmount: { $sum: '$totalAmount' },
      totalShipmentQty: { $sum: '$shipmentTotalQty' },
      totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
    },
  },

  // Final projection with remaining calculation
  {
    $project: {
      _id: 0,
      contract: '$_id.contract',
      po: '$_id.po',
      podate: '$_id.podate',
      Contractdate: '$_id.Contractdate',
      customer: '$_id.customer',
      product: '$_id.product',
      brand: '$_id.brand',
      currency: '$_id.currency',
      payment_term: '$_id.payment_term',
      uom: '$_id.uom',
      salesContractId: '$_id.salesContractId',
      totalSalesQty: 1,
      totalShipmentQty: 1,
      totalSalesAmount: 1,
      totalShipmentAmount: 1,
      remainingQty: {
        $subtract: ['$totalSalesQty', '$totalShipmentQty'],
      },
      remainingAmount: {
        $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
      },
    },
  },

  // Filter to show only records with remaining quantity
  {
    $match: {
      remainingQty: { $gt: 0 },
    },
  },

  // Sorting
  {
    $sort: {
      Contractdate: -1,
    },
  },
]);

              const saleContractDetail = await SalesContractDtlModel.aggregate([
  { $match: where },

  // Lookup related data
  {
    $lookup: {
      from: 'customers',
      localField: 'customer',
      foreignField: '_id',
      as: 'customer_details',
    },
  },
  {
    $lookup: {
      from: 'products',
      localField: 'product',
      foreignField: '_id',
      as: 'product_dtl',
    },
  },
  {
    $lookup: {
      from: 'brands',
      localField: 'brand',
      foreignField: '_id',
      as: 'branddtl',
    },
  },
  {
    $lookup: {
      from: 'salescontracts',
      localField: 'salesContract',
      foreignField: '_id',
      as: 'salesContractData',
    },
  },
  {
    $unwind: { path: '$customer_details', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$product_dtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$branddtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$salesContractData', preserveNullAndEmptyArrays: true },
  },

  // Fixed shipment lookup using grouping inside pipeline
  {
    $lookup: {
      from: 'shipmentdtls',
      let: { salesContractId: '$salesContract' },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ['$salesContract', '$$salesContractId'] },
                { $eq: ['$isDeleted', false] },
              ],
            },
          },
        },
        {
          $group: {
            _id: null,
            shipmentTotalQty: { $sum: '$qty' },
            shipmentTotalAmount: { $sum: '$amount' },
          },
        },
      ],
      as: 'shipmentSummary',
    },
  },

  // Add shipment totals safely
  {
    $addFields: {
      shipmentTotalQty: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalQty', 0] }, 0],
      },
      shipmentTotalAmount: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalAmount', 0] }, 0],
      },
    },
  },

  // Lookup currency and payment terms
  {
    $lookup: {
      from: 'currencies',
      localField: 'currency',
      foreignField: '_id',
      as: 'currencyData',
    },
  },
  {
    $lookup: {
      from: 'paymentterms',
      localField: 'salesContractData.paymentTerm',
      foreignField: '_id',
      as: 'paymentTermData',
    },
  },

  // Project required fields
  {
    $project: {
      salesContractId: '$salesContract',
      contract: '$salesContractData.contract',
      po: '$salesContractData.po',
      podate: '$salesContractData.poDate',
      Contractdate: '$salesContractData.contractDate',
      customer: '$customer_details.name',
      product: '$product_dtl.name',
      brand: '$branddtl.name',
      currency: { $arrayElemAt: ['$currencyData.name', 0] },
      payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
      uom: '$uom',
      totalQty: '$qty',
      totalAmount: '$amount',
      shipmentTotalQty: 1,
      shipmentTotalAmount: 1,
    },
  },

  // Group by all unique fields
  {
    $group: {
      _id: {
        contract: '$contract',
        po: '$po',
        podate: '$podate',
        Contractdate: '$Contractdate',
        customer: '$customer',
        product: '$product',
        brand: '$brand',
        currency: '$currency',
        payment_term: '$payment_term',
        uom: '$uom',
        salesContractId: '$salesContractId',
      },
      totalSalesQty: { $sum: '$totalQty' },
      totalSalesAmount: { $sum: '$totalAmount' },
      totalShipmentQty: { $sum: '$shipmentTotalQty' },
      totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
    },
  },

  // Final projection with remaining calculation
  {
    $project: {
      _id: 0,
      contract: '$_id.contract',
      po: '$_id.po',
      podate: '$_id.podate',
      Contractdate: '$_id.Contractdate',
      customer: '$_id.customer',
      product: '$_id.product',
      brand: '$_id.brand',
      currency: '$_id.currency',
      payment_term: '$_id.payment_term',
      uom: '$_id.uom',
      salesContractId: '$_id.salesContractId',
      totalSalesQty: 1,
      totalShipmentQty: 1,
      totalSalesAmount: 1,
      totalShipmentAmount: 1,
      remainingQty: {
        $subtract: ['$totalSalesQty', '$totalShipmentQty'],
      },
      remainingAmount: {
        $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
      },
    },
  },

  // Filter to show only records with remaining quantity
  {
    $match: {
      remainingQty: { $gt: 0 },
    },
  },

  // Sorting
  {
    $sort: {
      Contractdate: -1,
    },
  },
]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        input.order_status == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general');

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.royality_approval !== '' &&
        input.order_status == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality approval ');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          InHouse: false,
          shipment: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.order_status !== '' &&
        input.royality_approval == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('order_status filter ');

        const order_status = input.order_status;

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          shipment: false,
          InHouse: false,
          order_status: order_status,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product general');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;

        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // console.log('product general');

        // const total_records = await ProductModel.countDocuments();

        // const product = await ProductModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'product',
        //       as: 'sales_dtl',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       total_sales: {
        //         $size: '$sales_dtl',
        //       },
        //     },
        //   },
        //   // {
        //   //   $project: {
        //   //     name: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     // sales_dtl: {
        //   //     //   $size: '$sales_dtl',
        //   //     // },
        //   //     // salesContract: {
        //   //     //   $first: '$sales_dtl.salesContract',
        //   //     // },
        //   //   },
        //   // },
        //   // {
        //   //   $lookup: {
        //   //     from: 'salescontracts',
        //   //     localField: 'salesContract',
        //   //     foreignField: '_id',
        //   //     as: 'salecontracts',
        //   //   },
        //   // },
        //   // {
        //   //   $project: {
        //   //     sales_dtl: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     name: 1,
        //   //     total_sales: {
        //   //       $size: '$sales_dtl',
        //   //     },
        //   //     // saleContracts: {
        //   //     //   $first: '$salecontracts.contract',
        //   //     // },

        //   //   },
        //   // },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract
        // };
        // return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product ');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const productgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: filter,
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = productgroupby.map((item: any) => item.qty);
        const totalRate = productgroupby.map((item: any) => item.rate);
        const totalAmount = productgroupby.map((item: any) => item.amount);

        // console.log("totalamount" , totalAmount)
        const saleContractDetail1 = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },

          { $sort: { tran: 1 } },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);
        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to  product group');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              customerName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('productgroup to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group to product');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer to brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brandgroup to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('productgroup brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },

          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.brand_group == '' &&
        input.product_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    } else if (input.Adm !== '') {
      console.log('adm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == '' &&
        input.order_status == ''
      ) {
        console.log('no filter condition execute ');

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
          shipment: false,
          // InHouse: false,
          // invoice:false
        };
               const total_record = await SalesContractDtlModel.aggregate([
  { $match: where },

  // Lookup related data
  {
    $lookup: {
      from: 'customers',
      localField: 'customer',
      foreignField: '_id',
      as: 'customer_details',
    },
  },
  {
    $lookup: {
      from: 'products',
      localField: 'product',
      foreignField: '_id',
      as: 'product_dtl',
    },
  },
  {
    $lookup: {
      from: 'brands',
      localField: 'brand',
      foreignField: '_id',
      as: 'branddtl',
    },
  },
  {
    $lookup: {
      from: 'salescontracts',
      localField: 'salesContract',
      foreignField: '_id',
      as: 'salesContractData',
    },
  },
  {
    $unwind: { path: '$customer_details', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$product_dtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$branddtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$salesContractData', preserveNullAndEmptyArrays: true },
  },

  // Fixed shipment lookup using grouping inside pipeline
  {
    $lookup: {
      from: 'shipmentdtls',
      let: { salesContractId: '$salesContract' },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ['$salesContract', '$$salesContractId'] },
                { $eq: ['$isDeleted', false] },
              ],
            },
          },
        },
        {
          $group: {
            _id: null,
            shipmentTotalQty: { $sum: '$qty' },
            shipmentTotalAmount: { $sum: '$amount' },
          },
        },
      ],
      as: 'shipmentSummary',
    },
  },

  // Add shipment totals safely
  {
    $addFields: {
      shipmentTotalQty: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalQty', 0] }, 0],
      },
      shipmentTotalAmount: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalAmount', 0] }, 0],
      },
    },
  },

  // Lookup currency and payment terms
  {
    $lookup: {
      from: 'currencies',
      localField: 'currency',
      foreignField: '_id',
      as: 'currencyData',
    },
  },
  {
    $lookup: {
      from: 'paymentterms',
      localField: 'salesContractData.paymentTerm',
      foreignField: '_id',
      as: 'paymentTermData',
    },
  },

  // Project required fields
  {
    $project: {
      salesContractId: '$salesContract',
      contract: '$salesContractData.contract',
      po: '$salesContractData.po',
      podate: '$salesContractData.poDate',
      Contractdate: '$salesContractData.contractDate',
      customer: '$customer_details.name',
      product: '$product_dtl.name',
      brand: '$branddtl.name',
      currency: { $arrayElemAt: ['$currencyData.name', 0] },
      payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
      uom: '$uom',
      totalQty: '$qty',
      totalAmount: '$amount',
      shipmentTotalQty: 1,
      shipmentTotalAmount: 1,
    },
  },

  // Group by all unique fields
  {
    $group: {
      _id: {
        contract: '$contract',
        po: '$po',
        podate: '$podate',
        Contractdate: '$Contractdate',
        customer: '$customer',
        product: '$product',
        brand: '$brand',
        currency: '$currency',
        payment_term: '$payment_term',
        uom: '$uom',
        salesContractId: '$salesContractId',
      },
      totalSalesQty: { $sum: '$totalQty' },
      totalSalesAmount: { $sum: '$totalAmount' },
      totalShipmentQty: { $sum: '$shipmentTotalQty' },
      totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
    },
  },

  // Final projection with remaining calculation
  {
    $project: {
      _id: 0,
      contract: '$_id.contract',
      po: '$_id.po',
      podate: '$_id.podate',
      Contractdate: '$_id.Contractdate',
      customer: '$_id.customer',
      product: '$_id.product',
      brand: '$_id.brand',
      currency: '$_id.currency',
      payment_term: '$_id.payment_term',
      uom: '$_id.uom',
      salesContractId: '$_id.salesContractId',
      totalSalesQty: 1,
      totalShipmentQty: 1,
      totalSalesAmount: 1,
      totalShipmentAmount: 1,
      remainingQty: {
        $subtract: ['$totalSalesQty', '$totalShipmentQty'],
      },
      remainingAmount: {
        $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
      },
    },
  },

  // Filter to show only records with remaining quantity
  {
    $match: {
      remainingQty: { $gt: 0 },
    },
  },

  // Sorting
  {
    $sort: {
      Contractdate: -1,
    },
  },
]);

              const saleContractDetail = await SalesContractDtlModel.aggregate([
  { $match: where },

  // Lookup related data
  {
    $lookup: {
      from: 'customers',
      localField: 'customer',
      foreignField: '_id',
      as: 'customer_details',
    },
  },
  {
    $lookup: {
      from: 'products',
      localField: 'product',
      foreignField: '_id',
      as: 'product_dtl',
    },
  },
  {
    $lookup: {
      from: 'brands',
      localField: 'brand',
      foreignField: '_id',
      as: 'branddtl',
    },
  },
  {
    $lookup: {
      from: 'salescontracts',
      localField: 'salesContract',
      foreignField: '_id',
      as: 'salesContractData',
    },
  },
  {
    $unwind: { path: '$customer_details', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$product_dtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$branddtl', preserveNullAndEmptyArrays: true },
  },
  {
    $unwind: { path: '$salesContractData', preserveNullAndEmptyArrays: true },
  },

  // Fixed shipment lookup using grouping inside pipeline
  {
    $lookup: {
      from: 'shipmentdtls',
      let: { salesContractId: '$salesContract' },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ['$salesContract', '$$salesContractId'] },
                { $eq: ['$isDeleted', false] },
              ],
            },
          },
        },
        {
          $group: {
            _id: null,
            shipmentTotalQty: { $sum: '$qty' },
            shipmentTotalAmount: { $sum: '$amount' },
          },
        },
      ],
      as: 'shipmentSummary',
    },
  },

  // Add shipment totals safely
  {
    $addFields: {
      shipmentTotalQty: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalQty', 0] }, 0],
      },
      shipmentTotalAmount: {
        $ifNull: [{ $arrayElemAt: ['$shipmentSummary.shipmentTotalAmount', 0] }, 0],
      },
    },
  },

  // Lookup currency and payment terms
  {
    $lookup: {
      from: 'currencies',
      localField: 'currency',
      foreignField: '_id',
      as: 'currencyData',
    },
  },
  {
    $lookup: {
      from: 'paymentterms',
      localField: 'salesContractData.paymentTerm',
      foreignField: '_id',
      as: 'paymentTermData',
    },
  },

  // Project required fields
  {
    $project: {
      salesContractId: '$salesContract',
      contract: '$salesContractData.contract',
      po: '$salesContractData.po',
      podate: '$salesContractData.poDate',
      Contractdate: '$salesContractData.contractDate',
      customer: '$customer_details.name',
      product: '$product_dtl.name',
      brand: '$branddtl.name',
      currency: { $arrayElemAt: ['$currencyData.name', 0] },
      payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
      uom: '$uom',
      totalQty: '$qty',
      totalAmount: '$amount',
      shipmentTotalQty: 1,
      shipmentTotalAmount: 1,
    },
  },

  // Group by all unique fields
  {
    $group: {
      _id: {
        contract: '$contract',
        po: '$po',
        podate: '$podate',
        Contractdate: '$Contractdate',
        customer: '$customer',
        product: '$product',
        brand: '$brand',
        currency: '$currency',
        payment_term: '$payment_term',
        uom: '$uom',
        salesContractId: '$salesContractId',
      },
      totalSalesQty: { $sum: '$totalQty' },
      totalSalesAmount: { $sum: '$totalAmount' },
      totalShipmentQty: { $sum: '$shipmentTotalQty' },
      totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
    },
  },

  // Final projection with remaining calculation
  {
    $project: {
      _id: 0,
      contract: '$_id.contract',
      po: '$_id.po',
      podate: '$_id.podate',
      Contractdate: '$_id.Contractdate',
      customer: '$_id.customer',
      product: '$_id.product',
      brand: '$_id.brand',
      currency: '$_id.currency',
      payment_term: '$_id.payment_term',
      uom: '$_id.uom',
      salesContractId: '$_id.salesContractId',
      totalSalesQty: 1,
      totalShipmentQty: 1,
      totalSalesAmount: 1,
      totalShipmentAmount: 1,
      remainingQty: {
        $subtract: ['$totalSalesQty', '$totalShipmentQty'],
      },
      remainingAmount: {
        $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
      },
    },
  },

  // Filter to show only records with remaining quantity
  {
    $match: {
      remainingQty: { $gt: 0 },
    },
  },

  // Sorting
  {
    $sort: {
      Contractdate: -1,
    },
  },
]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        input.order_status == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general');

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.royality_approval !== '' &&
        input.order_status == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality approval ');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          InHouse: false,
          shipment: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.order_status !== '' &&
        input.royality_approval == '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('order_status filter ');

        const order_status = input.order_status;

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          shipment: false,
          InHouse: true,
          order_status: order_status,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);

        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product general');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;

        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // console.log('product general');

        // const total_records = await ProductModel.countDocuments();

        // const product = await ProductModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'product',
        //       as: 'sales_dtl',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       total_sales: {
        //         $size: '$sales_dtl',
        //       },
        //     },
        //   },
        //   // {
        //   //   $project: {
        //   //     name: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     // sales_dtl: {
        //   //     //   $size: '$sales_dtl',
        //   //     // },
        //   //     // salesContract: {
        //   //     //   $first: '$sales_dtl.salesContract',
        //   //     // },
        //   //   },
        //   // },
        //   // {
        //   //   $lookup: {
        //   //     from: 'salescontracts',
        //   //     localField: 'salesContract',
        //   //     foreignField: '_id',
        //   //     as: 'salecontracts',
        //   //   },
        //   // },
        //   // {
        //   //   $project: {
        //   //     sales_dtl: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     name: 1,
        //   //     total_sales: {
        //   //       $size: '$sales_dtl',
        //   //     },
        //   //     // saleContracts: {
        //   //     //   $first: '$salecontracts.contract',
        //   //     // },

        //   //   },
        //   // },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract
        // };
        // return result;
      } else if (
        input.brand_group !== '' &&
        input.order_status == '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false
                  }
                }
              ]
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product ');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: true,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              order_status: '$salesContractData.order_status',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $first: '$currencyData.name',
              },
              payment_term: {
                $first: '$paymentTermData.name',
              },
              uom: '$uom',
              totalQty: {
                $sum: '$qty',
              },
              total_amount: {
                $sum: '$amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
                order_status: '$order_status',
              },
              totalSalesQty: {
                $sum: '$totalQty',
              },
              totalSalesAmount: {
                $sum: '$total_amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              order_status: '$_id.order_status',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentAmount: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
        ]);

        const productgroupby = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: true,
            },
          },
          {
            $match: filter,
          },
          {
            $group: {
              _id: 'null',
              rate: {
                $sum: '$rate',
              },
              amount: {
                $sum: '$amount',
              },
              qty: {
                $sum: '$qty',
              },
            },
          },
        ]);

        const totalQty = productgroupby.map((item: any) => item.qty);
        const totalRate = productgroupby.map((item: any) => item.rate);
        const totalAmount = productgroupby.map((item: any) => item.amount);

        // console.log("totalamount" , totalAmount)
        const saleContractDetail1 = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: false,
            },
          },
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salecontract_dtl',
              pipeline: [
                {
                  $lookup: {
                    from: 'paymentterms',
                    localField: 'paymentTerm',
                    foreignField: '_id',
                    as: 'payment_term',
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customers',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currency_dtl',
            },
          },
          { $sort: { tran: 1 } },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: false,
              InHouse: true,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: { $arrayElemAt: ['$currencyData.name', 0] },
              payment_term: { $arrayElemAt: ['$paymentTermData.name', 0] },
              uom: '$uom',
              totalQty: '$qty',
              totalAmount: '$amount',
              shipmentTotalQty: { $sum: '$shipmentDetails.qty' },
              shipmentTotalAmount: { $sum: '$shipmentDetails.amount' },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              totalSalesQty: { $sum: '$totalQty' },
              totalSalesAmount: { $sum: '$totalAmount' },
              totalShipmentQty: { $sum: '$shipmentTotalQty' },
              totalShipmentAmount: { $sum: '$shipmentTotalAmount' },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          {
            $sort: {
              Contractdate: -1,
            },
          },
        ]);
        const totalSalesQty = total_record.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const totalSalesAmount = total_record.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          totalSalesQty: totalSalesQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          totalSalesAmount: totalSalesAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to  product group');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              totalSalesQty: 1,
              customerName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('productgroup to customer');
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group to product');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer to brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brandgroup to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 }, // Sort by remainingQty and remainingAmount
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('productgroup brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },

          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              totalSalesQty: 1,
              brandName: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.brand_group == '' &&
        input.product_group == '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },

          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              productName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$product_details',
              preserveNullAndEmptyArrays: true,
            },
          },

          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: {
                $first: '$product_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: {
                $first: '$productName',
              },
              brandName: {
                $first: '$brandName',
              },
              customerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          input.order_status !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        if (input.order_status !== '') {
          const order_status = input.order_status;

          where.order_status = order_status;
          (filter_records.order_status = order_status),
            (filter.order_status = order_status);
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              BrandName: {
                $first: '$brand_details.name',
              },
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              totalSalesQty: {
                $sum: '$qty',
              },
              totalSalesAmount: {
                $sum: '$amount',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              BrandName: {
                $first: '$BrandName',
              },
              ProductName: {
                $first: '$productName',
              },
              CustomerName: {
                $first: '$customerName',
              },
              totalSalesQty: {
                $first: '$totalSalesQty',
              },
              totalSalesAmount: {
                $first: '$totalSalesAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              BrandName: 1,
              CustomerName: 1,
              ProductName: 1,
              totalSalesQty: 1,
              totalShipmentQty: 1,
              totalSalesAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalSalesQty', '$totalShipmentQty'],
              },
              remainingAmount: {
                $subtract: ['$totalSalesAmount', '$totalShipmentAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          {
            $sort: {
              remainingQty: -1,
            },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalSalesAmount = total_records.reduce(
          (sum, item) => sum + item.totalSalesAmount,
          0
        );
        const totalSalesQty = total_records.reduce(
          (sum, item) => sum + item.totalSalesQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalSalesAmount: totalSalesAmount,
          totalSalesQty: totalSalesQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    }
  } catch (err) {
    console.log({ err });
  }
};


export const pending_contract_dtlPrint = async (input: SaleContractReportPrintSchema )=> {
const {
      brand,
      customer,
      product,
      fromDate,
      toDate,
      // pageno = 1,
      // perPage = 10,
      order_status,
      royality_approval,
      Adm,
      isDeleted,
      nonAdm,
      brand_group,
      customer_group,
      product_group,
    } = input;


    // const limit = perPage;
    // const skipCount = (pageno - 1) * limit;


    const groupId: any = {};
    const shouldGroup = product_group || brand_group || customer_group;

     if (product_group) groupId.product = '$product';
    if (brand_group) groupId.brand = '$brand';
    if (customer_group) groupId.customer = '$customer';

const matchStage: any = { isDeleted: false, shipment: false };

    if (fromDate && toDate) {
      matchStage.contractDate = {
        $gte: new Date(fromDate),
        $lte: new Date(toDate),
      };
    }


  if (Array.isArray(product) && product.length > 0) {
    matchStage.product = {
    $in: product.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(brand) && brand.length > 0) {
    matchStage.brand = {
    $in: brand.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(customer) && customer.length > 0) {
    matchStage.customer ={
    $in: customer.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Adm) matchStage['InHouse'] = true;
if (nonAdm) matchStage['InHouse'] = false;
     
  const scMatchStage: any = {};
   if (royality_approval == 'true')
        scMatchStage['royality_approval'] = true;
      if (royality_approval == 'false')
        scMatchStage['royality_approval'] = false;

      // const scMatchStage2: any = { isDeleted: false };
      if (order_status == 'confirmed')
        scMatchStage['order_status'] = 'confirmed';
      if (order_status == 'forecast')
        scMatchStage['order_status'] = 'forecast';
if (isDeleted && isDeleted.toString().toLowerCase() === "true") {
  matchStage.isDeleted = true;
}

const basePipeline: any[] = [
  { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },

  // --- Shipment Summary: Group shipment qty/amount by contract ---
  {
    $lookup: {
      from: "shipmentdtls",
      let: { salesContractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$salesContractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            totalQty: { $sum: "$qty" },
            totalAmount: { $sum: "$amount" }
          }
        }
      ],
      as: "shipmentSummary"
    }
  },

  // --- Add Shipment Totals (Safely Extracted) ---
  {
    $addFields: {
      shipQty: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalQty", 0] }, 0] },
      shipAmount: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalAmount", 0] }, 0] }
    }
  },

  // --- Joins for Reference Data ---
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  { $unwind: { path: "$customers", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  { $unwind: { path: "$products", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  { $unwind: { path: "$brands", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContracts"
    }
  },
  { $unwind: { path: "$salesContracts", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  { $unwind: { path: "$currencies", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  { $unwind: { path: "$paymentTerms", preserveNullAndEmptyArrays: false } },

  // --- Prepare for Final Grouping ---
  {
    $project: {
      contract: "$salesContracts.contract",
      po: "$salesContracts.po",
      poDate: "$salesContracts.poDate",
      contractDate: "$contractDate",
      customers: "$customers.name",
      brands: "$brands.name",
      products: "$products.name",
      currency: "$currencies.name",
      paymentTerm: "$paymentTerms.name",
      uom: "$uom",
      salesQty: "$qty",
      salesAmount: "$amount",
      shipQty: 1,
      shipAmount: 1
    }
  },

  // --- Group by Unique Sales Contract Detail ---
  {
    $group: {
      _id: {
        contract: "$contract",
        po: "$po",
        poDate: "$poDate",
        contractDate: "$contractDate",
        customers: "$customers",
        products: "$products",
        brands: "$brands",
        currency: "$currency",
        paymentTerm: "$paymentTerm",
        uom: "$uom"
      },
      totalSalesQty: { $sum: "$salesQty" },
      totalSalesAmount: { $sum: "$salesAmount" },
      totalShipmentQty: { $sum: "$shipQty" },
      totalShipmentAmount: { $sum: "$shipAmount" }
    }
  },


  {
    $project: {
      _id:0,
      contract: "$_id.contract",
      contractDate: "$_id.contractDate",
      po: "$_id.po",
      poDate: "$_id.poDate",
      customer: "$_id.customers",
      product: "$_id.products",
      brand: "$_id.brands",
      Booked: "$totalSalesQty",
      Shipped: "$totalShipmentQty",
      Pending: { $subtract: ["$totalSalesQty", "$totalShipmentQty"] },
      BookedAmount:   "$totalSalesAmount",
      uom: "$_id.uom",
        PaymentTerm: "$_id.paymentTerm",
      // currency: "$_id.currency",
      // totalShipmentAmount: 1,
      // remainingAmount: { $subtract: ["$totalSalesAmount", "$totalShipmentAmount"] }
    }
  },

  // --- Sort Latest First ---
  { $sort: { contractDate: -1 } }
];



const basePipelineSummary: any[] = [  
   { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },

  // --- Shipment Summary: Group shipment qty/amount by contract ---
  {
    $lookup: {
      from: "shipmentdtls",
      let: { salesContractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$salesContractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            totalQty: { $sum: "$qty" },
            totalAmount: { $sum: "$amount" }
          }
        }
      ],
      as: "shipmentSummary"
    }
  },

  // --- Add Shipment Totals (Safely Extracted) ---
  {
    $addFields: {
      shipQty: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalQty", 0] }, 0] },
      shipAmount: { $ifNull: [{ $arrayElemAt: ["$shipmentSummary.totalAmount", 0] }, 0] }
    }
  },

  // --- Joins for Reference Data ---
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  { $unwind: { path: "$customers", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  { $unwind: { path: "$products", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  { $unwind: { path: "$brands", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContracts"
    }
  },
  { $unwind: { path: "$salesContracts", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  { $unwind: { path: "$currencies", preserveNullAndEmptyArrays: false } },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  { $unwind: { path: "$paymentTerms", preserveNullAndEmptyArrays: false } },

  // --- Prepare for Final Grouping ---
  {
    $project: {
      contract: "$salesContracts.contract",
      po: "$salesContracts.po",
      poDate: "$salesContracts.poDate",
      contractDate: "$contractDate",
      customers: "$customers.name",
      brands: "$brands.name",
      products: "$products.name",
      currency: "$currencies.name",
      paymentTerm: "$paymentTerms.name",
      uom: "$uom",
      salesQty: "$qty",
      salesAmount: "$amount",
      shipQty: 1,
      shipAmount: 1
    }
  },

  // --- Group by Unique Sales Contract Detail ---
  {
    $group: {
      _id: {
        contract: "$contract",
        po: "$po",
        poDate: "$poDate",
        contractDate: "$contractDate",
        customers: "$customers",
        products: "$products",
        brands: "$brands",
        currency: "$currency",
        paymentTerm: "$paymentTerm",
        uom: "$uom"
      },
      totalSalesQty: { $sum: "$salesQty" },
      totalSalesAmount: { $sum: "$salesAmount" },
      totalShipmentQty: { $sum: "$shipQty" },
      totalShipmentAmount: { $sum: "$shipAmount" }
    }
  },

  // --- Final Shape + Remaining Calculation ---
  {
    $project: {
    _id:0,
      contract: "$_id.contract",
      contractDate: "$_id.contractDate",
      po: "$_id.po",
      poDate: "$_id.poDate",
      customer: "$_id.customers",
      product: "$_id.products",
      brand: "$_id.brands",
      Booked: "$totalSalesQty",
      Shipped: "$totalShipmentQty",
      Pending: { $subtract: ["$totalSalesQty", "$totalShipmentQty"] },
      BookedAmount:   "$totalSalesAmount",
      uom: "$_id.uom",
      PaymentTerm: "$_id.paymentTerm",
      // currency: "$_id.currency",
      // totalShipmentAmount: 1,
      // remainingAmount: { $subtract: ["$totalSalesAmount", "$totalShipmentAmount"] }
    }
  },

  // --- Sort Latest First ---
  { $sort: { contractDate: -1 } }
];

const sortStage = { $sort: { Booked: -1 } };

const groupFields: { [key: string]: any } = {
    _id: groupId,

  }
 const groupFieldsSummary: { [key: string]: any } = {
    _id: null,

  };

  if(product_group){
groupFields.product = { $first: '$product' };
groupFields.Booked={$sum:"$Booked"};
groupFields.Shipped={$sum:"$Shipped"};
groupFields.Pending = {$sum: "$Pending"};
groupFields.TotalSalesContracts = {$sum: 1};
groupFieldsSummary.Booked={$sum:"$Booked"};
groupFieldsSummary.Shipped={$sum:"$Shipped"};
groupFieldsSummary.Pending = {$sum: "$Pending"};
// groupFieldsSummary.TotalSalesContracts = {$sum: 1};

  }
if(brand_group){
groupFields.brand = { $first: '$brand' }; 
groupFields.Booked={$sum:"$Booked"};
groupFields.Shipped={$sum:"$Shipped"};
groupFields.Pending = {$sum: "$Pending"};
groupFields.TotalSalesContracts = {$sum: 1};
groupFieldsSummary.Booked={$sum:"$Booked"};
groupFieldsSummary.Shipped={$sum:"$Shipped"};
groupFieldsSummary.Pending = {$sum: "$Pending"};
// groupFieldsSummary.TotalSalesContracts = {$sum: 1};

  }
if(customer_group){
groupFields.customer = { $first: '$customer' };
groupFields.Booked={$sum:"$Booked"};
groupFields.Shipped={$sum:"$Shipped"};
groupFields.Pending = {$sum: "$Pending"};
groupFields.TotalSalesContracts = {$sum: 1};
groupFieldsSummary.Booked={$sum:"$Booked"};
groupFieldsSummary.Shipped={$sum:"$Shipped"};
groupFieldsSummary.Pending = {$sum: "$Pending"};
// groupFieldsSummary.TotalSalesContracts = {$sum: 1}; 
  }




const groupStage = {
  $group: groupFields,


}
const groupStageSummary = {
   $group: groupFieldsSummary
  
}


 // If grouping is not required, we can skip the group stage
      const dataPipeline = shouldGroup
        ? [...basePipeline, groupStage, sortStage]
        : [...basePipeline, sortStage]

      // Count pipeline for total records
      // const countPipeline = shouldGroup
      //   ? [...basePipeline, groupStage, { $count: 'totalRecords' }]
      //   : [...basePipeline, { $count: 'totalRecords' }];


const summaryPipeline = shouldGroup
        ? [...basePipelineSummary, groupStageSummary]
        : [
          ...basePipelineSummary,
          {
            $group: {
              _id: null,
              totalBookedQty: {
                $sum: "$Booked"
              },
              // totalBookedAmount: {
              //   $sum: "$totalSalesAmount"
              // },
                totalShippedQty:{$sum:"$Shipped"},
              // totalShipmentAmount:{$sum:"$totalShipmentAmount"},
              totalPendingQty: {$sum: "$Pending"},
              // totalRemainingAmount: {$sum: "$remainingAmount"},
              // totalSalescontract:{
              //   $sum:1
              // },
            
            
            },
          },
        ];
  // Executing the pipelines in parallel
      const [salesdtl, summaryResult] = await Promise.all([
        SalesContractDtlModel.aggregate(dataPipeline, { allowDiskUse: true }),
        // SalesContractDtlModel.aggregate(countPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(summaryPipeline, { allowDiskUse: true }),
      ]);

//  const totalRecords = totalResult?.[0]?.totalRecords || 0;
      const summary = summaryResult?.[0] || {
        totalBookedQty: 0, 
        // totalSalescontractAmount: 0,
        totalSalescontract: 0,
        totalShippedQty:0,
        // totalShipmentAmount: 0,
        totalPendingQty: 0,
        // totalRemainingAmount: 0,

        
      };
      return {
        salesdtl,
        summary,
        // pagination: {
        //   page: pageno,
        //   perPage,
        //   totalRecords,
        //   totalPages: Math.ceil(totalRecords / perPage),
        // },
      };

  }


export const pending_invoices_dtl_old = async (input: SaleContractReportSchema) => {
  try {
    if (
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == ''
    ) {
      console.log('no filter condition execute ');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const allrecordgroupby = await ShipmentDtlModel.aggregate([
        {
          $match: {
            gpDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              product: '$product',
              brand: '$brand',
            },
            totalQty: { $sum: '$qty' },
            totalShippedQty: { $sum: '$shippedQty' }, // Ensure this field exists and has values
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            product: '$_id.product',
            brand: '$_id.brand',
            totalQty: 1,
            totalShippedQty: 1,
            remainingQty: {
              $subtract: ['$totalQty', { $ifNull: ['$totalShippedQty', 0] }], // Handle cases where shippedQty might be null
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 }, // Filter out entries where remainingQty is 0 or negative
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        // InHouse: false,
        shipment: true,
        invoice: false,
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ]);

      // const saleContractDetail = await SalesContractDtlModel.aggregate([
      //   {
      //     $match: where,
      //   },
      //   {
      //     $lookup: {
      //       from: 'salescontracts',
      //       localField: 'salesContract',
      //       foreignField: '_id',
      //       as: 'salecontract_dtl',
      //       pipeline: [
      //         {
      //           $lookup: {
      //             from: 'paymentterms',
      //             localField: 'paymentTerm',
      //             foreignField: '_id',
      //             as: 'payment_term',
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'brands',
      //       localField: 'brand',
      //       foreignField: '_id',
      //       as: 'branddtl',
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'customers',
      //       localField: 'customer',
      //       foreignField: '_id',
      //       as: 'customers',
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'products',
      //       localField: 'product',
      //       foreignField: '_id',
      //       as: 'product_dtl',
      //     },
      //   },

      //   {
      //     $lookup: {
      //       from: 'currencies',
      //       localField: 'currency',
      //       foreignField: '_id',
      //       as: 'currency_dtl',
      //     },
      //   },
      //   { $skip: skipCount },
      //   { $limit: limit },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      // ]);

      // const saleContractDetail = await ShipmentDtlModel.aggregate([
      //   {
      //     $match: where,
      //   },
      //   {
      //     $lookup: {
      //       from: 'brands',
      //       localField: 'brand',
      //       foreignField: '_id',
      //       as: 'branddtl',
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'customers',
      //       localField: 'customer',
      //       foreignField: '_id',
      //       as: 'customers',
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'products',
      //       localField: 'product',
      //       foreignField: '_id',
      //       as: 'product_dtl',
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'currencies',
      //       localField: 'currency',
      //       foreignField: '_id',
      //       as: 'currency_dtl',
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: 'salesContract',
      //       foreignField: 'salesContract',
      //       as: 'sale_dtl',
      //     },
      //   },
      //   {
      //     $lookup: {
      //       from: 'salescontracts',
      //       localField: 'salesContract',
      //       foreignField: '_id',
      //       as: 'salecontract',
      //       pipeline: [
      //         {
      //           $lookup: {
      //             from: 'paymentterms',
      //             localField: 'paymentTerm',
      //             foreignField: '_id',
      //             as: 'payment_term',
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $project: {
      //       contract: { $first: '$salecontract.contract' },
      //       po: { $first: '$salecontract.po' },
      //       podate: { $first: '$salecontract.poDate' },
      //       Contractdate: { $first: '$salecontract.contractDate' },
      //       customer: { $first: '$customers.name' },
      //       product: { $first: '$product_dtl.name' },
      //       brand: { $first: '$branddtl.name' },
      //       currency: { $first: '$currency_dtl.name' },
      //       payment_term: { $first: '$salecontract.payment_term.name' },
      //       uom: { $first: '$sale_dtl.uom' },
      //       qty: { $sum: '$qty' },
      //       amount: { $sum: '$amount' },
      //       totalQty: { $sum: '$sale_dtl.qty' },
      //       totalAmount: { $sum: '$sale_dtl.amount' },
      //     },
      //   },
      //   {
      //     $group: {
      //       _id: {
      //         contract: '$contract',
      //         po: '$po',
      //         podate: '$podate',
      //         Contractdate: '$Contractdate',
      //         customer: '$customer',
      //         product: '$product',
      //         brand: '$brand',
      //         currency: '$currency',
      //         payment_term: '$payment_term',
      //         uom: '$uom',
      //       },
      //       qty: { $sum: '$qty' },
      //       amount: { $sum: '$amount' },
      //       totalQty: { $sum: '$totalQty' },
      //       totalAmount: { $sum: '$totalAmount' },
      //     },
      //   },
      //   {
      //     $project: {
      //       _id: 0,
      //       contract: '$_id.contract',
      //       po: '$_id.po',
      //       podate: '$_id.podate',
      //       Contractdate: '$_id.Contractdate',
      //       customer: '$_id.customer',
      //       product: '$_id.product',
      //       brand: '$_id.brand',
      //       currency: '$_id.currency',
      //       payment_term: '$_id.payment_term',
      //       uom: '$_id.uom',
      //       qty: 1,
      //       amount: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       remainingQty: { $subtract: ['$totalQty', '$qty'] },
      //       remainingAmount: { $subtract: ['$totalAmount', '$amount'] },
      //     },
      //   },
      //   {
      //     $match: {
      //       remainingQty: { $gt: 0 },
      //     },
      //   },
      //   { $skip: skipCount },
      //     { $limit: limit },
      // ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { Contractdate: -1 },
        },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const invoicetotalQty = total_record.reduce(
        (sum, item) => sum + item.invoicetotalQty,
        0
      );
      const invoicetotalAmount = total_record.reduce(
        (sum, item) => sum + item.invoicetotalAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        invoicetotalQty: invoicetotalQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        invoicetotalAmount: invoicetotalAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer general ');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      console.log(totalInvoiceQty);
      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product general ');

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;

      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // console.log('product general');

      // const total_records = await ProductModel.countDocuments();

      // const product = await ProductModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'product',
      //       as: 'sales_dtl',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       total_sales: {
      //         $size: '$sales_dtl',
      //       },
      //     },
      //   },
      //   // {
      //   //   $project: {
      //   //     name: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     // sales_dtl: {
      //   //     //   $size: '$sales_dtl',
      //   //     // },
      //   //     // salesContract: {
      //   //     //   $first: '$sales_dtl.salesContract',
      //   //     // },
      //   //   },
      //   // },
      //   // {
      //   //   $lookup: {
      //   //     from: 'salescontracts',
      //   //     localField: 'salesContract',
      //   //     foreignField: '_id',
      //   //     as: 'salecontracts',
      //   //   },
      //   // },
      //   // {
      //   //   $project: {
      //   //     sales_dtl: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     name: 1,
      //   //     total_sales: {
      //   //       $size: '$sales_dtl',
      //   //     },
      //   //     // saleContracts: {
      //   //     //   $first: '$salecontracts.contract',
      //   //     // },

      //   //   },
      //   // },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
      // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
      // const result = {
      //   product_groupby: product,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSalecontract
      // };
      // return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('brand general!');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // const total_records = await BrandModel.countDocuments();
      // const brandgroup = await BrandModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'brand',
      //       as: 'salecontract',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 },
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       salecontract: {
      //         $size: '$salecontract',
      //       },
      //     },
      //   },

      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
      // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
      // const result = {
      //   brand_groupby: brandgroup,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSaleContractsSum
      // };
      // return result;
    } else if (
      input.royality_approval !== '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand)
    ) {
      console.log('royality_approval');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        royality_approval: royality_approval,
        shipment: false,
        // InHouse: false,
        invoice: false,
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
      ]);
      const invoicetotalQty = total_record.reduce(
        (sum, item) => sum + item.invoicetotalQty,
        0
      );
      const invoicetotalAmount = total_record.reduce(
        (sum, item) => sum + item.invoicetotalAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        invoicetotalQty: invoicetotalQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        invoicetotalAmount: invoicetotalAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('general filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }

      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },

        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
        { $skip: skipCount },
        { $limit: limit },
      ]);

      const invoicetotalQty = total_record.reduce(
        (sum, item) => sum + item.invoicetotalQty,
        0
      );
      const invoicetotalAmount = total_record.reduce(
        (sum, item) => sum + item.invoicetotalAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        invoicetotalQty: invoicetotalQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        invoicetotalAmount: invoicetotalAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group customer ');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product to product');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { product: { $in: productArr } },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('brandgroup brand');
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to customer');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { customer: { $in: customerArr } },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { customer: { $in: customerArr } },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to customer');
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salescontract',
          },
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            contractDate: { $first: '$contractDate' },
            contract: { $first: '$salescontract.contract' },
            customerName: { $first: '$customer_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salescontract',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            contract: { $first: '$contract' },
            contractDate: { $first: '$contractDate' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            contractDate: 1,
            contract: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer to product ');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { product: { $in: productArr } },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { product: { $in: productArr } },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      console.log(totalInvoiceQty);
      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0
    ) {
      console.log('customer group to brand');

      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to product');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;
      console.log('product group to brand ');

      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$brand_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('customergroup with general filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' product group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' brand group with filters brand customer product');
      let where: any = {};
      const limit = input.perPage;
      const skipCount = (input.pageno - 1) * limit;

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $first: '$invoiceDetails' },
            shipmentDetails: { $first: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $first: '$invoiceDetails' },
            shipmentDetails: { $first: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        { $skip: skipCount },
        { $limit: limit },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (input.nonAdm !== '') {
      console.log('nonadm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == ''
      ) {
        console.log('no filter condition execute ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const allrecordgroupby = await ShipmentDtlModel.aggregate([
          {
            $match: {
              gpDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              InHouse: false,
              isDeleted: false,
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                product: '$product',
                brand: '$brand',
              },
              totalQty: { $sum: '$qty' },
              totalShippedQty: { $sum: '$shippedQty' }, // Ensure this field exists and has values
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              product: '$_id.product',
              brand: '$_id.brand',
              totalQty: 1,
              totalShippedQty: 1,
              remainingQty: {
                $subtract: ['$totalQty', { $ifNull: ['$totalShippedQty', 0] }], // Handle cases where shippedQty might be null
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 }, // Filter out entries where remainingQty is 0 or negative
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: false,
          shipment: true,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          { $skip: skipCount },
          { $limit: limit },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general ');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product general ');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              // InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              // InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;

        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // console.log('product general');

        // const total_records = await ProductModel.countDocuments();

        // const product = await ProductModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'product',
        //       as: 'sales_dtl',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       total_sales: {
        //         $size: '$sales_dtl',
        //       },
        //     },
        //   },
        //   // {
        //   //   $project: {
        //   //     name: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     // sales_dtl: {
        //   //     //   $size: '$sales_dtl',
        //   //     // },
        //   //     // salesContract: {
        //   //     //   $first: '$sales_dtl.salesContract',
        //   //     // },
        //   //   },
        //   // },
        //   // {
        //   //   $lookup: {
        //   //     from: 'salescontracts',
        //   //     localField: 'salesContract',
        //   //     foreignField: '_id',
        //   //     as: 'salecontracts',
        //   //   },
        //   // },
        //   // {
        //   //   $project: {
        //   //     sales_dtl: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     name: 1,
        //   //     total_sales: {
        //   //       $size: '$sales_dtl',
        //   //     },
        //   //     // saleContracts: {
        //   //     //   $first: '$salecontracts.contract',
        //   //     // },

        //   //   },
        //   // },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract
        // };
        // return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        // const brandgroup = await SalesContractDtlModel.aggregate([
        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate)
        //       },
        //       isDeleted: false,

        //     }
        //   },
        //   {
        //     $lookup: {
        //       from: 'brands',
        //       localField: 'brand',
        //       foreignField: '_id',
        //       as: 'brand'
        //     }
        //   },
        //   {
        //     $unwind: '$brand'
        //   },
        //   {
        //     $group: {
        //       _id: '$brand._id',
        //       name: { $first: '$brand.name' },
        //       totalContracts: { $sum: 1 },
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' }
        //     }
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     }
        //   },
        //   {
        //     $project: {
        //       _id: 0, // Exclude _id field
        //       name: 1,
        //       totalContracts: 1,
        //       totalQty: 1,
        //       totalAmount: 1
        //     }
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ])
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.royality_approval !== '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality_approval');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          shipment: false,
          InHouse: false,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ]);
        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }

        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: false,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: false,
              invoice: false,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          { $skip: skipCount },
          { $limit: limit },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to customer');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salescontract',
            },
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              contractDate: { $first: '$contractDate' },
              contract: { $first: '$salescontract.contract' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salescontract',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              contract: { $first: '$contract' },
              contractDate: { $first: '$contractDate' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              contractDate: 1,
              contract: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer to product ');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        console.log(totalInvoiceQty);
        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer group to brand');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product group to brand ');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    } else if (input.Adm !== '') {
      console.log('adm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == ''
      ) {
        console.log('no filter condition execute ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const allrecordgroupby = await ShipmentDtlModel.aggregate([
          {
            $match: {
              gpDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              InHouse: true,
              isDeleted: false,
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                product: '$product',
                brand: '$brand',
              },
              totalQty: { $sum: '$qty' },
              totalShippedQty: { $sum: '$shippedQty' }, // Ensure this field exists and has values
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              product: '$_id.product',
              brand: '$_id.brand',
              totalQty: 1,
              totalShippedQty: 1,
              remainingQty: {
                $subtract: ['$totalQty', { $ifNull: ['$totalShippedQty', 0] }], // Handle cases where shippedQty might be null
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 }, // Filter out entries where remainingQty is 0 or negative
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
          shipment: true,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          { $skip: skipCount },
          { $limit: limit },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general ');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product general ');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        // const brandgroup = await SalesContractDtlModel.aggregate([
        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate)
        //       },
        //       isDeleted: false,

        //     }
        //   },
        //   {
        //     $lookup: {
        //       from: 'brands',
        //       localField: 'brand',
        //       foreignField: '_id',
        //       as: 'brand'
        //     }
        //   },
        //   {
        //     $unwind: '$brand'
        //   },
        //   {
        //     $group: {
        //       _id: '$brand._id',
        //       name: { $first: '$brand.name' },
        //       totalContracts: { $sum: 1 },
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' }
        //     }
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     }
        //   },
        //   {
        //     $project: {
        //       _id: 0, // Exclude _id field
        //       name: 1,
        //       totalContracts: 1,
        //       totalQty: 1,
        //       totalAmount: 1
        //     }
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ])
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.royality_approval !== '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality_approval');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          shipment: false,
          InHouse: true,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ]);
        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }

        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: true,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: true,
              invoice: false,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
          { $skip: skipCount },
          { $limit: limit },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to customer');
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salescontract',
            },
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              contractDate: { $first: '$contractDate' },
              contract: { $first: '$salescontract.contract' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salescontract',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              contract: { $first: '$contract' },
              contractDate: { $first: '$contractDate' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              contractDate: 1,
              contract: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer to product ');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        console.log(totalInvoiceQty);
        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer group to brand');

        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;
        console.log('product group to brand ');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};
        const limit = input.perPage;
        const skipCount = (input.pageno - 1) * limit;

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },
          { $skip: skipCount },
          { $limit: limit },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    }
  } catch (err) {
    console.log({ err });
  }
};
export const pending_invoices_dtl = async (input: SaleContractReportSchema )=> {
const {
      brand,
      customer,
      product,
      fromDate,
      toDate,
      pageno = 1,
      perPage = 10,
      order_status,
      royality_approval,
      Adm,
      isDeleted,  
      nonAdm,
      brand_group,
      customer_group,
      product_group,
    } = input;


    const limit = perPage;
    const skipCount = (pageno - 1) * limit;


    const groupId: any = {};
    const shouldGroup = product_group || brand_group || customer_group;

     if (product_group) groupId.product = '$products';
    if (brand_group) groupId.brand = '$brands';
    if (customer_group) groupId.customer = '$customers';

const matchStage: any = {  shipment: true , invoice:false};

    if (fromDate && toDate) {
      matchStage.contractDate = {
        $gte: new Date(fromDate),
        $lte: new Date(toDate),
      };
    }


  if (Array.isArray(product) && product.length > 0) {
    matchStage.product = {
    $in: product.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(brand) && brand.length > 0) {
    matchStage.brand = {
    $in: brand.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(customer) && customer.length > 0) {
    matchStage.customer ={
    $in: customer.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Adm) matchStage['InHouse'] = true;
if (nonAdm) matchStage['InHouse'] = false;

matchStage.isDeleted = false; // default

if (isDeleted && isDeleted.toString().toLowerCase() === "true") {
  matchStage.isDeleted = true;
}

     
  const scMatchStage: any = {};
   if (royality_approval == 'true')
        scMatchStage['royality_approval'] = true;
      if (royality_approval == 'false')
        scMatchStage['royality_approval'] = false;

      // const scMatchStage2: any = { isDeleted: false };
      if (order_status == 'confirmed')
        scMatchStage['order_status'] = 'confirmed';
      if (order_status == 'forecast')
        scMatchStage['order_status'] = 'forecast';

const basePipeline: any[] = [
  { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },
  {
    $lookup: {
      from: "invoicedtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "invoicedData"
    }
  },
  {
    $addFields: {
      invQty: {
        $ifNull: [{ $arrayElemAt: ["$invoicedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup shipped quantity
  {
    $lookup: {
      from: "shipmentdtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "shippedData"
    }
  },
  {
    $addFields: {
      shipQty: {
        $ifNull: [{ $arrayElemAt: ["$shippedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup related entities
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContracts"
    }
  },
  {
    $unwind: {
      path: "$salesContracts",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  {
    $unwind: {
      path: "$currencies",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  {
    $unwind: {
      path: "$paymentTerms",
      preserveNullAndEmptyArrays: true
    }
  },

  // Grouping for final summary
  {
    $group: {
      _id: {
        contract: "$salesContracts.contract",
        po: "$salesContracts.po",
        contractDate: "$contractDate",
        customers: "$customers.name",
        products: "$products.name",
        brands: "$brands.name",
        uom: "$uom"
      },
      invQty: { $sum: "$invQty" },
      shipQty: { $sum: "$shipQty" }
    }
  },

  // Final output
  {
    $project: {
      _id: 0,
      salesContract: "$_id.contract",
      po: "$_id.po",
      contractDate: "$_id.contractDate",
      customers: "$_id.customers",
      products: "$_id.products",
      brands: "$_id.brands",
      shipmentQuantity:  "$shipQty",
      invoiceQuantity: "$invQty",
      balanceQuantity: { $subtract: ["$shipQty", "$invQty"] },
      uom: "$_id.uom",
    }
  }
];




const basePipelineSummary: any[] = [
  { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },

  // Lookup invoiced quantity
  {
    $lookup: {
      from: "invoicedtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "invoicedData"
    }
  },
  {
    $addFields: {
      invQty: {
        $ifNull: [{ $arrayElemAt: ["$invoicedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup shipped quantity
  {
    $lookup: {
      from: "shipmentdtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "shippedData"
    }
  },
  {
    $addFields: {
      shipQty: {
        $ifNull: [{ $arrayElemAt: ["$shippedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup related entities
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContracts"
    }
  },
  {
    $unwind: {
      path: "$salesContracts",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  {
    $unwind: {
      path: "$currencies",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  {
    $unwind: {
      path: "$paymentTerms",
      preserveNullAndEmptyArrays: true
    }
  },

  // Grouping for final summary
  {
    $group: {
      _id: {
        contract: "$salesContracts.contract",
        po: "$salesContracts.po",
        contractDate: "$contractDate",
        customers: "$customers.name",
        products: "$products.name",
        brands: "$brands.name",
        uom: "$uom"
      },
      invQty: { $sum: "$invQty" },
      shipQty: { $sum: "$shipQty" }
    }
  },

  // Final output
  {
    $project: {
     _id: 0,
      salesContract: "$_id.contract",
      po: "$_id.po",
      contractDate: "$_id.contractDate",
      customers: "$_id.customers",
      products: "$_id.products",
      brands: "$_id.brands",
      shipmentQuantity:  "$shipQty",
      invoiceQuantity: "$invQty",
      balanceQuantity: { $subtract: ["$shipQty", "$invQty"] },
      uom: "$_id.uom",
    }
  }
];


const sortStage = { $sort: { totalSalescontractQty: -1 } };

const groupStage = {
  $group: {
  _id: groupId,
  products: { $first: '$products' }, 
  brands: { $first: '$brands' }, 
  customers: { $first: '$customers' },
  totalSalescontract: { $sum: 1 },
  totalShipmentQty:{$sum:"$shipmentQuantity"},
  totalInvoiceQty:{$sum:"$invoiceQuantity"},
  totalBalanceQty: {$sum: "$balanceQuantity"},
 
}
}
const groupStageSummary = {
   $group: {
  _id: '',
  // product: { $first: '$product' }, 
  // brand: { $first: '$brand' }, 
  // customer: { $first: '$customer' },
  totalShipmentQty:{$sum:"$shipmentQuantity"},
  totalInvoiceQty:{$sum:"$invoiceQuantity"},
  totalBalanceQty: {$sum: "$balanceQuantity"},
  // totalSalescontract: { $sum: 1 },
 
  
}
}

 // If grouping is not required, we can skip the group stage
      const dataPipeline = shouldGroup
        ? [...basePipeline, groupStage, sortStage, { $skip: skipCount }, { $limit: limit }]
        : [...basePipeline, { $skip: skipCount }, { $limit: limit }]

      // Count pipeline for total records
      const countPipeline = shouldGroup
        ? [...basePipeline, groupStage, { $count: 'totalRecords' }]
        : [...basePipeline, { $count: 'totalRecords' }];


const summaryPipeline = shouldGroup
        ? [...basePipelineSummary, groupStageSummary]
        : [
          ...basePipelineSummary,
          {
            $group: {
              _id: null,
              totalShipmentQty:{$sum:"$shipmentQuantity"},
              totalInvoiceQty:{$sum:"$invoiceQuantity"},
              totalBalanceQty: {$sum: "$balanceQuantity"},
              // totalSalescontract: { $sum: 1 },
 
            
            
            },
          },
        ];
  // Executing the pipelines in parallel
      const [salesdtl, totalResult, summaryResult] = await Promise.all([
        SalesContractDtlModel.aggregate(dataPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(countPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(summaryPipeline, { allowDiskUse: true }),
      ]);

 const totalRecords = totalResult?.[0]?.totalRecords || 0;
      const summary = summaryResult?.[0] || {
        totalSalescontract: 0,
        totalShipmentQty: 0,
        totalInvoiceQty: 0,
        totalBalanceQty: 0,
        
      };
      return {
        salesdtl,
        summary,
        pagination: {
          page: pageno,
          perPage,
          totalRecords,
          totalPages: Math.ceil(totalRecords / perPage),
        },
      };

  }





export const pending_invoices_dtlPrint_old = async (
  input: SaleContractReportPrintSchema
) => {
  try {
    if (
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == ''
    ) {
      console.log('no filter condition execute ');

      const allrecordgroupby = await ShipmentDtlModel.aggregate([
        {
          $match: {
            gpDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              product: '$product',
              brand: '$brand',
            },
            totalQty: { $sum: '$qty' },
            totalShippedQty: { $sum: '$shippedQty' }, // Ensure this field exists and has values
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            product: '$_id.product',
            brand: '$_id.brand',
            totalQty: 1,
            totalShippedQty: 1,
            remainingQty: {
              $subtract: ['$totalQty', { $ifNull: ['$totalShippedQty', 0] }], // Handle cases where shippedQty might be null
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 }, // Filter out entries where remainingQty is 0 or negative
          },
        },
      ]);

      const totalQty = allrecordgroupby.map((item: any) => item.qty);
      const totalRate = allrecordgroupby.map((item: any) => item.rate);
      const totalAmount = allrecordgroupby.map((item: any) => item.amount);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        // InHouse: false,
        shipment: true,
        invoice: false,
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { Contractdate: -1 },
        },
      ]);

      const invoicetotalQty = total_record.reduce(
        (sum, item) => sum + item.invoicetotalQty,
        0
      );
      const invoicetotalAmount = total_record.reduce(
        (sum, item) => sum + item.invoicetotalAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        invoicetotalQty: invoicetotalQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        invoicetotalAmount: invoicetotalAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer general ');

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      console.log(totalInvoiceQty);
      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product general ');

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            // shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            // shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;

      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // console.log('product general');

      // const total_records = await ProductModel.countDocuments();

      // const product = await ProductModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'product',
      //       as: 'sales_dtl',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$sales_dtl',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 }
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       total_sales: {
      //         $size: '$sales_dtl',
      //       },
      //     },
      //   },
      //   // {
      //   //   $project: {
      //   //     name: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     // sales_dtl: {
      //   //     //   $size: '$sales_dtl',
      //   //     // },
      //   //     // salesContract: {
      //   //     //   $first: '$sales_dtl.salesContract',
      //   //     // },
      //   //   },
      //   // },
      //   // {
      //   //   $lookup: {
      //   //     from: 'salescontracts',
      //   //     localField: 'salesContract',
      //   //     foreignField: '_id',
      //   //     as: 'salecontracts',
      //   //   },
      //   // },
      //   // {
      //   //   $project: {
      //   //     sales_dtl: 1,
      //   //     totalQty: 1,
      //   //     totalAmount: 1,
      //   //     name: 1,
      //   //     total_sales: {
      //   //       $size: '$sales_dtl',
      //   //     },
      //   //     // saleContracts: {
      //   //     //   $first: '$salecontracts.contract',
      //   //     // },

      //   //   },
      //   // },
      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
      // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
      // const result = {
      //   product_groupby: product,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSalecontract
      // };
      // return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0
    ) {
      console.log('brand general!');

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
      // const limit = input.perPage;
      // const skipCount = (input.pageno - 1) * limit;
      // const total_records = await BrandModel.countDocuments();
      // const brandgroup = await BrandModel.aggregate([
      //   {
      //     $lookup: {
      //       from: 'salescontractdtls',
      //       localField: '_id',
      //       foreignField: 'brand',
      //       as: 'salecontract',
      //       pipeline: [
      //         {
      //           $project: {
      //             qty: 1,
      //             amount: 1
      //           },
      //         },
      //       ],
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalQty: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.qty',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $addFields: {
      //       totalAmount: {
      //         $sum: {
      //           $map: {
      //             input: '$salecontract',
      //             as: 'item',
      //             in: '$$item.amount',
      //           },
      //         },
      //       },
      //     },
      //   },
      //   {
      //     $match: {
      //       totalQty: { $gt: 0 },
      //       totalAmount: { $gt: 0 },
      //     },
      //   },
      //   {
      //     $project: {
      //       name: 1,
      //       totalQty: 1,
      //       totalAmount: 1,
      //       salecontract: {
      //         $size: '$salecontract',
      //       },
      //     },
      //   },

      //   { $sort: { totalQty: -1, totalAmount: -1 } },
      //   { $skip: skipCount },
      //   { $limit: limit },
      // ]);
      // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
      // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
      // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
      // const result = {
      //   brand_groupby: brandgroup,
      //   total_records: total_records,
      //   totalQtySum: totalQtySum,
      //   totalAmountSum: totalAmountSum,
      //   totalSaleContractsSum: totalSaleContractsSum
      // };
      // return result;
    } else if (
      input.royality_approval !== '' &&
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand)
    ) {
      console.log('royality_approval');

      function stringToBoolean(str: string | undefined) {
        return str?.toLowerCase() === 'true';
      }

      const royality_approval = stringToBoolean(input.royality_approval);

      let where: any = {
        contractDate: {
          $gte: new Date(input.fromDate),
          $lte: new Date(input.toDate),
        },
        isDeleted: false,
        royality_approval: royality_approval,
        shipment: false,
        // InHouse: false,
        invoice: false,
      };
      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: where,
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ]);
      const invoicetotalQty = total_record.reduce(
        (sum, item) => sum + item.invoicetotalQty,
        0
      );
      const invoicetotalAmount = total_record.reduce(
        (sum, item) => sum + item.invoicetotalAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );

      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        invoicetotalQty: invoicetotalQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        invoicetotalAmount: invoicetotalAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group == '' &&
      input.product_group == '' &&
      input.brand_group == '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('general filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }

      const total_record = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ]);

      const saleContractDetail = await SalesContractDtlModel.aggregate([
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },

        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_dtl',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'branddtl',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salesContractData',
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$product_dtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$branddtl',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salesContractData',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'currencies',
            localField: 'currency',
            foreignField: '_id',
            as: 'currencyData',
          },
        },
        {
          $lookup: {
            from: 'paymentterms',
            localField: 'salesContractData.paymentTerm',
            foreignField: '_id',
            as: 'paymentTermData',
          },
        },
        {
          $project: {
            contract: '$salesContractData.contract',
            po: '$salesContractData.po',
            podate: '$salesContractData.poDate',
            Contractdate: '$salesContractData.contractDate',
            customer: '$customer_details.name',
            product: '$product_dtl.name',
            brand: '$branddtl.name',
            currency: {
              $arrayElemAt: ['$currencyData.name', 0],
            },
            payment_term: {
              $arrayElemAt: ['$paymentTermData.name', 0],
            },
            uom: '$uom',
            invoicetotalQty: {
              $sum: '$invoiceDetails.qty',
            },
            invoicetotalAmount: {
              $sum: '$invoiceDetails.amount',
            },
            shipmentTotalQty: {
              $sum: '$shipmentDetails.qty',
            },
            shipmentTotalAmount: {
              $sum: '$shipmentDetails.amount',
            },
          },
        },
        {
          $group: {
            _id: {
              contract: '$contract',
              po: '$po',
              podate: '$podate',
              Contractdate: '$Contractdate',
              customer: '$customer',
              product: '$product',
              brand: '$brand',
              currency: '$currency',
              payment_term: '$payment_term',
              uom: '$uom',
            },
            invoicetotalQty: {
              $sum: '$invoicetotalQty',
            },
            invoicetotalAmount: {
              $sum: '$invoicetotalAmount',
            },
            totalShipmentQty: {
              $sum: '$shipmentTotalQty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentTotalAmount',
            },
          },
        },
        {
          $project: {
            _id: 0,
            contract: '$_id.contract',
            po: '$_id.po',
            podate: '$_id.podate',
            Contractdate: '$_id.Contractdate',
            customer: '$_id.customer',
            product: '$_id.product',
            brand: '$_id.brand',
            currency: '$_id.currency',
            payment_term: '$_id.payment_term',
            uom: '$_id.uom',
            totalShipmentQty: 1,
            invoicetotalQty: 1,
            invoicetotalAmount: 1,
            totalShipmentAmount: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ]);

      const invoicetotalQty = total_record.reduce(
        (sum, item) => sum + item.invoicetotalQty,
        0
      );
      const invoicetotalAmount = total_record.reduce(
        (sum, item) => sum + item.invoicetotalAmount,
        0
      );
      const remainingQtySum = total_record.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_record.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentQty = total_record.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalShipmentAmount = total_record.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      let result = {
        salescontract_dtl: saleContractDetail,
        total_records: total_record.length,
        paginated_record: saleContractDetail.length,
        invoicetotalQty: invoicetotalQty,
        remainingQtySum: remainingQtySum,
        remainingAmount: remainingAmount,
        invoicetotalAmount: invoicetotalAmount,
        totalShipmentQty: totalShipmentQty,
        totalShipmentAmount: totalShipmentAmount,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer group customer ');

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to product');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('brandgroup brand');
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },
        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to customer');

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { customer: { $in: customerArr } },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { customer: { $in: customerArr } },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length !== 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('product to customer');

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            customer: { $in: customerArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'salescontracts',
            localField: 'salesContract',
            foreignField: '_id',
            as: 'salescontract',
          },
        },

        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            contractDate: { $first: '$contractDate' },
            contract: { $first: '$salescontract.contract' },
            customerName: { $first: '$customer_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$salescontract',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$customer_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            contract: { $first: '$contract' },
            contractDate: { $first: '$contractDate' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            contractDate: 1,
            contract: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('customer to product ');
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { product: { $in: productArr } },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: { product: { $in: productArr } },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      console.log(totalInvoiceQty);
      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0
    ) {
      console.log('customer group to brand');

      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            isDeleted: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.product) &&
      input.product.length !== 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0 &&
      Array.isArray(input.brand) &&
      input.brand.length == 0
    ) {
      console.log('brand to product');

      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: {
            product: { $in: productArr },
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id', // Group by brand
            brandName: { $first: '$brand_details.name' },
            productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id', // Keep grouping by brand
            brandName: { $first: '$brandName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.royality_approval == '' &&
      Array.isArray(input.brand) &&
      input.brand.length !== 0 &&
      Array.isArray(input.product) &&
      input.product.length == 0 &&
      Array.isArray(input.customer) &&
      input.customer.length == 0
    ) {
      console.log('product group to brand ');

      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$brand_details',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$product_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
            brand: { $in: brandArr },
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$brand_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
    } else if (
      input.customer_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log('customergroup with general filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};

      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      const customerAggregationPipelineRecords: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
      ];

      const customerAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$customer_details._id',
            customerName: {
              $first: '$customer_details.name',
            },
            brandName: {
              $first: '$brand_details.name',
            },
            productName: {
              $first: '$product_details.name',
            },
            invoiceDetails: {
              $push: '$invoiceDetails',
            },
            shipmentDetails: {
              $push: '$shipmentDetails',
            },
            totalContracts: {
              $sum: 1,
            },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            customerName: {
              $first: '$customerName',
            },
            brandName: {
              $first: '$brandName',
            },
            productName: {
              $first: '$productName',
            },
            totalInvoiceQty: {
              $sum: '$invoiceDetails.qty',
            },
            totalInvoiceAmount: {
              $sum: '$invoiceDetails.amount',
            },
            totalShipmentQty: {
              $sum: '$shipmentDetails.qty',
            },
            totalShipmentAmount: {
              $sum: '$shipmentDetails.amount',
            },
            totalContracts: {
              $first: '$totalContracts',
            },
          },
        },
        {
          $project: {
            customerName: 1,
            productName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: {
              $gt: 0,
            },
          },
        },
        { $sort: { remainingQty: -1, remainingAmount: -1 } },
      ];

      const customer = await SalesContractDtlModel.aggregate(
        customerAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        customerAggregationPipelineRecords
      );
      const totalSaleContractsSum = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );

      const result = {
        customer_groupby: customer,
        total_records: total_records.length,
        remainingQty: remainingQty,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        totalSaleContractsSum: totalSaleContractsSum,
      };
      return result;
    } else if (
      input.product_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' product group with filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      const productAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: filter_records,
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            customerName: 1,
            brandName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const productAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            // InHouse: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$product_details._id',
            productName: { $first: '$product_details.name' },
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            invoiceDetails: { $push: '$invoiceDetails' },
            shipmentDetails: { $push: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            productName: 1,
            brandName: 1,
            customerName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const product = await SalesContractDtlModel.aggregate(
        productAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        productAggregationPipelineRecord
      );
      const totalSalecontract = total_records.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        product_groupby: product,
        total_records: total_records.length,
        totalSaleContractsSum: totalSalecontract,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
      };
      return result;
    } else if (
      input.brand_group !== '' &&
      input.Adm == '' &&
      input.nonAdm == '' &&
      (input.royality_approval !== '' ||
        (Array.isArray(input.product) && input.product.length !== 0) ||
        (Array.isArray(input.customer) && input.customer.length !== 0) ||
        (Array.isArray(input.brand) && input.brand.length !== 0))
    ) {
      console.log(' brand group with filters brand customer product');
      let where: any = {};

      const customerArr = input.customer
        ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const productArr = input.product
        ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];
      const brandArr = input.brand
        ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
        : [];

      where = {};
      let filter: any = {};
      let filter_records: any = {};
      // where = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      // filter_records = {
      //   contractDate: {
      //     $gte: new Date(input.fromDate),
      //     $lte: new Date(input.toDate),
      //   },
      //   isDeleted: false,
      // };
      if (
        customerArr.length > 0 &&
        brandArr.length > 0 &&
        productArr.length > 0
      ) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0 && brandArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          },
        ];
      } else if (customerArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          customer: { $in: customerArr },
        };
        filter_records.$and = [
          {
            customer: { $in: customerArr },
            product: { $in: productArr },
          },
        ];
      } else if (brandArr.length > 0 && productArr.length > 0) {
        where.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
        filter = {
          product: { $in: productArr },
          brand: { $in: brandArr },
        };
        filter_records.$and = [
          {
            brand: { $in: brandArr },
            product: { $in: productArr },
          },
        ];
      } else if (customerArr.length > 0) {
        where = {
          customer: { $in: customerArr },
        };
        filter = {
          customer: { $in: customerArr },
        };
        filter_records = {
          customer: { $in: customerArr },
        };
      } else if (brandArr.length > 0) {
        (where = {
          brand: { $in: brandArr },
        }),
          (filter = {
            brand: { $in: brandArr },
          });
        filter_records = {
          brand: { $in: brandArr },
        };
      } else if (productArr.length > 0) {
        where = {
          product: { $in: productArr },
        };
        filter = {
          product: { $in: productArr },
        };
        filter_records = {
          product: { $in: productArr },
        };
      }
      if (input.royality_approval !== '') {
        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);
        where.royality_approval = royality_approval;
        (filter_records.royality_approval = royality_approval),
          (filter.royality_approval = royality_approval);
      }
      const brandAggregationPipelineRecord: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                  royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                  royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $first: '$invoiceDetails' },
            shipmentDetails: { $first: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandAggregationPipeline: any = [
        {
          $match: {
            contractDate: {
              $gte: new Date(input.fromDate),
              $lte: new Date(input.toDate),
            },
            isDeleted: false,
            shipment: true,
            invoice: false,
          },
        },
        {
          $match: where,
        },
        {
          $lookup: {
            from: 'brands',
            localField: 'brand',
            foreignField: '_id',
            as: 'brand_details',
          },
        },
        {
          $lookup: {
            from: 'products',
            localField: 'product',
            foreignField: '_id',
            as: 'product_details',
          },
        },
        {
          $lookup: {
            from: 'customers',
            localField: 'customer',
            foreignField: '_id',
            as: 'customer_details',
          },
        },
        {
          $lookup: {
            from: 'shipmentdtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'shipmentDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                  royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                },
              },
            ],
          },
        },
        {
          $lookup: {
            from: 'invoicedtls',
            localField: 'salesContract',
            foreignField: 'salesContract',
            as: 'invoiceDetails',
            pipeline: [
              {
                $match: {
                  isDeleted: false,
                  royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                },
              },
            ],
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$brand_details._id',
            brandName: { $first: '$brand_details.name' },
            customerName: { $first: '$customer_details.name' },
            productName: { $first: '$product_details.name' },
            invoiceDetails: { $first: '$invoiceDetails' },
            shipmentDetails: { $first: '$shipmentDetails' },
            totalContracts: { $sum: 1 },
          },
        },
        {
          $unwind: {
            path: '$shipmentDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $unwind: {
            path: '$invoiceDetails',
            preserveNullAndEmptyArrays: true,
          },
        },
        {
          $group: {
            _id: '$_id',
            brandName: { $first: '$brandName' },
            customerName: { $first: '$customerName' },
            productName: { $first: '$productName' },
            totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
            totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
            totalShipmentQty: { $sum: '$shipmentDetails.qty' },
            totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
            totalContracts: { $first: '$totalContracts' },
          },
        },
        {
          $project: {
            brandName: 1,
            customerName: 1,
            productName: 1,
            totalInvoiceQty: 1,
            totalShipmentQty: 1,
            totalInvoiceAmount: 1,
            totalShipmentAmount: 1,
            totalContracts: 1,
            remainingQty: {
              $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
            },
            remainingAmount: {
              $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
            },
          },
        },
        {
          $match: {
            remainingQty: { $gt: 0 },
          },
        },

        {
          $sort: { remainingQty: -1, remainingAmount: -1 },
        },
      ];

      const brandgroup = await SalesContractDtlModel.aggregate(
        brandAggregationPipeline
      );
      const total_records = await SalesContractDtlModel.aggregate(
        brandAggregationPipelineRecord
      );

      const totalSaleContractsSum = brandgroup.reduce(
        (sum, item) => sum + item.totalContracts,
        0
      );
      const remainingQty = total_records.reduce(
        (sum, item) => sum + item.remainingQty,
        0
      );
      const remainingAmount = total_records.reduce(
        (sum, item) => sum + item.remainingAmount,
        0
      );
      const totalShipmentAmount = total_records.reduce(
        (sum, item) => sum + item.totalShipmentAmount,
        0
      );
      const totalShipmentQty = total_records.reduce(
        (sum, item) => sum + item.totalShipmentQty,
        0
      );
      const totalInvoiceAmount = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceAmount,
        0
      );
      const totalInvoiceQty = total_records.reduce(
        (sum, item) => sum + item.totalInvoiceQty,
        0
      );
      const result = {
        brand_groupby: brandgroup,
        total_records: total_records.length,
        totalShipmentAmount: totalShipmentAmount,
        totalShipmentQty: totalShipmentQty,
        totalSaleContractsSum: totalSaleContractsSum,
        totalInvoiceAmount: totalInvoiceAmount,
        totalInvoiceQty: totalInvoiceQty,
        remainingQty: remainingQty,
        remainingAmount: remainingAmount,
      };
      return result;
    } else if (input.nonAdm !== '') {
      console.log('nonadm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == ''
      ) {
        console.log('no filter condition execute ');

        const allrecordgroupby = await ShipmentDtlModel.aggregate([
          {
            $match: {
              gpDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              InHouse: false,
              isDeleted: false,
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                product: '$product',
                brand: '$brand',
              },
              totalQty: { $sum: '$qty' },
              totalShippedQty: { $sum: '$shippedQty' }, // Ensure this field exists and has values
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              product: '$_id.product',
              brand: '$_id.brand',
              totalQty: 1,
              totalShippedQty: 1,
              remainingQty: {
                $subtract: ['$totalQty', { $ifNull: ['$totalShippedQty', 0] }], // Handle cases where shippedQty might be null
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 }, // Filter out entries where remainingQty is 0 or negative
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: false,
          shipment: true,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general ');

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product general ');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              // InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              // InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;

        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // console.log('product general');

        // const total_records = await ProductModel.countDocuments();

        // const product = await ProductModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'product',
        //       as: 'sales_dtl',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$sales_dtl',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       total_sales: {
        //         $size: '$sales_dtl',
        //       },
        //     },
        //   },
        //   // {
        //   //   $project: {
        //   //     name: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     // sales_dtl: {
        //   //     //   $size: '$sales_dtl',
        //   //     // },
        //   //     // salesContract: {
        //   //     //   $first: '$sales_dtl.salesContract',
        //   //     // },
        //   //   },
        //   // },
        //   // {
        //   //   $lookup: {
        //   //     from: 'salescontracts',
        //   //     localField: 'salesContract',
        //   //     foreignField: '_id',
        //   //     as: 'salecontracts',
        //   //   },
        //   // },
        //   // {
        //   //   $project: {
        //   //     sales_dtl: 1,
        //   //     totalQty: 1,
        //   //     totalAmount: 1,
        //   //     name: 1,
        //   //     total_sales: {
        //   //       $size: '$sales_dtl',
        //   //     },
        //   //     // saleContracts: {
        //   //     //   $first: '$salecontracts.contract',
        //   //     // },

        //   //   },
        //   // },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSalecontract = product.reduce((sum, item) => sum + item.total_sales, 0)
        // const totalQtySum = product.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = product.reduce((sum, item) => sum + item.totalAmount, 0);
        // const result = {
        //   product_groupby: product,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSalecontract
        // };
        // return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        // const brandgroup = await SalesContractDtlModel.aggregate([
        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate)
        //       },
        //       isDeleted: false,

        //     }
        //   },
        //   {
        //     $lookup: {
        //       from: 'brands',
        //       localField: 'brand',
        //       foreignField: '_id',
        //       as: 'brand'
        //     }
        //   },
        //   {
        //     $unwind: '$brand'
        //   },
        //   {
        //     $group: {
        //       _id: '$brand._id',
        //       name: { $first: '$brand.name' },
        //       totalContracts: { $sum: 1 },
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' }
        //     }
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     }
        //   },
        //   {
        //     $project: {
        //       _id: 0, // Exclude _id field
        //       name: 1,
        //       totalContracts: 1,
        //       totalQty: 1,
        //       totalAmount: 1
        //     }
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ])
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.royality_approval !== '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality_approval');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          shipment: false,
          InHouse: false,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);
        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }

        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: false,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: false,
              invoice: false,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to customer');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salescontract',
            },
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              contractDate: { $first: '$contractDate' },
              contract: { $first: '$salescontract.contract' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salescontract',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              contract: { $first: '$contract' },
              contractDate: { $first: '$contractDate' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              contractDate: 1,
              contract: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer to product ');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        console.log(totalInvoiceQty);
        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer group to brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('product group to brand ');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];
        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: false,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];
        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    } else if (input.Adm !== '') {
      console.log('adm');
      if (
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        input.royality_approval == ''
      ) {
        console.log('no filter condition execute ');

        const allrecordgroupby = await ShipmentDtlModel.aggregate([
          {
            $match: {
              gpDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              InHouse: true,
              isDeleted: false,
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                product: '$product',
                brand: '$brand',
              },
              totalQty: { $sum: '$qty' },
              totalShippedQty: { $sum: '$shippedQty' }, // Ensure this field exists and has values
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              product: '$_id.product',
              brand: '$_id.brand',
              totalQty: 1,
              totalShippedQty: 1,
              remainingQty: {
                $subtract: ['$totalQty', { $ifNull: ['$totalShippedQty', 0] }], // Handle cases where shippedQty might be null
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 }, // Filter out entries where remainingQty is 0 or negative
            },
          },
        ]);

        const totalQty = allrecordgroupby.map((item: any) => item.qty);
        const totalRate = allrecordgroupby.map((item: any) => item.rate);
        const totalAmount = allrecordgroupby.map((item: any) => item.amount);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          InHouse: true,
          shipment: true,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer general ');

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product general ');

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0
      ) {
        console.log('brand general!');

        // const brandgroup = await SalesContractDtlModel.aggregate([
        //   {
        //     $match: {
        //       contractDate: {
        //         $gte: new Date(input.fromDate),
        //         $lte: new Date(input.toDate)
        //       },
        //       isDeleted: false,

        //     }
        //   },
        //   {
        //     $lookup: {
        //       from: 'brands',
        //       localField: 'brand',
        //       foreignField: '_id',
        //       as: 'brand'
        //     }
        //   },
        //   {
        //     $unwind: '$brand'
        //   },
        //   {
        //     $group: {
        //       _id: '$brand._id',
        //       name: { $first: '$brand.name' },
        //       totalContracts: { $sum: 1 },
        //       totalQty: { $sum: '$qty' },
        //       totalAmount: { $sum: '$amount' }
        //     }
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 }
        //     }
        //   },
        //   {
        //     $project: {
        //       _id: 0, // Exclude _id field
        //       name: 1,
        //       totalContracts: 1,
        //       totalQty: 1,
        //       totalAmount: 1
        //     }
        //   },
        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ])
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
        // const limit = input.perPage;
        // const skipCount = (input.pageno - 1) * limit;
        // const total_records = await BrandModel.countDocuments();
        // const brandgroup = await BrandModel.aggregate([
        //   {
        //     $lookup: {
        //       from: 'salescontractdtls',
        //       localField: '_id',
        //       foreignField: 'brand',
        //       as: 'salecontract',
        //       pipeline: [
        //         {
        //           $project: {
        //             qty: 1,
        //             amount: 1
        //           },
        //         },
        //       ],
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalQty: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.qty',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $addFields: {
        //       totalAmount: {
        //         $sum: {
        //           $map: {
        //             input: '$salecontract',
        //             as: 'item',
        //             in: '$$item.amount',
        //           },
        //         },
        //       },
        //     },
        //   },
        //   {
        //     $match: {
        //       totalQty: { $gt: 0 },
        //       totalAmount: { $gt: 0 },
        //     },
        //   },
        //   {
        //     $project: {
        //       name: 1,
        //       totalQty: 1,
        //       totalAmount: 1,
        //       salecontract: {
        //         $size: '$salecontract',
        //       },
        //     },
        //   },

        //   { $sort: { totalQty: -1, totalAmount: -1 } },
        //   { $skip: skipCount },
        //   { $limit: limit },
        // ]);
        // const totalSaleContractsSum = brandgroup.reduce((sum, item) => sum + item.salecontract, 0);
        // const totalQtySum = brandgroup.reduce((sum, item) => sum + item.totalQty, 0);
        // const totalAmountSum = brandgroup.reduce((sum, item) => sum + item.totalAmount, 0)
        // const result = {
        //   brand_groupby: brandgroup,
        //   total_records: total_records,
        //   totalQtySum: totalQtySum,
        //   totalAmountSum: totalAmountSum,
        //   totalSaleContractsSum: totalSaleContractsSum
        // };
        // return result;
      } else if (
        input.royality_approval !== '' &&
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand)
      ) {
        console.log('royality_approval');

        function stringToBoolean(str: string | undefined) {
          return str?.toLowerCase() === 'true';
        }

        const royality_approval = stringToBoolean(input.royality_approval);

        let where: any = {
          contractDate: {
            $gte: new Date(input.fromDate),
            $lte: new Date(input.toDate),
          },
          isDeleted: false,
          royality_approval: royality_approval,
          shipment: false,
          InHouse: true,
          invoice: false,
        };
        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: where,
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ]);
        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );

        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group == '' &&
        input.product_group == '' &&
        input.brand_group == '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log('general filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }

        const total_record = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: true,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentQty', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const saleContractDetail = await SalesContractDtlModel.aggregate([
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              shipment: true,
              InHouse: true,
              invoice: false,
            },
          },

          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_dtl',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'branddtl',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salesContractData',
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$product_dtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$branddtl',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salesContractData',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'currencies',
              localField: 'currency',
              foreignField: '_id',
              as: 'currencyData',
            },
          },
          {
            $lookup: {
              from: 'paymentterms',
              localField: 'salesContractData.paymentTerm',
              foreignField: '_id',
              as: 'paymentTermData',
            },
          },
          {
            $project: {
              contract: '$salesContractData.contract',
              po: '$salesContractData.po',
              podate: '$salesContractData.poDate',
              Contractdate: '$salesContractData.contractDate',
              customer: '$customer_details.name',
              product: '$product_dtl.name',
              brand: '$branddtl.name',
              currency: {
                $arrayElemAt: ['$currencyData.name', 0],
              },
              payment_term: {
                $arrayElemAt: ['$paymentTermData.name', 0],
              },
              uom: '$uom',
              invoicetotalQty: {
                $sum: '$invoiceDetails.qty',
              },
              invoicetotalAmount: {
                $sum: '$invoiceDetails.amount',
              },
              shipmentTotalQty: {
                $sum: '$shipmentDetails.qty',
              },
              shipmentTotalAmount: {
                $sum: '$shipmentDetails.amount',
              },
            },
          },
          {
            $group: {
              _id: {
                contract: '$contract',
                po: '$po',
                podate: '$podate',
                Contractdate: '$Contractdate',
                customer: '$customer',
                product: '$product',
                brand: '$brand',
                currency: '$currency',
                payment_term: '$payment_term',
                uom: '$uom',
              },
              invoicetotalQty: {
                $sum: '$invoicetotalQty',
              },
              invoicetotalAmount: {
                $sum: '$invoicetotalAmount',
              },
              totalShipmentQty: {
                $sum: '$shipmentTotalQty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentTotalAmount',
              },
            },
          },
          {
            $project: {
              _id: 0,
              contract: '$_id.contract',
              po: '$_id.po',
              podate: '$_id.podate',
              Contractdate: '$_id.Contractdate',
              customer: '$_id.customer',
              product: '$_id.product',
              brand: '$_id.brand',
              currency: '$_id.currency',
              payment_term: '$_id.payment_term',
              uom: '$_id.uom',
              totalShipmentQty: 1,
              invoicetotalQty: 1,
              invoicetotalAmount: 1,
              totalShipmentAmount: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$invoicetotalQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$invoicetotalAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ]);

        const invoicetotalQty = total_record.reduce(
          (sum, item) => sum + item.invoicetotalQty,
          0
        );
        const invoicetotalAmount = total_record.reduce(
          (sum, item) => sum + item.invoicetotalAmount,
          0
        );
        const remainingQtySum = total_record.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_record.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentQty = total_record.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalShipmentAmount = total_record.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        let result = {
          salescontract_dtl: saleContractDetail,
          total_records: total_record.length,
          paginated_record: saleContractDetail.length,
          invoicetotalQty: invoicetotalQty,
          remainingQtySum: remainingQtySum,
          remainingAmount: remainingAmount,
          invoicetotalAmount: invoicetotalAmount,
          totalShipmentQty: totalShipmentQty,
          totalShipmentAmount: totalShipmentAmount,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer group customer ');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('brandgroup brand');
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to customer');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { customer: { $in: customerArr } },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length !== 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('product to customer');

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              customer: { $in: customerArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'salescontracts',
              localField: 'salesContract',
              foreignField: '_id',
              as: 'salescontract',
            },
          },

          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              contractDate: { $first: '$contractDate' },
              contract: { $first: '$salescontract.contract' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$salescontract',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$customer_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              contract: { $first: '$contract' },
              contractDate: { $first: '$contractDate' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              contractDate: 1,
              contract: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('customer to product ');
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: { product: { $in: productArr } },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        console.log(totalInvoiceQty);
        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0
      ) {
        console.log('customer group to brand');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              isDeleted: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.product) &&
        input.product.length !== 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0 &&
        Array.isArray(input.brand) &&
        input.brand.length == 0
      ) {
        console.log('brand to product');

        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: {
              product: { $in: productArr },
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id', // Group by brand
              brandName: { $first: '$brand_details.name' },
              productName: { $first: '$product_details.name' }, // Assuming the brand has a 'name' field
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id', // Keep grouping by brand
              brandName: { $first: '$brandName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        input.royality_approval == '' &&
        Array.isArray(input.brand) &&
        input.brand.length !== 0 &&
        Array.isArray(input.product) &&
        input.product.length == 0 &&
        Array.isArray(input.customer) &&
        input.customer.length == 0
      ) {
        console.log('product group to brand ');

        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$brand_details',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$product_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
              brand: { $in: brandArr },
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.customer_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(
          'customergroup with general filters brand customer product'
        );
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};

        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const customerAggregationPipelineRecords: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const customerAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$customer_details._id',
              customerName: {
                $first: '$customer_details.name',
              },
              brandName: {
                $first: '$brand_details.name',
              },
              productName: {
                $first: '$product_details.name',
              },
              invoiceDetails: {
                $push: '$invoiceDetails',
              },
              shipmentDetails: {
                $push: '$shipmentDetails',
              },
              totalContracts: {
                $sum: 1,
              },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              customerName: {
                $first: '$customerName',
              },
              brandName: {
                $first: '$brandName',
              },
              productName: {
                $first: '$productName',
              },
              totalInvoiceQty: {
                $sum: '$invoiceDetails.qty',
              },
              totalInvoiceAmount: {
                $sum: '$invoiceDetails.amount',
              },
              totalShipmentQty: {
                $sum: '$shipmentDetails.qty',
              },
              totalShipmentAmount: {
                $sum: '$shipmentDetails.amount',
              },
              totalContracts: {
                $first: '$totalContracts',
              },
            },
          },
          {
            $project: {
              customerName: 1,
              productName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: {
                $gt: 0,
              },
            },
          },
          { $sort: { remainingQty: -1, remainingAmount: -1 } },
        ];

        const customer = await SalesContractDtlModel.aggregate(
          customerAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          customerAggregationPipelineRecords
        );
        const totalSaleContractsSum = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );

        const result = {
          customer_groupby: customer,
          total_records: total_records.length,
          remainingQty: remainingQty,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          totalSaleContractsSum: totalSaleContractsSum,
        };
        return result;
      } else if (
        input.product_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' product group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const productAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: filter_records,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              customerName: 1,
              brandName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const productAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$product_details._id',
              productName: { $first: '$product_details.name' },
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              invoiceDetails: { $push: '$invoiceDetails' },
              shipmentDetails: { $push: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              productName: { $first: '$productName' },
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              productName: 1,
              brandName: 1,
              customerName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const product = await SalesContractDtlModel.aggregate(
          productAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          productAggregationPipelineRecord
        );
        const totalSalecontract = total_records.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          product_groupby: product,
          total_records: total_records.length,
          totalSaleContractsSum: totalSalecontract,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
        };
        return result;
      } else if (
        input.brand_group !== '' &&
        (input.royality_approval !== '' ||
          (Array.isArray(input.product) && input.product.length !== 0) ||
          (Array.isArray(input.customer) && input.customer.length !== 0) ||
          (Array.isArray(input.brand) && input.brand.length !== 0))
      ) {
        console.log(' brand group with filters brand customer product');
        let where: any = {};

        const customerArr = input.customer
          ? input.customer.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const productArr = input.product
          ? input.product.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];
        const brandArr = input.brand
          ? input.brand.map((id: any) => new mongoose.Types.ObjectId(id))
          : [];

        where = {};
        let filter: any = {};
        let filter_records: any = {};
        // where = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        // filter_records = {
        //   contractDate: {
        //     $gte: new Date(input.fromDate),
        //     $lte: new Date(input.toDate),
        //   },
        //   isDeleted: false,
        // };
        if (
          customerArr.length > 0 &&
          brandArr.length > 0 &&
          productArr.length > 0
        ) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0 && brandArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              brand: { $in: brandArr },
            },
          ];
        } else if (customerArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            customer: { $in: customerArr },
          };
          filter_records.$and = [
            {
              customer: { $in: customerArr },
              product: { $in: productArr },
            },
          ];
        } else if (brandArr.length > 0 && productArr.length > 0) {
          where.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
          filter = {
            product: { $in: productArr },
            brand: { $in: brandArr },
          };
          filter_records.$and = [
            {
              brand: { $in: brandArr },
              product: { $in: productArr },
            },
          ];
        } else if (customerArr.length > 0) {
          where = {
            customer: { $in: customerArr },
          };
          filter = {
            customer: { $in: customerArr },
          };
          filter_records = {
            customer: { $in: customerArr },
          };
        } else if (brandArr.length > 0) {
          (where = {
            brand: { $in: brandArr },
          }),
            (filter = {
              brand: { $in: brandArr },
            });
          filter_records = {
            brand: { $in: brandArr },
          };
        } else if (productArr.length > 0) {
          where = {
            product: { $in: productArr },
          };
          filter = {
            product: { $in: productArr },
          };
          filter_records = {
            product: { $in: productArr },
          };
        }
        if (input.royality_approval !== '') {
          function stringToBoolean(str: string | undefined) {
            return str?.toLowerCase() === 'true';
          }

          const royality_approval = stringToBoolean(input.royality_approval);
          where.royality_approval = royality_approval;
          (filter_records.royality_approval = royality_approval),
            (filter.royality_approval = royality_approval);
        }
        const brandAggregationPipelineRecord: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandAggregationPipeline: any = [
          {
            $match: {
              contractDate: {
                $gte: new Date(input.fromDate),
                $lte: new Date(input.toDate),
              },
              isDeleted: false,
              InHouse: true,
              shipment: true,
              invoice: false,
            },
          },
          {
            $match: where,
          },
          {
            $lookup: {
              from: 'brands',
              localField: 'brand',
              foreignField: '_id',
              as: 'brand_details',
            },
          },
          {
            $lookup: {
              from: 'products',
              localField: 'product',
              foreignField: '_id',
              as: 'product_details',
            },
          },
          {
            $lookup: {
              from: 'customers',
              localField: 'customer',
              foreignField: '_id',
              as: 'customer_details',
            },
          },
          {
            $lookup: {
              from: 'shipmentdtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'shipmentDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $lookup: {
              from: 'invoicedtls',
              localField: 'salesContract',
              foreignField: 'salesContract',
              as: 'invoiceDetails',
              pipeline: [
                {
                  $match: {
                    isDeleted: false,
                    royaltyApproval: true, // Assuming you want to filter by royaltyApproval here
                  },
                },
              ],
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$brand_details._id',
              brandName: { $first: '$brand_details.name' },
              customerName: { $first: '$customer_details.name' },
              productName: { $first: '$product_details.name' },
              invoiceDetails: { $first: '$invoiceDetails' },
              shipmentDetails: { $first: '$shipmentDetails' },
              totalContracts: { $sum: 1 },
            },
          },
          {
            $unwind: {
              path: '$shipmentDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $unwind: {
              path: '$invoiceDetails',
              preserveNullAndEmptyArrays: true,
            },
          },
          {
            $group: {
              _id: '$_id',
              brandName: { $first: '$brandName' },
              customerName: { $first: '$customerName' },
              productName: { $first: '$productName' },
              totalInvoiceQty: { $sum: '$invoiceDetails.qty' },
              totalInvoiceAmount: { $sum: '$invoiceDetails.amount' },
              totalShipmentQty: { $sum: '$shipmentDetails.qty' },
              totalShipmentAmount: { $sum: '$shipmentDetails.amount' },
              totalContracts: { $first: '$totalContracts' },
            },
          },
          {
            $project: {
              brandName: 1,
              customerName: 1,
              productName: 1,
              totalInvoiceQty: 1,
              totalShipmentQty: 1,
              totalInvoiceAmount: 1,
              totalShipmentAmount: 1,
              totalContracts: 1,
              remainingQty: {
                $subtract: ['$totalShipmentQty', '$totalInvoiceQty'],
              },
              remainingAmount: {
                $subtract: ['$totalShipmentAmount', '$totalInvoiceAmount'],
              },
            },
          },
          {
            $match: {
              remainingQty: { $gt: 0 },
            },
          },

          {
            $sort: { remainingQty: -1, remainingAmount: -1 },
          },
        ];

        const brandgroup = await SalesContractDtlModel.aggregate(
          brandAggregationPipeline
        );
        const total_records = await SalesContractDtlModel.aggregate(
          brandAggregationPipelineRecord
        );

        const totalSaleContractsSum = brandgroup.reduce(
          (sum, item) => sum + item.totalContracts,
          0
        );
        const remainingQty = total_records.reduce(
          (sum, item) => sum + item.remainingQty,
          0
        );
        const remainingAmount = total_records.reduce(
          (sum, item) => sum + item.remainingAmount,
          0
        );
        const totalShipmentAmount = total_records.reduce(
          (sum, item) => sum + item.totalShipmentAmount,
          0
        );
        const totalShipmentQty = total_records.reduce(
          (sum, item) => sum + item.totalShipmentQty,
          0
        );
        const totalInvoiceAmount = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceAmount,
          0
        );
        const totalInvoiceQty = total_records.reduce(
          (sum, item) => sum + item.totalInvoiceQty,
          0
        );
        const result = {
          brand_groupby: brandgroup,
          total_records: total_records.length,
          totalShipmentAmount: totalShipmentAmount,
          totalShipmentQty: totalShipmentQty,
          totalSaleContractsSum: totalSaleContractsSum,
          totalInvoiceAmount: totalInvoiceAmount,
          totalInvoiceQty: totalInvoiceQty,
          remainingQty: remainingQty,
          remainingAmount: remainingAmount,
        };
        return result;
      }
    }
  } catch (err) {
    console.log({ err });
  }
};

export const pending_invoices_dtlPrint = async (input: SaleContractReportSchema )=> {
const {
      brand,
      customer,
      product,
      fromDate,
      toDate,
      // pageno = 1,
      // perPage = 10,
      order_status,
      royality_approval,
      Adm,
      nonAdm,
      isDeleted,
      brand_group,
      customer_group,
      product_group,
    } = input;


    // const limit = perPage;
    // const skipCount = (pageno - 1) * limit;


    const groupId: any = {};
    const shouldGroup = product_group || brand_group || customer_group;

     if (product_group) groupId.product = '$products';
    if (brand_group) groupId.brand = '$brands';
    if (customer_group) groupId.customer = '$customers';

const matchStage: any = {  shipment: true , invoice:false};

    if (fromDate && toDate) {
      matchStage.contractDate = {
        $gte: new Date(fromDate),
        $lte: new Date(toDate),
      };
    }


  if (Array.isArray(product) && product.length > 0) {
    matchStage.product = {
    $in: product.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(brand) && brand.length > 0) {
    matchStage.brand = {
    $in: brand.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Array.isArray(customer) && customer.length > 0) {
    matchStage.customer ={
    $in: customer.map(id => new mongoose.Types.ObjectId(id))
  };
}

if (Adm) matchStage['InHouse'] = true;
if (nonAdm) matchStage['InHouse'] = false;
matchStage.isDeleted = false; // default

if (isDeleted && isDeleted.toString().toLowerCase() === "true") {
  matchStage.isDeleted = true;
}




     
  const scMatchStage: any = {};
   if (royality_approval == 'true')
        scMatchStage['royality_approval'] = true;
      if (royality_approval == 'false')
        scMatchStage['royality_approval'] = false;

      // const scMatchStage2: any = { isDeleted: false };
      if (order_status == 'confirmed')
        scMatchStage['order_status'] = 'confirmed';
      if (order_status == 'forecast')
        scMatchStage['order_status'] = 'forecast';


const basePipeline: any[] = [
   { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },

  // Lookup invoiced quantity
  {
    $lookup: {
      from: "invoicedtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "invoicedData"
    }
  },
  {
    $addFields: {
      invQty: {
        $ifNull: [{ $arrayElemAt: ["$invoicedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup shipped quantity
  {
    $lookup: {
      from: "shipmentdtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "shippedData"
    }
  },
  {
    $addFields: {
      shipQty: {
        $ifNull: [{ $arrayElemAt: ["$shippedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup related entities
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContracts"
    }
  },
  {
    $unwind: {
      path: "$salesContracts",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  {
    $unwind: {
      path: "$currencies",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  {
    $unwind: {
      path: "$paymentTerms",
      preserveNullAndEmptyArrays: true
    }
  },

  // Grouping for final summary
  {
    $group: {
      _id: {
        contract: "$salesContracts.contract",
        po: "$salesContracts.po",
        contractDate: "$contractDate",
        customers: "$customers.name",
        products: "$products.name",
        brands: "$brands.name",
        uom: "$uom"
      },
      invQty: { $sum: "$invQty" },
      shipQty: { $sum: "$shipQty" }
    }
  },

  // Final output
  {
    $project: {
      _id: 0,
      salesContract: "$_id.contract",
      po: "$_id.po",
      contractDate: "$_id.contractDate",
      customers: "$_id.customers",
      products: "$_id.products",
      brands: "$_id.brands",
      shipmentQuantity:  "$shipQty",
      invoiceQuantity: "$invQty",
      balanceQuantity: { $subtract: ["$shipQty", "$invQty"] },
      uom: "$_id.uom",
    }
  }
];




const basePipelineSummary: any[] = [
 { 
    $match:{
    ...matchStage,
    ...scMatchStage
  }
  },

  // Lookup invoiced quantity
  {
    $lookup: {
      from: "invoicedtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "invoicedData"
    }
  },
  {
    $addFields: {
      invQty: {
        $ifNull: [{ $arrayElemAt: ["$invoicedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup shipped quantity
  {
    $lookup: {
      from: "shipmentdtls",
      let: { contractId: "$salesContract" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$salesContract", "$$contractId"] },
                { $eq: ["$isDeleted", false] }
              ]
            }
          }
        },
        {
          $group: {
            _id: null,
            qty: { $sum: "$qty" }
          }
        }
      ],
      as: "shippedData"
    }
  },
  {
    $addFields: {
      shipQty: {
        $ifNull: [{ $arrayElemAt: ["$shippedData.qty", 0] }, 0]
      }
    }
  },

  // Lookup related entities
  {
    $lookup: {
      from: "customers",
      localField: "customer",
      foreignField: "_id",
      as: "customers"
    }
  },
  {
    $unwind: {
      path: "$customers",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "products",
      localField: "product",
      foreignField: "_id",
      as: "products"
    }
  },
  {
    $unwind: {
      path: "$products",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "brands",
      localField: "brand",
      foreignField: "_id",
      as: "brands"
    }
  },
  {
    $unwind: {
      path: "$brands",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "salescontracts",
      localField: "salesContract",
      foreignField: "_id",
      as: "salesContracts"
    }
  },
  {
    $unwind: {
      path: "$salesContracts",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "currencies",
      localField: "currency",
      foreignField: "_id",
      as: "currencies"
    }
  },
  {
    $unwind: {
      path: "$currencies",
      preserveNullAndEmptyArrays: true
    }
  },

  {
    $lookup: {
      from: "paymentterms",
      localField: "salesContracts.paymentTerm",
      foreignField: "_id",
      as: "paymentTerms"
    }
  },
  {
    $unwind: {
      path: "$paymentTerms",
      preserveNullAndEmptyArrays: true
    }
  },

  // Grouping for final summary
  {
    $group: {
      _id: {
        contract: "$salesContracts.contract",
        po: "$salesContracts.po",
        contractDate: "$contractDate",
        customers: "$customers.name",
        products: "$products.name",
        brands: "$brands.name",
        uom: "$uom"
      },
      invQty: { $sum: "$invQty" },
      shipQty: { $sum: "$shipQty" }
    }
  },

  // Final output
  {
    $project: {
    _id: 0,
      salesContract: "$_id.contract",
      po: "$_id.po",
      contractDate: "$_id.contractDate",
      customers: "$_id.customers",
      products: "$_id.products",
      brands: "$_id.brands",
      shipmentQuantity:  "$shipQty",
      invoiceQuantity: "$invQty",
      balanceQuantity: { $subtract: ["$shipQty", "$invQty"] },
      uom: "$_id.uom",
    }
  }
];


const sortStage = { $sort: { shipmentQuantity: -1 } };


const groupFields: { [key: string]: any } = {
    _id: groupId,

  }
 const groupFieldsSummary: { [key: string]: any } = {
    _id: null,

  };

   if (product_group) {
  groupFields.Product = { $first: '$products' };
  groupFields.ShipmentQuantity = { $sum: '$shipmentQuantity' };
  groupFields.InvoiceQuantity = { $sum: '$invoiceQuantity' };
  groupFields.BalanceQuantity = { $sum: '$balanceQuantity' };
  groupFields.TotalContracts = { $sum: 1 };

    groupFieldsSummary.ShipmentQuantity = { $sum: '$shipmentQuantity' };
  groupFieldsSummary.InvoiceQuantity = { $sum: '$invoiceQuantity' };
  groupFieldsSummary.TotalBalanceQty = { $sum: '$balanceQuantity' };
    // groupFieldsSummary.TotalContracts = { $sum: 1 };
}

if(brand_group){

  groupFields.Brand = { $first: '$brands' };
  groupFields.ShipmentQuantity = { $sum: '$shipmentQuantity' };
  groupFields.InvoiceQuantity = { $sum: '$invoiceQuantity' };
  groupFields.BalanceQuantity = { $sum: '$balanceQuantity' };
  groupFields.TotalContracts = { $sum: 1 };

   groupFieldsSummary.ShipmentQuantity = { $sum: '$shipmentQuantity' };
  groupFieldsSummary.InvoiceQuantity = { $sum: '$invoiceQuantity' };
  groupFieldsSummary.TotalBalanceQty = { $sum: '$balanceQuantity' };
    // groupFieldsSummary.TotalContracts = { $sum: 1 };



  };

if(customer_group){

  groupFields.Customer = { $first: '$customers' };
groupFields.ShipmentQty = { $sum: '$shipmentQuantity' };
  groupFields.InvoiceQty = { $sum: '$invoiceQuantity' };
  groupFields.TotalRemainingQty = { $sum: '$balanceQuantity' };
  groupFields.TotalContracts = { $sum: 1 };

   groupFieldsSummary.ShipmentQuantity = { $sum: '$shipmentQuantity' };
  groupFieldsSummary.InvoiceQuantity = { $sum: '$invoiceQuantity' };
  groupFieldsSummary.TotalBalanceQty = { $sum: '$balanceQuantity' };
    // groupFieldsSummary.TotalContracts = { $sum: 1 };


  }

const groupStage = {
  $group: groupFields,


}
const groupStageSummary = {
   $group: groupFieldsSummary
  
}



 // If grouping is not required, we can skip the group stage
      const dataPipeline = shouldGroup
        ? [...basePipeline, groupStage, sortStage]
        : [...basePipeline]

      // Count pipeline for total records
      // const countPipeline = shouldGroup
      //   ? [...basePipeline, groupStage, { $count: 'totalRecords' }]
      //   : [...basePipeline, { $count: 'totalRecords' }];


const summaryPipeline = shouldGroup
        ? [...basePipelineSummary, groupStageSummary]
        : [
          ...basePipelineSummary,
          {
            $group: {
              _id: null,
            // totalSalescontract: { $sum: 1 },
  totalShipmentQty:{$sum:"$shipmentQuantity"},
  totalInvoiceQty:{$sum:"$invoiceQuantity"},
  totalBalanceQty: {$sum: "$balanceQuantity"},
            
            
            },
          },
        ];
  // Executing the pipelines in parallel
      const [salesdtl, summaryResult] = await Promise.all([
        SalesContractDtlModel.aggregate(dataPipeline, { allowDiskUse: true }),
        // SalesContractDtlModel.aggregate(countPipeline, { allowDiskUse: true }),
        SalesContractDtlModel.aggregate(summaryPipeline, { allowDiskUse: true }),
      ]);

//  const totalRecords = totalResult?.[0]?.totalRecords || 0;
      const summary = summaryResult?.[0] || {
        totalSalescontract: 0,
        totalShipmentQty: 0,
        totalInvoiceQty: 0,
        totalBalanceQty: 0,
        
      };
      return {
        salesdtl,
        summary,
        // pagination: {
        //   page: pageno,
        //   perPage,
        //   totalRecords,
        //   totalPages: Math.ceil(totalRecords / perPage),
        // },
      };

  }



export const pendingContractBalanceClose = async (
  input: PendingContractBalanceSchema
) => {
  try {
    const salecontractdata = await SalesContractDtlModel.find({
      salesContract: new mongoose.Types.ObjectId(input.salesContract),
      isDeleted: false,
    });

    if (!salecontractdata || salecontractdata.length === 0) {
      return 'No data found';
    }

    const sale_dtl = await SalesContractDtlModel.updateOne(
      { salesContract: salecontractdata[0].salesContract, isDeleted: false },
      {
        $set: {
          qty: input.shippedQty,
        },
      }
    );
    return sale_dtl;
  } catch (error) {
    console.error(error);
  }
};
